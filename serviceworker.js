// Define a unique cache name for this version of your PWA.
// Increment this version number whenever you make changes to your PWA's assets
// (e.g., new build, new components, CSS changes) to ensure users get the latest files.
const CACHE_NAME = 'education-dashboard-react-cache-v1.0.2'; // Current version

// Define the base path for your GitHub Pages repository.
// This is crucial for correct path resolution when deployed to a subdirectory.
const GH_PATH = '/education-dashboard';

// Define the offline fallback page URL.
// This page should be a simple HTML file in your public directory.
const OFFLINE_URL = `${GH_PATH}/offline.html`;

// List all the assets you want to cache.
// Ensure all paths are prefixed with GH_PATH to be correct for GitHub Pages.
// For a React app, you'll typically cache the built static assets.
const urlsToCache = [
  `${GH_PATH}/`, // The root of your app
  `${GH_PATH}/index.html`,
  `${GH_PATH}/static/css/main.css`, // IMPORTANT: Adjust based on your actual build output (e.g., main.xxxx.css)
  `${GH_PATH}/static/js/main.js`,   // IMPORTANT: Adjust based on your actual build output (e.g., main.xxxx.js)
  `${GH_PATH}/manifest.json`,
  // Using placehold.co URLs for icons as requested
  'https://placehold.co/192x192/3b82f6/ffffff?text=EduDash',
  'https://placehold.co/512x512/3b82f6/ffffff?text=EduDash',
  OFFLINE_URL // Cache the offline fallback page
  // Add any other critical assets generated by your React build here,
  // making sure to prefix them with GH_PATH.
];

// Install event: Caches all the assets listed in urlsToCache.
self.addEventListener('install', (event) => {
  console.log('[Service Worker] Installing...');
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then((cache) => {
        console.log('[Service Worker] Caching React app shell and offline page');
        return cache.addAll(urlsToCache);
      })
      .catch((error) => {
        console.error('[Service Worker] Failed to cache during install:', error);
      })
  );
});

// Activate event: Cleans up old caches to ensure only the latest version is active.
self.addEventListener('activate', (event) => {
  console.log('[Service Worker] Activating...');
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cacheName) => {
          if (cacheName !== CACHE_NAME) {
            console.log('[Service Worker] Deleting old cache:', cacheName);
            return caches.delete(cacheName);
          }
          return Promise.resolve(); // Resolve for the current cache
        })
      );
    })
  );
});

// Fetch event: Intercepts network requests and serves from cache if available.
// Adds an offline fallback for navigation requests.
self.addEventListener('fetch', (event) => {
  // Only handle GET requests and requests for resources within your defined scope.
  if (event.request.method === 'GET' && event.request.url.startsWith(self.location.origin + GH_PATH)) {
    event.respondWith(
      caches.match(event.request)
        .then((response) => {
          // If the resource is in the cache, return it.
          if (response) {
            console.log('[Service Worker] Serving from cache:', event.request.url);
            return response;
          }

          // If not in cache, fetch from the network.
          console.log('[Service Worker] Fetching from network:', event.request.url);
          return fetch(event.request)
            .then((networkResponse) => {
              // Check if we received a valid response.
              if (!networkResponse || networkResponse.status !== 200 || networkResponse.type !== 'basic') {
                return networkResponse;
              }

              // Clone the response because it's a stream and can only be consumed once.
              const responseToCache = networkResponse.clone();

              caches.open(CACHE_NAME)
                .then((cache) => {
                  cache.put(event.request, responseToCache);
                });

              return networkResponse;
            })
            .catch((error) => {
              console.error('[Service Worker] Fetch failed for:', event.request.url, error);
              // If fetch fails, and it's a navigation request (e.g., trying to load a page),
              // serve the offline fallback page.
              if (event.request.mode === 'navigate') {
                console.log('[Service Worker] Serving offline fallback for navigation:', event.request.url);
                return caches.match(OFFLINE_URL);
              }
              // For other types of requests (e.g., images, scripts), just return a rejected promise.
              return Promise.reject(error);
            });
        })
    );
  } else {
    // For requests outside the scope or non-GET requests, just fetch from network.
    event.respondWith(fetch(event.request));
  }
});
