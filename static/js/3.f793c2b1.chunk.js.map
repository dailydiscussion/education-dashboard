{"version":3,"file":"static/js/3.f793c2b1.chunk.js","mappings":"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","sources":["components/TimetableEventCard.js","components/EditTimetableModal.js","pages/TimetablePage.js","components/AddModal.js"],"sourcesContent":["// src/components/TimetableEventCard.js\r\nimport React from 'react';\r\n\r\n// IMPORTANT: This component now accepts a single 'event' object as a prop.\r\n// The list mapping and date navigation are handled in TimetablePage.js.\r\nconst TimetableEventCard = React.memo(({ event, isEditMode, onDelete, onCheck, onEdit }) => {\r\n\r\n    // Removed sortedEvents useMemo as this component now receives a single event.\r\n    // Sorting is handled in TimetablePage.js before passing individual events.\r\n\r\n    // Removed formatDateForDisplay as date navigation is no longer in this component.\r\n    // Removed handlePrevDay and handleNextDay as date navigation is no longer in this component.\r\n\r\n    /**\r\n     * Determines the status of an event (Completed, Missed, or Pending).\r\n     * @param {string} eventDate - The date of the event in 'YYYY-MM-DD' format.\r\n     * @param {string} eventTime - The time of the event in 'HH:MM' format.\r\n     * @param {boolean} isChecked - The checked status of the event.\r\n     * @returns {{text: string, colorClass: string}} An object with status text and Tailwind CSS color class.\r\n     */\r\n    const getEventStatus = (eventDate, eventTime, isChecked) => {\r\n        if (isChecked) {\r\n            return { text: 'Completed', colorClass: 'text-green-600' };\r\n        }\r\n\r\n        const now = new Date();\r\n        // Combine date and time to create a full Date object for comparison\r\n        const eventDateTime = new Date(`${eventDate}T${eventTime}`);\r\n\r\n        if (eventDateTime < now) {\r\n            return { text: 'Missed', colorClass: 'text-red-600' };\r\n        } else {\r\n            return { text: 'Pending', colorClass: 'text-yellow-600' };\r\n        }\r\n    };\r\n\r\n    // Get the status and its corresponding color for the current event\r\n    const status = getEventStatus(event.date, event.time, event.checked);\r\n\r\n    return (\r\n        // The outer div for a single event card. Removed w-full and list-related wrappers.\r\n        <div\r\n            key={event.id} // Key is important for React's reconciliation, though often applied in the parent map\r\n            className={`flex justify-between items-center p-4 mb-3 rounded-xl shadow-sm border ${event.checked ? \"bg-green-100 border-green-300\" : \"bg-white border-gray-200\"}`}\r\n        >\r\n            <div>\r\n                <p className=\"text-sm text-gray-500\">{event.time}</p>\r\n                <p className=\"text-lg font-semibold text-gray-800\">{event.subject}</p>\r\n                <h4 className=\"text-base text-gray-600\">{event.topic}</h4>\r\n                <p className={`text-sm font-semibold ${status.colorClass}`}>{status.text}</p>\r\n            </div>\r\n            <div className=\"flex items-center\">\r\n                {/* Conditional rendering based on isEditMode */}\r\n                {isEditMode ? (\r\n                    <>\r\n                        {/* Edit button, visible only in edit mode */}\r\n                        <button\r\n                            onClick={() => onEdit(event.id)} // Call onEdit with event.id\r\n                            className=\"p-1.5 mr-4 rounded-full text-gray-400 hover:text-blue-500 transition-colors duration-200\"\r\n                            aria-label=\"Edit event\"\r\n                        >\r\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><path d=\"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\"></path><path d=\"M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z\"></path></svg>\r\n                        </button>\r\n                        {/* Delete button, visible only in edit mode */}\r\n                        <button\r\n                            onClick={() => onDelete(event.id)}\r\n                            className=\"p-1.5 rounded-full text-gray-400 hover:text-red-500 transition-colors duration-200 mr-2\"\r\n                            aria-label=\"Delete event\"\r\n                        >\r\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><path d=\"M3 6h18\"></path><path d=\"M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6\"></path><path d=\"M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2\"></path><line x1=\"10\" y1=\"11\" x2=\"10\" y2=\"17\"></line><line x1=\"14\" y1=\"11\" x2=\"14\" y2=\"17\"></line></svg>\r\n                        </button>\r\n                    </>\r\n                ) : (\r\n                    // Check/uncheck button for marking completion, visible only NOT in edit mode\r\n                    <button\r\n                        onClick={() => onCheck(event.id)}\r\n                        className={`w-6 h-6 rounded-full border-2 ${event.checked ? \"bg-green-500 border-green-500\" : \"border-gray-300\"}`}\r\n                        aria-label={event.checked ? \"Mark as incomplete\" : \"Mark as complete\"}\r\n                    >\r\n                        {/* Checkmark icon if event is checked */}\r\n                        {event.checked && (\r\n                            <svg\r\n                                xmlns=\"http://www.w3.org/2000/svg\"\r\n                                className=\"h-4 w-4 text-white m-auto\"\r\n                                fill=\"none\"\r\n                                viewBox=\"0 0 24 24\"\r\n                                stroke=\"currentColor\"\r\n                            >\r\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={3} d=\"M5 13l4 4L19 7\" />\r\n                            </svg>\r\n                        )}\r\n                    </button>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default TimetableEventCard;","// src/components/EditTimetableModal.js\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nconst EditTimetableModal = ({ isOpen, onClose, eventData, onUpdateEvent, showNotification }) => {\r\n    // State to manage form inputs within the modal\r\n    const [subject, setSubject] = useState('');\r\n    const [topic, setTopic] = useState('');\r\n    const [date, setDate] = useState('');\r\n    const [time, setTime] = useState('');\r\n\r\n    // Effect to populate form fields when eventData changes (i.e., when a new event is selected for editing)\r\n    useEffect(() => {\r\n        if (eventData) {\r\n            setSubject(eventData.subject || '');\r\n            setTopic(eventData.topic || '');\r\n            setDate(eventData.date || '');\r\n            setTime(eventData.time || '');\r\n        }\r\n    }, [eventData]);\r\n\r\n    // Handle the update action when the \"Update Event\" button is clicked\r\n    const handleUpdateClick = async () => {\r\n        if (!eventData || !eventData.id) {\r\n            showNotification('No event selected for editing.', 'error');\r\n            return;\r\n        }\r\n        if (!subject || !topic || !date || !time) {\r\n            showNotification('All fields are required.', 'error');\r\n            return;\r\n        }\r\n        // Call the onUpdateEvent prop, which will handle the actual Firestore update\r\n        await onUpdateEvent(eventData.id, subject, topic, date, time);\r\n        onClose(); // Close the modal after updating\r\n    };\r\n\r\n    if (!isOpen) {\r\n        return null; // Don't render anything if the modal is not open\r\n    }\r\n\r\n    return (\r\n        <div className=\"fixed inset-0 bg-gray-600 bg-opacity-75 flex items-center justify-center p-4 z-50\">\r\n            <div className=\"bg-white rounded-lg shadow-xl w-full max-w-md p-6 relative\">\r\n                <h3 className=\"text-xl font-bold text-gray-800 mb-4\">Edit Study Event</h3>\r\n                <div className=\"mb-3\">\r\n                    <label htmlFor=\"edit-modal-subject\" className=\"block text-sm font-medium text-gray-700 mb-1\">Subject</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"edit-modal-subject\"\r\n                        className=\"w-full px-4 py-2 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-50\"\r\n                        placeholder=\"e.g., Anatomy\"\r\n                        value={subject}\r\n                        onChange={(e) => setSubject(e.target.value)}\r\n                    />\r\n                </div>\r\n                <div className=\"mb-3\">\r\n                    <label htmlFor=\"edit-modal-topic\" className=\"block text-sm font-medium text-gray-700 mb-1\">Topic</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"edit-modal-topic\"\r\n                        className=\"w-full px-4 py-2 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-50\"\r\n                        placeholder=\"e.g., Cardiovascular System\"\r\n                        value={topic}\r\n                        onChange={(e) => setTopic(e.target.value)}\r\n                    />\r\n                </div>\r\n                <div className=\"mb-3\">\r\n                    <label htmlFor=\"edit-modal-date\" className=\"block text-sm font-medium text-gray-700 mb-1\">Date</label>\r\n                    <input\r\n                        type=\"date\"\r\n                        id=\"edit-modal-date\"\r\n                        className=\"w-full px-4 py-2 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-50\"\r\n                        value={date}\r\n                        onChange={(e) => setDate(e.target.value)}\r\n                    />\r\n                </div>\r\n                <div className=\"mb-4\">\r\n                    <label htmlFor=\"edit-modal-time\" className=\"block text-sm font-medium text-gray-700 mb-1\">Time</label>\r\n                    <input\r\n                        type=\"time\"\r\n                        id=\"edit-modal-time\"\r\n                        className=\"w-full px-4 py-2 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-50\"\r\n                        value={time}\r\n                        onChange={(e) => setTime(e.target.value)}\r\n                    />\r\n                </div>\r\n                <button\r\n                    onClick={handleUpdateClick}\r\n                    className=\"w-full bg-blue-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition duration-300\"\r\n                >\r\n                    Update Event\r\n                </button>\r\n                <button\r\n                    onClick={onClose}\r\n                    className=\"w-full mt-2 bg-gray-200 text-gray-700 font-bold py-2 px-4 rounded-lg hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-400 transition duration-300\"\r\n                >\r\n                    Cancel\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EditTimetableModal;","// src/pages/TimetablePage.js\r\nimport React, { useState, useCallback, useMemo } from 'react';\r\nimport TimetableEventCard from '../components/TimetableEventCard';\r\nimport EditTimetableModal from '../components/EditTimetableModal';\r\nimport AddModal from '../components/AddModal';\r\n// Removed: import { updateTimetableEntry } from '../utils/appFunctions'; // This function is passed as a prop now\r\n\r\n/**\r\n * Helper function to get a 'YYYY-MM-DD' formatted string from a Date object,\r\n * based on the user's local time zone. This prevents UTC conversion issues.\r\n * @param {Date} date - The date object to format.\r\n * @returns {string} The formatted date string.\r\n */\r\nconst getLocalDateString = (date) => {\r\n    const year = date.getFullYear();\r\n    const month = (date.getMonth() + 1).toString().padStart(2, '0');\r\n    const day = date.getDate().toString().padStart(2, '0');\r\n    return `${year}-${month}-${day}`;\r\n};\r\n\r\n// TimetablePage now receives updateTimetableEntry, showNotification, and userId as props from App.js\r\nconst TimetablePage = React.memo(({ timetableEntries, addTimetableEntry, deleteTimetableEntry, onCheck, showNotification, userId, updateTimetableEntry }) => {\r\n    const [timetableEditMode, setTimetableEditMode] = useState(false);\r\n    const [isAddModalOpen, setIsAddModalOpen] = useState(false);\r\n    const [isEditModalOpen, setIsEditModalFromState] = useState(false); // Renamed to avoid confusion\r\n    const [currentEventToEdit, setCurrentEventToEdit] = useState(null);\r\n\r\n    const [selectedDisplayDate, setSelectedDisplayDate] = useState(getLocalDateString(new Date()));\r\n\r\n    // Helper to control modal state consistently\r\n    const setIsEditModalOpen = useCallback((isOpen) => {\r\n        setIsEditModalFromState(isOpen);\r\n        if (!isOpen) {\r\n            setCurrentEventToEdit(null); // Clear event data when modal closes\r\n        }\r\n    }, []);\r\n\r\n    const handleSaveEvent = (data) => {\r\n        addTimetableEntry(data.subject, data.topic, data.date, data.time);\r\n    };\r\n\r\n    const handleEditEvent = useCallback((eventId) => {\r\n        const eventToEdit = timetableEntries.find(event => event.id === eventId);\r\n        if (eventToEdit) {\r\n            setCurrentEventToEdit(eventToEdit);\r\n            setIsEditModalOpen(true);\r\n        }\r\n    }, [timetableEntries, setIsEditModalOpen]);\r\n\r\n    // This handleUpdateEvent now correctly calls the updateTimetableEntry prop from App.js\r\n    // which already has userId and showNotification in its closure.\r\n    const handleUpdateEvent = useCallback(async (eventId, subject, topic, date, time) => {\r\n        // The updateTimetableEntry prop from App.js already handles userId and showNotification\r\n        await updateTimetableEntry(eventId, subject, topic, date, time);\r\n        setIsEditModalOpen(false); // Close modal using the consistent helper\r\n    }, [updateTimetableEntry, setIsEditModalOpen]); // updateTimetableEntry is now a dependency\r\n\r\n    const memoizedSelectedDateObject = useMemo(() => {\r\n        const date = new Date(selectedDisplayDate);\r\n        const userTimezoneOffset = date.getTimezoneOffset() * 60000;\r\n        return new Date(date.getTime() + userTimezoneOffset);\r\n    }, [selectedDisplayDate]);\r\n\r\n    const eventsForSelectedDate = useMemo(() => {\r\n        return [...timetableEntries]\r\n            .filter(entry => entry.date === selectedDisplayDate)\r\n            .sort((a, b) => {\r\n                const timeComparison = a.time.localeCompare(b.time);\r\n                if (timeComparison !== 0) {\r\n                    return timeComparison;\r\n                }\r\n                return (a.checked === b.checked) ? 0 : a.checked ? 1 : -1;\r\n            });\r\n    }, [timetableEntries, selectedDisplayDate]);\r\n\r\n    const addModalFields = useMemo(() => [\r\n        { name: 'subject', label: 'Subject', placeholder: 'e.g., Anatomy', required: true },\r\n        { name: 'topic', label: 'Topic', placeholder: 'e.g., Cardiovascular System', required: true },\r\n        { name: 'date', label: 'Date', type: 'date', required: true, defaultValue: selectedDisplayDate },\r\n        { name: 'time', label: 'Time', type: 'time', required: true, defaultValue: '09:00' }\r\n    ], [selectedDisplayDate]);\r\n\r\n    const handleSelectCalendarDate = useCallback((date) => {\r\n        setSelectedDisplayDate(getLocalDateString(date));\r\n    }, []);\r\n\r\n    const handlePrevDay = useCallback(() => {\r\n        const newDate = new Date(memoizedSelectedDateObject);\r\n        newDate.setDate(newDate.getDate() - 1);\r\n        handleSelectCalendarDate(newDate);\r\n    }, [memoizedSelectedDateObject, handleSelectCalendarDate]);\r\n\r\n    const handleNextDay = useCallback(() => {\r\n        const newDate = new Date(memoizedSelectedDateObject);\r\n        newDate.setDate(newDate.getDate() + 1);\r\n        handleSelectCalendarDate(newDate);\r\n    }, [memoizedSelectedDateObject, handleSelectCalendarDate]);\r\n\r\n    return (\r\n        <>\r\n            <div id=\"page-timetable\" className=\"page px-6 py-8\">\r\n                <header className=\"flex items-center justify-between mb-2\">\r\n                    <h1 className=\"text-3xl font-bold text-gray-900\">Timetable</h1>\r\n                        <button\r\n                        onClick={() => setTimetableEditMode(!timetableEditMode)}\r\n                        className=\"text-blue-600 hover:text-blue-800 text-sm font-medium flex items-center\"\r\n                        aria-label={timetableEditMode ? 'Done editing timetable' : 'Edit timetable'}\r\n                        >\r\n                        <svg\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                        width=\"16\"\r\n                        height=\"16\"\r\n                        viewBox=\"0 0 24 24\"\r\n                        fill=\"none\"\r\n                        stroke=\"currentColor\"\r\n                        strokeWidth=\"2\"\r\n                        strokeLinecap=\"round\"\r\n                        strokeLinejoin=\"round\"\r\n                        className=\"mr-1\"  // <-- this adds margin-right (adjust as needed)\r\n                        >\r\n                        <path d=\"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\"></path>\r\n                        <path d=\"M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z\"></path>\r\n                        </svg>\r\n                        {timetableEditMode ? 'Done' : 'Edit'}\r\n                        </button>\r\n\r\n                </header>\r\n                <p className=\"text-gray-500 mb-2\">Upcoming Study Schedule</p>\r\n\r\n                <div className=\"flex items-center justify-between px-0 py-6 text-gray-700 font-semibold text-lg\">\r\n                    <button onClick={handlePrevDay} className=\"p-2 rounded-full hover:bg-gray-100 transition-colors duration-200\" aria-label=\"Previous day\">\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><polyline points=\"15 18 9 12 15 6\"></polyline></svg>\r\n                    </button>\r\n                    <span className=\"flex-grow text-center text-lg sm:text-base\">\r\n                        {memoizedSelectedDateObject.toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })}\r\n                    </span>\r\n                    <button onClick={handleNextDay} className=\"p-2 rounded-full hover:bg-gray-100 transition-colors duration-200\" aria-label=\"Next day\">\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><polyline points=\"9 18 15 12 9 6\"></polyline></svg>\r\n                    </button>\r\n                </div>\r\n\r\n                <div id=\"timetable-events-list\" className=\"space-y-4 bg-white rounded-lg min-h-[100px] shadow-sm\">\r\n                    {eventsForSelectedDate.length === 0 ? (\r\n                        <p className=\"text-gray-500 text-center py-4\">No events scheduled for this date.</p>\r\n                    ) : (\r\n                        eventsForSelectedDate.map(event => (\r\n                            <TimetableEventCard\r\n                                key={event.id}\r\n                                event={event}\r\n                                isEditMode={timetableEditMode}\r\n                                onDelete={deleteTimetableEntry}\r\n                                onCheck={onCheck}\r\n                                onEdit={handleEditEvent}\r\n                            />\r\n                        ))\r\n                    )}\r\n                </div>\r\n\r\n                <button\r\n                    onClick={() => setIsAddModalOpen(true)}\r\n                    className=\"w-full bg-blue-50 text-blue-700 font-semibold mt-6 py-2 px-4 rounded-lg flex items-center justify-center hover:bg-blue-100 transition duration-300 mb-6\"\r\n                >\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" className=\"mr-2\"><line x1=\"12\" y1=\"5\" x2=\"12\" y2=\"19\"></line><line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\"></line></svg>\r\n                    Add New Study Event\r\n                </button>\r\n            </div>\r\n\r\n            <AddModal\r\n                isOpen={isAddModalOpen}\r\n                onClose={() => setIsAddModalOpen(false)}\r\n                onSave={handleSaveEvent}\r\n                title=\"Add New Study Event\"\r\n                fields={addModalFields}\r\n                showNotification={showNotification}\r\n            />\r\n\r\n            {/* Pass showNotification prop to EditTimetableModal */}\r\n            <EditTimetableModal\r\n                isOpen={isEditModalOpen}\r\n                onClose={() => setIsEditModalOpen(false)}\r\n                eventData={currentEventToEdit}\r\n                onUpdateEvent={handleUpdateEvent}\r\n                showNotification={showNotification} // <-- This line ensures showNotification is passed\r\n            />\r\n        </>\r\n    );\r\n});\r\n\r\nexport default TimetablePage;","// src/components/AddModal.js\r\nimport React, { useState, useEffect } from 'react';\r\n\r\n// By defining the default object outside the component, we ensure it's a stable reference.\r\n// This prevents the useEffect hook from re-running unnecessarily.\r\nconst EMPTY_INITIAL_STATE = {};\r\n\r\nconst AddModal = ({ isOpen, onClose, onSave, title, fields, initialState = EMPTY_INITIAL_STATE, showNotification }) => {\r\n    const [formData, setFormData] = useState({});\r\n\r\n    useEffect(() => {\r\n        // This effect now correctly runs only when the modal is opened,\r\n        // or if the `fields` or `initialState` props genuinely change.\r\n        // Previously, a new `initialState` object was created on every render,\r\n        // causing this effect to fire on every keystroke and reset the form data.\r\n        if (isOpen) {\r\n            const initialData = fields.reduce((acc, field) => {\r\n                acc[field.name] = initialState[field.name] || field.defaultValue || '';\r\n                return acc;\r\n            }, {});\r\n            setFormData(initialData);\r\n        } else {\r\n            // Reset formData when the modal closes to ensure a clean state for next time.\r\n            setFormData({});\r\n        }\r\n    }, [isOpen, fields, initialState]);\r\n\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setFormData(prev => ({ ...prev, [name]: value }));\r\n    };\r\n\r\n    const handleSaveClick = () => {\r\n        // Basic validation to ensure required fields are filled.\r\n        for (const field of fields) {\r\n            if (field.required && !formData[field.name]) {\r\n                if (showNotification) {\r\n                    showNotification(`${field.label} is required.`, 'error');\r\n                } else {\r\n                    console.error(`${field.label} is required.`);\r\n                }\r\n                return;\r\n            }\r\n        }\r\n        onSave(formData);\r\n        onClose(); // Close modal after saving\r\n    };\r\n\r\n    if (!isOpen) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\">\r\n            <div className=\"bg-white rounded-lg shadow-xl p-6 w-full max-w-md mx-auto relative transform transition-all scale-100 opacity-100\">\r\n                <h2 className=\"text-2xl font-bold mb-4 text-gray-800\">{title}</h2>\r\n                <div className=\"space-y-4\">\r\n                    {fields.map(field => (\r\n                        <div key={field.name} className=\"flex flex-col\">\r\n                            <label htmlFor={field.name} className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                                {field.label}{field.required && <span className=\"text-red-500\">*</span>}\r\n                            </label>\r\n                            {field.type === 'textarea' ? (\r\n                                <textarea\r\n                                    id={field.name}\r\n                                    name={field.name}\r\n                                    placeholder={field.placeholder || ''}\r\n                                    value={formData[field.name] || ''}\r\n                                    onChange={handleChange}\r\n                                    // The `disabled` property is correctly read from the field config.\r\n                                    // Since `addModalFields` doesn't set it, this will be undefined, and the input will be enabled.\r\n                                    disabled={field.disabled || false}\r\n                                    rows=\"3\"\r\n                                    className=\"w-full px-4 py-2 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-50 disabled:bg-gray-200\"\r\n                                />\r\n                            ) : field.type === 'select' ? (\r\n                                <select\r\n                                    id={field.name}\r\n                                    name={field.name}\r\n                                    value={formData[field.name] || ''}\r\n                                    onChange={handleChange}\r\n                                    disabled={field.disabled || false}\r\n                                    className=\"w-full px-4 py-2 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-50 disabled:bg-gray-200\"\r\n                                >\r\n                                    {field.options && field.options.map(option => (\r\n                                        <option key={option.value} value={option.value}>\r\n                                            {option.label}\r\n                                        </option>\r\n                                    ))}\r\n                                </select>\r\n                            ) : (\r\n                                <input\r\n                                    type={field.type || 'text'}\r\n                                    id={field.name}\r\n                                    name={field.name}\r\n                                    placeholder={field.placeholder || ''}\r\n                                    value={formData[field.name] || ''}\r\n                                    onChange={handleChange}\r\n                                    disabled={field.disabled || false}\r\n                                    className=\"w-full px-4 py-2 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-50 disabled:bg-gray-200\"\r\n                                />\r\n                            )}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                <div className=\"mt-6 flex justify-end space-x-3\">\r\n                     <button\r\n                        onClick={onClose}\r\n                        className=\"px-4 py-2 bg-gray-200 text-gray-700 font-bold rounded-lg hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-400 transition duration-300\"\r\n                    >\r\n                        Cancel\r\n                    </button>\r\n                    <button\r\n                        onClick={handleSaveClick}\r\n                        className=\"px-4 py-2 bg-blue-600 text-white font-bold rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition duration-300\"\r\n                    >\r\n                        Save\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AddModal;"],"names":["React","_ref","event","isEditMode","onDelete","onCheck","onEdit","status","getEventStatus","eventDate","eventTime","isChecked","text","colorClass","now","Date","concat","date","time","checked","_jsxs","className","children","_jsx","subject","topic","_Fragment","onClick","id","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","x1","y1","x2","y2","isOpen","onClose","eventData","onUpdateEvent","showNotification","setSubject","useState","setTopic","setDate","setTime","useEffect","htmlFor","type","placeholder","value","onChange","e","target","async","getLocalDateString","year","getFullYear","month","getMonth","toString","padStart","day","getDate","timetableEntries","addTimetableEntry","deleteTimetableEntry","userId","updateTimetableEntry","timetableEditMode","setTimetableEditMode","isAddModalOpen","setIsAddModalOpen","isEditModalOpen","setIsEditModalFromState","currentEventToEdit","setCurrentEventToEdit","selectedDisplayDate","setSelectedDisplayDate","setIsEditModalOpen","useCallback","handleEditEvent","eventId","eventToEdit","find","handleUpdateEvent","memoizedSelectedDateObject","useMemo","userTimezoneOffset","getTimezoneOffset","getTime","eventsForSelectedDate","filter","entry","sort","a","b","timeComparison","localeCompare","addModalFields","name","label","required","defaultValue","handleSelectCalendarDate","handlePrevDay","newDate","handleNextDay","points","toLocaleDateString","weekday","length","map","TimetableEventCard","AddModal","onSave","data","title","fields","EditTimetableModal","EMPTY_INITIAL_STATE","initialState","formData","setFormData","initialData","reduce","acc","field","handleChange","prev","_objectSpread","disabled","rows","options","option","handleSaveClick","console","error"],"sourceRoot":""}