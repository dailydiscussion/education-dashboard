{"version":3,"file":"static/js/990.cda89e35.chunk.js","mappings":"2MAGA,MAyCA,EAzCiBA,EAAAA,KAAWC,IAAmB,IAAlB,SAAEC,GAAUD,EACrC,MAAOE,EAAcC,IAAmBC,EAAAA,EAAAA,UAAS,KAC1CC,EAAeC,IAAoBF,EAAAA,EAAAA,UAAS,IA8BnD,OA5BAG,EAAAA,EAAAA,WAAU,KACN,MAAMC,EAAiBA,KACnB,MAAMC,GAAO,IAAIC,MAAOC,WACxB,IAAIC,EAAO,GACPC,EAAQ,GAERJ,GAAQ,GAAKA,EAAO,IACpBG,EAAO,eACPC,EAAQ,gBACDJ,GAAQ,IAAMA,EAAO,IAC5BG,EAAO,iBACPC,EAAQ,gBACDJ,GAAQ,IAAMA,EAAO,IAC5BG,EAAO,eACPC,EAAQ,iBAERD,EAAO,gBACPC,EAAQ,gBAEZV,EAAgBS,GAChBN,EAAiBO,IAGrBL,IACA,MAAMM,EAAaC,YAAYP,EAAgB,KAC/C,MAAO,IAAMQ,cAAcF,IAC5B,KAGCG,EAAAA,EAAAA,KAAA,OAAAC,UACIC,EAAAA,EAAAA,MAAA,KAAGC,UAAU,uDAAsDF,SAAA,CAC9DhB,GAAae,EAAAA,EAAAA,KAAA,QAAMG,UAAU,iBAAgBF,SAAEb,W,yGCgIhE,EA/JsBN,EAAAA,KAAWC,IAA8C,IAA7C,KAAEqB,EAAI,oBAAEC,GAA+BtB,GAAFuB,EAAAA,EAAAA,GAAAvB,EAAAwB,GACnE,MAAMC,GAAWC,EAAAA,EAAAA,MACX,WACFC,EAAU,UACVC,EAAS,WACTC,EAAU,UACVC,EAAS,WACTC,EAAU,WACVC,IACAC,EAAAA,EAAAA,IAAY,CAAEC,GAAIb,EAAKa,KAErBC,EAAQ,CACVL,UAAWM,EAAAA,GAAIC,UAAUC,SAASR,GAClCC,WAAYA,GAAc,gDAC1BQ,WAAY,YACZC,QAASR,EAAa,GAAM,EAC5BS,WAAYT,EAAa,eAAYU,GAiCnCC,GAHctB,EAAKuB,WAVHC,KAClB,IAAKA,EAAS,MAAO,UACrB,IAAIC,EAAO,EACX,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAQG,OAAQD,IAChCD,EAAOD,EAAQI,WAAWF,KAAOD,GAAQ,GAAKA,GAEvC,OAAAI,OAAUJ,EAAO,IAAG,gBAIcK,CAAa9B,EAAKwB,SAGlD,iHAAAK,OAEX7B,EAAKuB,UAAY,eAAiB,aAAY,0CAG9CQ,EAAY,sDAAAF,OAEZ7B,EAAKuB,UAAY,6BAA+B,GAAE,UAUxD,OACI3B,EAAAA,EAAAA,KAACoC,EAAAA,EAAOC,IAAG,CACPC,IAAK1B,EACLM,MAAOA,EACPf,UAAWuB,EAAYa,QAAQ,aAAc,IAC7CC,SAXa,CACjBC,QAAS,CAAElB,QAAS,EAAGmB,MAAO,IAAMC,EAAG,IACvCC,QAAS,CAAErB,QAAS,EAAGmB,MAAO,EAAGC,EAAG,GACpCE,KAAM,CAAEtB,QAAS,EAAGmB,MAAO,IAAMI,EAAG,GAAIhC,WAAY,CAAEiC,SAAU,OAS5DN,QAAQ,UACRG,QAAQ,UACRC,KAAK,OAAM5C,UAEXC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,2BAA0BF,SAAA,EAErCD,EAAAA,EAAAA,KAAA,OAAKG,UAAU,sDAAqDF,UAChED,EAAAA,EAAAA,KAACoC,EAAAA,EAAOY,OAAM,CACVC,QA5DSC,IACzBA,EAAEC,kBACF3C,EAAS4C,qBAAqBhD,EAAKwB,QAASxB,EAAKiD,OAAQjD,EAAKuB,YA2D9CxB,UAAS,iCAAA8B,OAAmC7B,EAAKuB,UAAY,gCAAkC,wCAAuC,kFACtI,aAAYvB,EAAKuB,UAAY,qBAAuB,mBACpD2B,SAAU,CAAEZ,MAAO,IACnBE,QAAS,CAAEF,MAAOtC,EAAKuB,UAAY,KAAO,EAAG4B,gBAAiBnD,EAAKuB,UAAY,UAAY,OAAQ6B,YAAapD,EAAKuB,UAAY,UAAY,WAC7Ib,WAAY,CAAE2C,KAAM,SAAUC,UAAW,IAAKC,QAAS,IAAK1D,SAE3DG,EAAKuB,YACF3B,EAAAA,EAAAA,KAAA,OAAK4D,MAAM,6BAA6BzD,UAAU,qBAAqB0D,KAAK,OAAOC,QAAQ,YAAYC,OAAO,eAAc9D,UACxHD,EAAAA,EAAAA,KAAA,QAAMgE,cAAc,QAAQC,eAAe,QAAQC,YAAa,EAAGC,EAAE,yBAOpF/D,EAAKgE,MACFlE,EAAAA,EAAAA,MAAA,KACImE,KAAMjE,EAAKgE,KACXE,OAAO,SACPC,IAAI,sBACJpE,UAAU,uDACVqE,SAAU,EACV,8BAAAvC,OAA6B7B,EAAKiD,OAClCnC,MAAO,CAAEuD,eAAgB,QAASxE,SAAA,EAElCD,EAAAA,EAAAA,KAAA,MAAIG,UAAWgC,EAAckB,MAAOjD,EAAKiD,MAAMpD,SAAEG,EAAKiD,SACtDrD,EAAAA,EAAAA,KAAA,KAAGG,UAAU,iCAAgCF,SAAEG,EAAKwB,WACpD5B,EAAAA,EAAAA,KAAA,OAAKG,UAAU,2CAA0CF,SACpDG,EAAKsE,KAAO,IACTxE,EAAAA,EAAAA,MAAA,QAAMC,UAAU,kCAAiCF,SAAA,CAC5CG,EAAKsE,KAAK,iBAM3BxE,EAAAA,EAAAA,MAAA,OAAKC,UAAU,8BAA6BF,SAAA,EACxCD,EAAAA,EAAAA,KAAA,MAAIG,UAAWgC,EAAckB,MAAOjD,EAAKiD,MAAMpD,SAAEG,EAAKiD,SACtDrD,EAAAA,EAAAA,KAAA,KAAGG,UAAU,iCAAgCF,SAAEG,EAAKwB,WACpD5B,EAAAA,EAAAA,KAAA,OAAKG,UAAU,2CAA0CF,SACpDG,EAAKsE,KAAO,IACTxE,EAAAA,EAAAA,MAAA,QAAMC,UAAU,kCAAiCF,SAAA,CAC5CG,EAAKsE,KAAK,iBAQ/B1E,EAAAA,EAAAA,KAAA,OAAKG,UAAU,0DAAyDF,UACpED,EAAAA,EAAAA,KAAA,UACIG,UAAU,wEACV8C,QA7GOC,IACvBA,EAAEC,kBACF3C,EAASmE,gBAAgBvE,EAAKa,KA4Gd,aAAW,oBAAmBhB,UAE9BC,EAAAA,EAAAA,MAAA,OAAK0D,MAAM,6BAA6BgB,MAAM,KAAKC,OAAO,KAAKf,QAAQ,YAAYD,KAAK,OAAOE,OAAO,eAAeG,YAAY,IAAIF,cAAc,QAAQC,eAAe,QAAOhE,SAAA,EAACD,EAAAA,EAAAA,KAAA,QAAM8E,GAAG,KAAKC,GAAG,IAAIC,GAAG,IAAIC,GAAG,QAAYjF,EAAAA,EAAAA,KAAA,QAAM8E,GAAG,IAAIC,GAAG,IAAIC,GAAG,KAAKC,GAAG,eAIpQjF,EAAAA,EAAAA,KAAA,QAAAkF,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACQxE,GACAC,GAAS,IACbR,UAAU,6EACVe,MAAO,CAAEiE,OAAQ,OAAQP,MAAO,GAAIC,OAAQ,GAAIO,YAAa,OAAQ5D,WAAY,QACjF,aAAW,kBACXgD,SAAU,EAAEvE,UAGZD,EAAAA,EAAAA,KAAA,OAAK4E,MAAM,KAAKC,OAAO,KAAKf,QAAQ,YAAYF,MAAM,6BAA6BC,KAAK,UAAS5D,UAC7FD,EAAAA,EAAAA,KAAA,QAAMmE,EAAE,+I,aC3JhC,MAwBA,EAxB4BrF,EAAAA,KAAWC,IAAqB,IAApB,WAAEsG,GAAYtG,EAClD,MACMuG,EAAgB,EAAIC,KAAKC,GADhB,QAETC,EAASH,EAAiBD,EAAa,IAAOC,EAEpD,OACIpF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,qBAAoBF,SAAA,EAC/BC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAgB2D,QAAQ,YAAW7D,SAAA,EAC9CD,EAAAA,EAAAA,KAAA,QAAMG,UAAU,iBAAiBgE,EAAE,gFAAgFN,KAAK,OAAOK,YAAY,IAAIH,OAAO,kBACtJ/D,EAAAA,EAAAA,KAAA,QACIG,UAAU,uCACVgE,EAAE,gFACFN,KAAK,OACLK,YAAY,IACZF,cAAc,QACdD,OAAO,eACP7C,MAAO,CAAEwE,gBAAgB,GAADzD,OAAKqD,EAAa,KAAArD,OAAIqD,GAAiBK,iBAAkBF,SAGzFvF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,+FAA8FF,SAAA,CAAEsF,KAAKK,MAAMP,GAAY,YChB5IQ,EAAS9G,IAAmD,IAAlD,IAAE+G,EAAG,QAAEC,EAAO,UAAEpE,EAAS,OAAEqE,EAAM,QAAEC,GAASlH,EACxD,MAAMmH,EAAkBH,EAAU,EAAKpE,EAAYoE,EAAW,IAAM,EAC9DI,EAAeJ,EAAU,EAAKC,EAASD,EAAW,IAAM,EAE9D,OACI7F,EAAAA,EAAAA,MAAA,OAAKC,UAAU,uCAAsCF,SAAA,EACjDC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,WAAUF,SAAA,EACrBC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,wJAAuJF,SAAA,CACjK0B,EAAU,IAAEoE,EAAQ,UAAQC,EAAO,cAGxC9F,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oFAAmFF,SAAA,EAE9FD,EAAAA,EAAAA,KAAA,OACIG,UAAU,yCACVe,MAAO,CAAE2D,OAAO,GAAD5C,OAAKkE,EAAY,SAGpCnG,EAAAA,EAAAA,KAAA,OACIG,UAAU,0CACVe,MAAO,CAAE2D,OAAO,GAAD5C,OAAKiE,EAAe,eAK/ClG,EAAAA,EAAAA,KAAA,KAAGG,UAAS,yBAAA8B,OAA2BgE,EAAU,gBAAkB,iBAAkBhG,SAChF6F,QAsDjB,EA7C0BhH,EAAAA,KAAWsH,IAAqB,IAApB,WAAEC,GAAYD,EAChD,MAAME,EAAiBD,EAAWE,OAAO,CAACC,EAAKV,IAAQU,EAAMV,EAAInE,UAAW,GACtE8E,EAAcJ,EAAWE,OAAO,CAACC,EAAKV,IAAQU,EAAMV,EAAIE,OAAQ,GAEtE,OACI9F,EAAAA,EAAAA,MAAA,OAAKC,UAAU,2BAA0BF,SAAA,EACrCC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,wCAAuCF,SAAA,EAClDC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACID,EAAAA,EAAAA,KAAA,MAAIG,UAAU,wBAAuBF,SAAC,aACtCC,EAAAA,EAAAA,MAAA,KAAGC,UAAU,mCAAkCF,SAAA,CAAEqG,EAAe,KAACtG,EAAAA,EAAAA,KAAA,QAAMG,UAAU,oCAAmCF,SAAC,kBACrHC,EAAAA,EAAAA,MAAA,KAAGC,UAAU,iCAAgCF,SAAA,CAAEwG,EAAY,KAACzG,EAAAA,EAAAA,KAAA,QAAMG,UAAU,cAAaF,SAAC,kBAG9FC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,4CAA2CF,SAAA,EACtDC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oBAAmBF,SAAA,EAC9BD,EAAAA,EAAAA,KAAA,QAAMG,UAAU,2CAChBH,EAAAA,EAAAA,KAAA,QAAAC,SAAM,gBAEVC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oBAAmBF,SAAA,EAC9BD,EAAAA,EAAAA,KAAA,QAAMG,UAAU,2CAChBH,EAAAA,EAAAA,KAAA,QAAAC,SAAM,kBAEVC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oBAAmBF,SAAA,EAC9BD,EAAAA,EAAAA,KAAA,QAAMG,UAAU,0CAChBH,EAAAA,EAAAA,KAAA,QAAAC,SAAM,qBAKlBD,EAAAA,EAAAA,KAAA,OAAKG,UAAU,sBAAqBF,SAC/BoG,EAAWK,IAAIC,IACZ3G,EAAAA,EAAAA,KAAC6F,EAAM,CAEHC,IAAKa,EAAKb,IACVC,QAASY,EAAKZ,QACdpE,UAAWgF,EAAKhF,UAChBqE,OAAQW,EAAKX,OACbC,QAASU,EAAKV,SALTU,EAAKb,aCalC,EAlF0B/G,IAA2C,IAA1C,KAAE6H,EAAI,QAAEhF,EAAO,QAAEiF,EAAO,SAAEC,GAAU/H,EAC3D,MAAMyB,GAAWC,EAAAA,EAAAA,KAsBXiB,EAAW,0GAAAO,OAEX2E,EAAKjF,UACD,+BACA,2CAA0C,UAI9CQ,EAAY,oCAAAF,OAEZ2E,EAAKjF,UACD,6BACA,gBAAe,UAInBoF,EAAc,8BAAA9E,OAEd2E,EAAKjF,UACD,gBACA,gBAAe,UAIzB,OACIzB,EAAAA,EAAAA,MAAA,OAAKe,GAAE,kBAAAgB,OAAoB2E,EAAK3F,IAAMd,UAAWuB,EAAYzB,SAAA,EACzDC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mCAAkCF,SAAA,EAC7CD,EAAAA,EAAAA,KAAA,UACIiD,QAjCaC,IACzBA,EAAEC,kBACF3C,EAAS4C,qBAAqBxB,EAASgF,EAAKvD,OAAQuD,EAAKjF,YAgC7CxB,UAAS,+BAAA8B,OAAiC2E,EAAKjF,UAAY,gCAAkC,kBAAiB,0EAC9G,aAAYiF,EAAKjF,UAAY,qBAAuB,mBAAmB1B,SAEtE2G,EAAKjF,YACF3B,EAAAA,EAAAA,KAAA,OAAK4D,MAAM,6BAA6BzD,UAAU,qBAAqB0D,KAAK,OAAOC,QAAQ,YAAYC,OAAO,eAAc9D,UACxHD,EAAAA,EAAAA,KAAA,QAAMgE,cAAc,QAAQC,eAAe,QAAQC,YAAa,EAAGC,EAAE,wBAIjFjE,EAAAA,EAAAA,MAAA,OAAKC,UAAU,WAAUF,SAAA,EACrBD,EAAAA,EAAAA,KAAA,MAAIG,UAAWgC,EAAalC,SAAE2G,EAAKvD,SACnCrD,EAAAA,EAAAA,KAAA,KAAGG,UAAW4G,EAAe9G,SAAE2B,WAIvC5B,EAAAA,EAAAA,KAAA,UACIiD,QAAS4D,EA5DM3D,IACvBA,EAAEC,kBACE2D,EACAA,EAASF,GAETpG,EAASmE,gBAAgBiC,EAAK3F,KAVdiC,IACpBA,EAAEC,kBACF3C,EAASwG,aAAaJ,EAAMhF,IAgEpBzB,UAAS,kHAAA8B,OACH4E,EACI,2CACA,+CAET5G,SAEA4G,EAAU,SAAW,YC4CtC,EAvHuB9H,IAAgH,IAA/G,OAAEkI,EAAM,QAAEC,EAAO,SAAEC,EAAQ,gBAAEC,EAAe,aAAEJ,EAAY,gBAAErC,EAAe,2BAAE0C,GAA4BtI,EAC7H,MAAOuI,EAAaC,IAAkBpI,EAAAA,EAAAA,UAAS,KACxCqI,EAA0BC,IAA+BtI,EAAAA,EAAAA,UAAS,KAGzEG,EAAAA,EAAAA,WAAU,KACF2H,IACAM,EAAe,IACfE,EAA4B,MAEjC,CAACR,IAGJ,MAAMS,GAAWC,EAAAA,EAAAA,SAAQ,IACdC,OAAOC,KAAKV,GAAUW,QAAQlG,GACjCuF,EAASvF,GAAS8E,IAAIE,IAAI1B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAU0B,GAAI,IAAEhF,UAASX,GAAG,GAADgB,OAAKL,EAAO,KAAAK,OAAI2E,EAAKvD,WAE/E,CAAC8D,IAGEY,GAAmBJ,EAAAA,EAAAA,SAAQ,IACtBD,EAASM,OAAOpB,IACnB,MAAMqB,EAA8C,KAA7BT,GAAmCZ,EAAKhF,UAAY4F,EACrEU,EAAgBtB,EAAKvD,MAAM8E,cAAcC,SAASd,EAAYa,gBAChEvB,EAAKhF,QAAQuG,cAAcC,SAASd,EAAYa,eACpD,OAAOF,GAAkBC,IAE9B,CAACR,EAAUF,EAA0BF,IAElCe,EAAWT,OAAOC,KAAKV,GAE7B,OACInH,EAAAA,EAAAA,KAACsI,EAAAA,EAAe,CAAArI,SACXgH,IACGjH,EAAAA,EAAAA,KAACoC,EAAAA,EAAOC,IAAG,CACPlC,UAAU,oFACVsC,QAAS,CAAElB,QAAS,GACpBqB,QAAS,CAAErB,QAAS,GACpBsB,KAAM,CAAEtB,QAAS,GACjBT,WAAY,CAAEiC,SAAU,KACxBE,QAASiE,EAASjH,UAElBC,EAAAA,EAAAA,MAAA,OACI+C,QAAUC,GAAMA,EAAEC,kBAClBhD,UAAU,oFACVe,MAAO,CAACqH,UAAW,QAAQtI,SAAA,EAE3BC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,uEAAsEF,SAAA,EACjFD,EAAAA,EAAAA,KAAA,MAAIG,UAAU,mCAAkCF,SAAC,0BACjDD,EAAAA,EAAAA,KAAA,UACIiD,QAASiE,EACT/G,UAAU,qEACV,aAAW,cAAaF,UAExBC,EAAAA,EAAAA,MAAA,OAAK0D,MAAM,6BAA6BgB,MAAM,KAAKC,OAAO,KAAKf,QAAQ,YAAYD,KAAK,OAAOE,OAAO,eAAeG,YAAY,IAAIF,cAAc,QAAQC,eAAe,QAAOhE,SAAA,EAACD,EAAAA,EAAAA,KAAA,QAAM8E,GAAG,KAAKC,GAAG,IAAIC,GAAG,IAAIC,GAAG,QAAYjF,EAAAA,EAAAA,KAAA,QAAM8E,GAAG,IAAIC,GAAG,IAAIC,GAAG,KAAKC,GAAG,gBAIpQ/E,EAAAA,EAAAA,MAAA,OAAKC,UAAU,OAAMF,SAAA,EACjBD,EAAAA,EAAAA,KAAA,SAAOwI,QAAQ,2BAA2BrI,UAAU,+CAA8CF,SAAC,wBACnGC,EAAAA,EAAAA,MAAA,UACIe,GAAG,2BACHd,UAAU,oHACVsI,MAAOjB,EACPkB,SAAWxF,GAAMuE,EAA4BvE,EAAEoB,OAAOmE,OAAOxI,SAAA,EAE7DD,EAAAA,EAAAA,KAAA,UAAQyI,MAAM,GAAExI,SAAC,iBAChBoI,EAAS3B,IAAI9E,IACV5B,EAAAA,EAAAA,KAAA,UAAsByI,MAAO7G,EAAQ3B,SAAE2B,GAA1BA,WAKzB5B,EAAAA,EAAAA,KAAA,OAAKG,UAAU,OAAMF,UACjBD,EAAAA,EAAAA,KAAA,SACIyD,KAAK,OACLkF,YAAY,4BACZxI,UAAU,oHACVsI,MAAOnB,EACPoB,SAAWxF,GAAMqE,EAAerE,EAAEoB,OAAOmE,OACzC,aAAW,8BAInBzI,EAAAA,EAAAA,KAAA,OAAKiB,GAAG,uBAAuBd,UAAU,iDAAgDF,SACxD,IAA5B8H,EAAiBhG,QACd/B,EAAAA,EAAAA,KAAA,KAAGG,UAAU,iCAAgCF,SAAC,8CAE9C8H,EAAiBrB,IAAIE,IACjB,MAAMC,EAAUO,EAAgBwB,KAAKxI,GAAQA,EAAKa,KAAO2F,EAAK3F,IAAOb,EAAKwB,UAAYgF,EAAKhF,SAAWxB,EAAKiD,QAAUuD,EAAKvD,OAC1H,OACIrD,EAAAA,EAAAA,KAAC6I,EAAiB,CAEdjC,KAAMA,EACNhF,QAASgF,EAAKhF,QACdiF,QAASA,EACTiC,MAAO9B,EACPF,SAAUnC,EACV0C,2BAA4BA,GANvBT,EAAK3F,SAY7BjB,EAAAA,EAAAA,KAAA,OAAKG,UAAU,sDAAqDF,UACjED,EAAAA,EAAAA,KAAA,UACIiD,QAASiE,EACT/G,UAAU,0KAAyKF,SACtL,mB,aCrF7B,MA6TA,EA7TsBnB,EAAAA,KAAWC,IAQ1B,IAR2B,WAChCgK,EAAU,SACV/J,EAAQ,oBACRgK,EAAmB,wBACnBC,EAAuB,2BACvBC,EAA0B,0BAC1BC,EAAyB,qBACzBC,GACDrK,EACC,MAAMyB,GAAWC,EAAAA,EAAAA,MAEX,SAAE0G,IAAakC,EAAAA,EAAAA,MACf,iBAAEC,IAAqBC,EAAAA,EAAAA,MACvB,gBAAEnC,IAAoBoC,EAAAA,EAAAA,MAErBC,EAAsBC,IAA2BvK,EAAAA,EAAAA,WAAS,GAGzDkJ,GAAWV,EAAAA,EAAAA,SAAQ,IAAMC,OAAOC,KAAKV,GAAW,CAACA,IAGjDwC,GAAiBhC,EAAAA,EAAAA,SAAQ,IAC3BR,EAAS8B,GACH9B,EAAS8B,GAAyBjB,OAAOpB,GAAQA,EAAKjF,WAAWI,OACjE,EACP,CAACoF,EAAU8B,IAERW,GAAajC,EAAAA,EAAAA,SAAQ,IACvBR,EAAS8B,GACH9B,EAAS8B,GAAyBlH,OAClC,EACP,CAACoF,EAAU8B,IAGRY,GAAqBlC,EAAAA,EAAAA,SAAQ,KAC/B,MAAMmC,EAAe3C,EAAS8B,IAA4B,GACpDc,EAAaD,EAAa/H,OAC1BiI,EAAiBF,EAAa9B,OAAOpB,GAAQA,EAAKjF,WAAWI,OACnE,OAAOgI,EAAa,EAAKC,EAAiBD,EAAc,IAAM,GAC/D,CAAC5C,EAAU8B,IAGRgB,GAAiBtC,EAAAA,EAAAA,SAAQ,KAC3B,IAAK2B,EAAkB,MAAO,GAC9B,MAAMY,EAAO,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC5CC,EAAgB,GAChBC,EAAQ,IAAI3K,KACZ4K,EAAkBD,EAAME,mBAAmB,SAC3CC,EAAc,IAAI9K,KAAK2K,GAC7BG,EAAYC,SAAS,EAAG,EAAG,EAAG,GAC9BD,EAAYE,QAAQL,EAAMM,UAAYN,EAAMO,UAE5C,IAAK,IAAI7I,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,MAAM8I,EAAa,IAAInL,KAAK8K,GAC5BK,EAAWH,QAAQF,EAAYG,UAAY5I,GAC3C,MAAM+I,EAAaD,EAAWN,mBAAmB,SAC3CQ,EAAcxB,EAAiBtB,OAAO+C,GAASA,EAAMC,OAASH,GACpE,IAAIlJ,EAAY,EACZqE,EAAS,EACb,MAAMiF,EAAM,IAAIxL,KAChBqL,EAAYI,QAAQC,IAChB,GAAIA,EAAKC,QACLzJ,QACG,CACmB,IAAIlC,KAAK,GAADwC,OAAIkJ,EAAKH,KAAI,KAAA/I,OAAIkJ,EAAKE,OAChCJ,GAAKjF,GAC7B,IAEJmE,EAAcmB,KAAK,CAAExF,IAAKoE,EAAKU,EAAWD,UAAW5E,QAAS+E,EAAY/I,OAAQJ,YAAWqE,SAAQC,QAAS4E,IAAeR,GACjI,CACA,OAAOF,GACR,CAACb,IAYEiC,IATkB5D,EAAAA,EAAAA,SAAQ,KAC5B,MAAMyC,EAAQ,IAAI3K,KACZ+L,EAAOpB,EAAMqB,cACbC,GAAStB,EAAMuB,WAAa,GAAGtK,WAAWuK,SAAS,EAAG,KACtD9F,EAAMsE,EAAMM,UAAUrJ,WAAWuK,SAAS,EAAG,KACnD,MAAM,GAAN3J,OAAUuJ,EAAI,KAAAvJ,OAAIyJ,EAAK,KAAAzJ,OAAI6D,IAC5B,KAGsB6B,EAAAA,EAAAA,SAAQ,IACtBP,EAAgByE,KAAK,CAACC,EAAGC,KAAOD,EAAET,MAAQ,IAAIW,cAAcD,EAAEV,MAAQ,KAC9E,CAACjE,KAsBE6D,IAnBmBtD,EAAAA,EAAAA,SAAQ,KAC7B,MAAMsD,EAAM,IAAIxL,KAChB,IAAIwM,EAAU,KACd,IAAK,IAAInK,EAAI,EAAGA,EAAIyJ,EAAiBxJ,OAAQD,IAAK,CAC9C,MAAM1B,EAAOmL,EAAiBzJ,GAC9B,IAAK1B,EAAKiL,KAAM,SAChB,MAAO7L,EAAM0M,GAAU9L,EAAKiL,KAAKc,MAAM,KAAKzF,IAAI0F,QAEhD,GADkB,IAAI3M,KAAKwL,EAAIQ,cAAeR,EAAIU,WAAYV,EAAIP,UAAWlL,EAAM0M,IAClEjB,EACbgB,EAAU7L,OACP,IAAK6L,EAER,OAAO7L,CAEf,CACA,OAAO6L,GAAW,MACnB,CAACV,IAGQ,IAAI9L,MACV4M,EAAkB,IAAI/C,GAAkBuC,KAAK,CAACC,EAAGC,IACrC,IAAItM,KAAK,GAADwC,OAAI6J,EAAEd,KAAI,KAAA/I,OAAI6J,EAAET,OACxB,IAAI5L,KAAK,GAADwC,OAAI8J,EAAEf,KAAI,KAAA/I,OAAI8J,EAAEV,QAIpCiB,EAAYD,EAAgBE,KAAK,CAACC,EAAOC,EAAKC,KAChD,GAAIF,EAAMpB,QAAS,OAAO,EAC1B,MAAMuB,EAAa,IAAIlN,KAAK,GAADwC,OAAIuK,EAAMxB,KAAI,KAAA/I,OAAIuK,EAAMnB,OAC7CuB,EAAYF,EAAID,EAAM,GACtBI,EAAYD,EAAY,IAAInN,KAAK,GAADwC,OAAI2K,EAAU5B,KAAI,KAAA/I,OAAI2K,EAAUvB,OAAU,KAChF,OAAOJ,GAAO0B,KAAgBE,GAAa5B,EAAM4B,KAG/CC,EAAgBT,EAAgBE,KAAKC,IACvC,GAAIA,EAAMpB,QAAS,OAAO,EAC1B,MAAMuB,EAAa,IAAIlN,KAAK,GAADwC,OAAIuK,EAAMxB,KAAI,KAAA/I,OAAIuK,EAAMnB,OACnD,OAAOJ,EAAM0B,IAGXI,GAAUC,EAAAA,EAAAA,KACZC,EAAAA,EAAAA,IAAUC,EAAAA,GAAe,CAAEC,qBAAsB,CAAEC,SAAU,MAC7DH,EAAAA,EAAAA,IAAUI,EAAAA,GAAa,CAAEF,qBAAsB,CAAEG,MAAO,IAAKC,UAAW,MACxEN,EAAAA,EAAAA,IAAUO,EAAAA,KAaRC,GAAwBC,EAAAA,EAAAA,aAAazM,IACvCT,EAASmE,gBAAgB1D,IAC1B,CAACT,IAEE6G,GAA6BqG,EAAAA,EAAAA,aAAazM,IAC5CT,EAAS4C,qBAAqBnC,IAC/B,CAACT,IAEEmN,GAAqBD,EAAAA,EAAAA,aAAatN,IACpCI,EAASwG,aAAa5G,IACvB,CAACI,IAEEoN,GAAcF,EAAAA,EAAAA,aAAazM,IAC7BT,EAAS4C,qBAAqBnC,IAC/B,CAACT,IAEJ,OACIN,EAAAA,EAAAA,MAAA2N,EAAAA,SAAA,CAAA5N,SAAA,EACIC,EAAAA,EAAAA,MAAA,OAAKe,GAAG,iBAAiBd,UAAU,mCAAkCF,SAAA,EAEjEC,EAAAA,EAAAA,MAAA,OACIC,UAAU,6EACV8C,QAASA,IAAM8F,EAAW,WAAW9I,SAAA,EAErCD,EAAAA,EAAAA,KAAA,OAAK8N,IAAI,mDAAmDC,IAAI,cAAc5N,UAAU,4BACxFD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIC,EAAAA,EAAAA,MAAA,MAAIC,UAAU,yBAAwBF,SAAA,CAAC,UAAMD,EAAAA,EAAAA,KAAA,QAAMG,UAAU,0BAAyBF,SAAC,iBACvFD,EAAAA,EAAAA,KAACgO,EAAQ,CAAChP,SAAUA,GAAY,gBAKxCgB,EAAAA,EAAAA,KAAA,OAAKG,UAAU,OAAMF,UACnBD,EAAAA,EAAAA,KAAA,MAAIG,UAAU,4CAA2CF,SAAC,gCAE5DD,EAAAA,EAAAA,KAAA,OAAKG,UAAU,OAAMF,UACnBC,EAAAA,EAAAA,MAAA,OACEC,UAAU,uFACVe,MAAO,CAAE+M,wBAAyB,SAAUhO,SAAA,CAG3CqM,IACCtM,EAAAA,EAAAA,KAAA,OAAKG,UAAU,+GAA8GF,UAC3HC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACED,EAAAA,EAAAA,KAAA,OAAKG,UAAU,sCAAqCF,SAAEqM,EAAU1K,WAChE5B,EAAAA,EAAAA,KAAA,OAAKG,UAAU,0BAAyBF,SAAEqM,EAAU4B,SAEpDhO,EAAAA,EAAAA,MAAA,QAAMC,UAAU,+BAA8BF,SAAA,EAC5CD,EAAAA,EAAAA,KAAA,QAAMG,UAAU,0FAChBH,EAAAA,EAAAA,KAAA,QAAMG,UAAU,sCAAqCF,SAAC,iBAM7D6M,IACC9M,EAAAA,EAAAA,KAAA,OAAKG,UAAU,+GAA8GF,UAC3HC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACED,EAAAA,EAAAA,KAAA,OAAKG,UAAU,sCAAqCF,SAAE6M,EAAclL,WACpE5B,EAAAA,EAAAA,KAAA,OAAKG,UAAU,0BAAyBF,SAAE6M,EAAcoB,SAExDhO,EAAAA,EAAAA,MAAA,QAAMC,UAAU,+BAA8BF,SAAA,EAC5CD,EAAAA,EAAAA,KAAA,QAAMG,UAAU,4FAChBH,EAAAA,EAAAA,KAAA,QAAMG,UAAU,wCAAuCF,SAAC,2BAQpED,EAAAA,EAAAA,KAAA,UAAQG,UAAU,yCAAwCF,UACtDD,EAAAA,EAAAA,KAAA,MAAIG,UAAU,kCAAiCF,SAAC,0BAEpDD,EAAAA,EAAAA,KAAA,KAAGG,UAAU,qBAAoBF,SAAC,oCAClCD,EAAAA,EAAAA,KAAA,OAAKG,UAAU,0BAAyBF,UACpCD,EAAAA,EAAAA,KAACmO,EAAiB,CAAC9H,WAAY4D,OAGnCjK,EAAAA,EAAAA,KAAA,UAAQG,UAAU,yCAAwCF,UACtDD,EAAAA,EAAAA,KAAA,MAAIG,UAAU,kCAAiCF,SAAC,wBAEpDD,EAAAA,EAAAA,KAAA,KAAGG,UAAU,qBAAoBF,SAAC,mDAClCC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,OAAMF,SAAA,EACjBD,EAAAA,EAAAA,KAAA,SAAOwI,QAAQ,2BAA2BrI,UAAU,+CAA8CF,SAAC,qBACnGC,EAAAA,EAAAA,MAAA,UACIe,GAAG,2BACHd,UAAU,yGACVsI,MAAOQ,EACPP,SAAWxF,IACP,MAAMkL,EAAalL,EAAEoB,OAAOmE,MAC5BS,EAA2BkF,GAC3BjF,EAA0BiF,GAC1BC,aAAaC,QAAQ,0BAA2BF,IAEpDG,SAA8B,IAApBlG,EAAStG,OAAa9B,SAAA,CAEX,IAApBoI,EAAStG,SAAgB/B,EAAAA,EAAAA,KAAA,UAAQyI,MAAM,GAAExI,SAAC,0BAC1CoI,EAAS3B,IAAI9E,IAAW5B,EAAAA,EAAAA,KAAA,UAAsByI,MAAO7G,EAAQ3B,SAAE2B,GAA1BA,WAG9C1B,EAAAA,EAAAA,MAAA,OAAKe,GAAG,0BAA0BgC,QAASA,IAAMmG,EAAqBH,GAA0B9I,UAAU,wHAAuHF,SAAA,EAC7ND,EAAAA,EAAAA,KAACwO,EAAmB,CAACnJ,WAAYwE,KACjC3J,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaF,SAAA,EACxBD,EAAAA,EAAAA,KAAA,KAAGG,UAAU,wBAAuBF,SAAC,aACrCD,EAAAA,EAAAA,KAAA,KAAGiB,GAAG,6BAA6Bd,UAAU,kCAAiCF,SAAEgJ,GAA2B,oBAC3GjJ,EAAAA,EAAAA,KAAA,KAAGG,UAAU,6BAA4BF,SAAC,qBAC1CC,EAAAA,EAAAA,MAAA,KAAGC,UAAU,kCAAiCF,SAAA,CAAE0J,EAAe,IAAEC,SAErE5J,EAAAA,EAAAA,KAAA,OAAK4D,MAAM,6BAA6BgB,MAAM,KAAKC,OAAO,KAAKf,QAAQ,YAAYD,KAAK,OAAOE,OAAO,eAAeG,YAAY,IAAIF,cAAc,QAAQC,eAAe,QAAOhE,UAACD,EAAAA,EAAAA,KAAA,YAAUyO,OAAO,yBAGvMvO,EAAAA,EAAAA,MAAA,UAAQC,UAAU,yCAAwCF,SAAA,EACtDD,EAAAA,EAAAA,KAAA,MAAIG,UAAU,kCAAiCF,SAAC,mBAChDC,EAAAA,EAAAA,MAAA,UAAQ+C,QAASA,IAAMyG,GAAwB,GAAOvJ,UAAU,oIAAmIF,SAAA,EAC/LC,EAAAA,EAAAA,MAAA,OAAK0D,MAAM,6BAA6BgB,MAAM,KAAKC,OAAO,KAAKf,QAAQ,YAAYD,KAAK,OAAOE,OAAO,eAAeG,YAAY,IAAIF,cAAc,QAAQC,eAAe,QAAQ9D,UAAU,OAAMF,SAAA,EAACD,EAAAA,EAAAA,KAAA,QAAMmE,EAAE,gEAAoEnE,EAAAA,EAAAA,KAAA,QAAMmE,EAAE,+DAAuE,oBAItWnE,EAAAA,EAAAA,KAAA,KAAGG,UAAU,qBAAoBF,SACJ,IAA5BsL,EAAiBxJ,OACR,sCAAqC,YAAAE,OACzBsJ,EAAiBxJ,OAAM,SAAAE,OAAQsJ,EAAiBxJ,OAAS,EAAI,IAAM,GAAE,yBAE3F/B,EAAAA,EAAAA,KAAA,OAAKiB,GAAG,wBAAwBd,UAAU,+BAA8BF,SACnE+I,GACGhJ,EAAAA,EAAAA,KAAC0O,EAAAA,EAAc,IAEa,IAA5BnD,EAAiBxJ,QACb/B,EAAAA,EAAAA,KAAA,KAAGG,UAAU,mCAAkCF,SAAC,+BAEhDD,EAAAA,EAAAA,KAAC2O,EAAAA,GAAU,CACP5B,QAASA,EACT6B,mBAAoBC,EAAAA,GACpBC,UAhJLtC,IACnB,MAAM,OAAEuC,EAAM,KAAEC,GAASxC,EACzB,GAAIuC,EAAO9N,KAAO+N,EAAK/N,GAAI,CACvB,MAAMgO,EAAW7H,EAAgB8H,UAAU9O,GAAQA,EAAKa,KAAO8N,EAAO9N,IAChEkO,EAAW/H,EAAgB8H,UAAU9O,GAAQA,EAAKa,KAAO+N,EAAK/N,IAC9DmO,GAAWC,EAAAA,EAAAA,IAAUjI,EAAiB6H,EAAUE,GACtD3O,EAAS8O,kBAAkBF,EAC/B,GAyIiDnP,UAEzBD,EAAAA,EAAAA,KAACuP,EAAAA,GAAe,CACZC,MAAOjE,EAAiB7E,IAAItG,GAAQA,EAAKa,IACzCwO,SAAUC,EAAAA,GAA4BzP,UAEtCD,EAAAA,EAAAA,KAACsI,EAAAA,EAAe,CAAArI,SACXsL,EAAiB7E,IAAI,CAACtG,EAAMuP,KACzB3P,EAAAA,EAAAA,KAACoC,EAAAA,EAAOC,IAAG,CAAeuN,QAAM,EAAA3P,UAC5BD,EAAAA,EAAAA,KAAC6P,EAAa,CAC1DzP,KAAMA,EACN0G,SAAU2G,EACVpG,2BAA4BA,EAC5ByI,QAASlC,EACTmC,QAAmB,IAAVJ,EACTK,OAAQL,IAAUpE,EAAiBxJ,OAAS,KAPa3B,EAAKa,iBAmBtDjB,EAAAA,EAAAA,KAACiQ,EAAc,CACXhJ,OAAQwC,EACRvC,QAASA,IAAMwC,GAAwB,GACvCvC,SAAUA,EACVC,gBAAiBA,EACjBJ,aAAc2G,EACdhJ,gBAAiB8I,Q","sources":["components/Greeting.js","components/FocusItemCard.js","components/CircularProgressBar.js","components/WeeklyTaskSummary.js","components/AvailableTestCard.js","components/EditFocusModal.js","pages/DashboardPage.js"],"sourcesContent":["// src/components/Greeting.js\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nconst Greeting = React.memo(({ userName }) => {\r\n    const [greetingText, setGreetingText] = useState('');\r\n    const [greetingEmoji, setGreetingEmoji] = useState('');\r\n\r\n    useEffect(() => {\r\n        const updateGreeting = () => {\r\n            const hour = new Date().getHours();\r\n            let text = '';\r\n            let emoji = '';\r\n\r\n            if (hour >= 5 && hour < 12) {\r\n                text = 'Good morning';\r\n                emoji = '☀️';\r\n            } else if (hour >= 12 && hour < 17) {\r\n                text = 'Good afternoon';\r\n                emoji = '👋';\r\n            } else if (hour >= 17 && hour < 22) {\r\n                text = 'Good evening';\r\n                emoji = '🌙';\r\n            } else {\r\n                text = 'Time to sleep';\r\n                emoji = '😴';\r\n            }\r\n            setGreetingText(text);\r\n            setGreetingEmoji(emoji);\r\n        };\r\n\r\n        updateGreeting();\r\n        const intervalId = setInterval(updateGreeting, 60 * 1000);\r\n        return () => clearInterval(intervalId);\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <p className=\"text-base font-light text-gray-500 flex items-center\">\r\n                {greetingText}<span className=\"ml-1 text-base\">{greetingEmoji}</span>\r\n            </p>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default Greeting;","// src/components/FocusItemCard.js\nimport React from 'react';\nimport { motion } from 'framer-motion';\nimport { useHandlers } from '../context/HandlerContext';\nimport { useSortable } from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\n\nconst FocusItemCard = React.memo(({ item, handleOpenFocusTest, ...props }) => {\n    const handlers = useHandlers();\n    const {\n        attributes,\n        listeners,\n        setNodeRef,\n        transform,\n        transition,\n        isDragging,\n    } = useSortable({ id: item.id });\n\n    const style = {\n        transform: CSS.Transform.toString(transform),\n        transition: transition || 'transform 0.2s cubic-bezier(0.22, 1, 0.36, 1)',\n        willChange: 'transform',\n        opacity: isDragging ? 0.7 : 1,\n        background: isDragging ? '#f0f0f0' : undefined,\n    };\n\n\n    const handleCheckboxClick = (e) => {\n        e.stopPropagation();\n        handlers.toggleTestCompletion(item.subject, item.title, !item.completed);\n    };\n\n    const handleRemoveClick = (e) => {\n        e.stopPropagation();\n        handlers.removeFocusItem(item.id);\n    };\n\n    const handleTestClick = (e) => {\n        e.stopPropagation();\n        handleOpenFocusTest(item.id);\n    };\n\n    // Define a color palette for subject borders\n    const subjectColor = (subject) => {\n        if (!subject) return '#E5E7EB'; // default gray color\n        let hash = 0;\n        for (let i = 0; i < subject.length; i++) {\n            hash = subject.charCodeAt(i) + ((hash << 5) - hash);\n        }\n        const color = `hsl(${hash % 360}, 70%, 60%)`;\n        return color;\n    };\n\n    const borderColor = item.completed ? '#10B981' : subjectColor(item.subject);\n\n    // Card classes inspired by a clean, timetable-like appearance\n    const cardClasses = `\n        flex items-center w-full p-4 rounded-lg border-l-4 transition-all duration-200 ease-in-out\n        ${item.completed ? 'bg-green-100' : 'bg-gray-50'} hover:shadow-lg cursor-pointer\n    `;\n    \n    const titleClasses = `\n        font-bold text-gray-800 text-md\n        ${item.completed ? 'line-through text-gray-400' : ''}\n    `;\n\n    // Animation variants for card\n    const cardVariants = {\n        initial: { opacity: 0, scale: 0.96, y: 10 },\n        animate: { opacity: 1, scale: 1, y: 0 },\n        exit: { opacity: 0, scale: 0.85, x: 40, transition: { duration: 0.18 } },\n    };\n\n    return (\n        <motion.div\n            ref={setNodeRef}\n            style={style}\n            className={cardClasses.replace('border-l-4', '')}\n            variants={cardVariants}\n            initial=\"initial\"\n            animate=\"animate\"\n            exit=\"exit\"\n        >\n            <div className=\"flex items-center w-full\">\n                {/* Checkbox on the left */}\n                <div className=\"flex items-center justify-center mr-4 flex-shrink-0\">\n                    <motion.button\n                        onClick={handleCheckboxClick}\n                        className={`w-6 h-6 rounded-full border-2 ${item.completed ? \"bg-green-500 border-green-500\" : \"border-gray-300 hover:border-blue-500\"} flex-shrink-0 flex items-center justify-center transition-colors duration-200`}\n                        aria-label={item.completed ? \"Mark as incomplete\" : \"Mark as complete\"}\n                        whileTap={{ scale: 0.8 }}\n                        animate={{ scale: item.completed ? 1.15 : 1, backgroundColor: item.completed ? '#22c55e' : '#fff', borderColor: item.completed ? '#22c55e' : '#d1d5db' }}\n                        transition={{ type: 'spring', stiffness: 350, damping: 18 }}\n                    >\n                        {item.completed && (\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4 text-white\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={3} d=\"M5 13l4 4L19 7\" />\n                            </svg>\n                        )}\n                    </motion.button>\n                </div>\n\n                {/* Main Content as a link */}\n                {item.link ? (\n                    <a\n                        href={item.link}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        className=\"flex-grow min-w-0 px-2 py-1 block focus:outline-none\"\n                        tabIndex={0}\n                        aria-label={`Open test for ${item.title}`}\n                        style={{ textDecoration: \"none\" }}\n                    >\n                        <h3 className={titleClasses} title={item.title}>{item.title}</h3>\n                        <p className=\"text-sm text-gray-500 truncate\">{item.subject}</p>\n                        <div className=\"flex items-center mt-2 text-xs space-x-4\">\n                            {item.mcqs > 0 && (\n                                <span className=\"text-gray-600 flex items-center\">\n                                    {item.mcqs} MCQs\n                                </span>\n                            )}\n                        </div>\n                    </a>\n                ) : (\n                    <div className=\"flex-grow min-w-0 px-2 py-1\">\n                        <h3 className={titleClasses} title={item.title}>{item.title}</h3>\n                        <p className=\"text-sm text-gray-500 truncate\">{item.subject}</p>\n                        <div className=\"flex items-center mt-2 text-xs space-x-4\">\n                            {item.mcqs > 0 && (\n                                <span className=\"text-gray-600 flex items-center\">\n                                    {item.mcqs} MCQs\n                                </span>\n                            )}\n                        </div>\n                    </div>\n                )}\n\n                {/* Action buttons on the right, always visible */}\n                <div className=\"flex flex-col items-center space-y-1 ml-2 flex-shrink-0\">\n                    <button\n                        className=\"p-1.5 rounded-full text-gray-400 hover:text-red-600 hover:bg-gray-100\"\n                        onClick={handleRemoveClick}\n                        aria-label=\"Remove from focus\"\n                    >\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line><line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line></svg>\n                    </button>\n                </div>\n\n                <span\n                    {...attributes}\n                    {...listeners}\n                    className=\"drag-handle flex items-center justify-center rounded-md ml-2 flex-shrink-0\"\n                    style={{ cursor: 'grab', width: 36, height: 36, touchAction: 'none', background: 'none' }}\n                    aria-label=\"Drag to reorder\"\n                    tabIndex={0}\n                >\n                    {/* SVG grip icon */}\n                    <svg width=\"20\" height=\"20\" viewBox=\"0 0 16 16\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"#6B7280\">\n                        <path d=\"M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z\"/>\n                    </svg>\n                </span>\n            </div>\n        </motion.div>\n    );\n});\n\nexport default FocusItemCard;","// src/components/CircularProgressBar.js\r\nimport React from 'react';\r\n\r\nconst CircularProgressBar = React.memo(({ percentage }) => {\r\n    const radius = 15.9155;\r\n    const circumference = 2 * Math.PI * radius;\r\n    const offset = circumference - (percentage / 100) * circumference;\r\n\r\n    return (\r\n        <div className=\"relative w-20 h-20\">\r\n            <svg className=\"w-full h-full\" viewBox=\"0 0 36 36\">\r\n                <path className=\"text-green-200\" d=\"M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831\" fill=\"none\" strokeWidth=\"3\" stroke=\"currentColor\" />\r\n                <path\r\n                    className=\"progress-ring__circle text-green-500\"\r\n                    d=\"M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831\"\r\n                    fill=\"none\"\r\n                    strokeWidth=\"3\"\r\n                    strokeLinecap=\"round\"\r\n                    stroke=\"currentColor\"\r\n                    style={{ strokeDasharray: `${circumference} ${circumference}`, strokeDashoffset: offset }}\r\n                />\r\n            </svg>\r\n            <div className=\"absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 text-xl font-bold text-green-600\">{Math.round(percentage)}%</div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default CircularProgressBar;","// src/components/WeeklyTaskSummary.js\r\nimport React from 'react';\r\n\r\n/**\r\n * A single bar representing a day's progress, showing completed and missed tasks.\r\n */\r\nconst DayBar = ({ day, planned, completed, missed, isToday }) => {\r\n    const completedHeight = planned > 0 ? (completed / planned) * 100 : 0;\r\n    const missedHeight = planned > 0 ? (missed / planned) * 100 : 0;\r\n\r\n    return (\r\n        <div className=\"flex flex-col items-center space-y-2\">\r\n            <div className=\"relative\">\r\n                <div className=\"absolute bottom-full mb-2 w-max px-2 py-1 text-xs text-white bg-gray-800 rounded-md opacity-0 group-hover:opacity-100 transition-opacity duration-300\">\r\n                    {completed}/{planned} Done, {missed} Missed\r\n                </div>\r\n                {/* Bar container */}\r\n                <div className=\"group h-28 w-6 bg-gray-200 rounded-full flex flex-col justify-end overflow-hidden\">\r\n                    {/* Missed portion of the bar */}\r\n                    <div\r\n                        className=\"bg-red-400 transition-all duration-500\"\r\n                        style={{ height: `${missedHeight}%` }}\r\n                    ></div>\r\n                    {/* Completed portion of the bar */}\r\n                    <div\r\n                        className=\"bg-cyan-400 transition-all duration-500\"\r\n                        style={{ height: `${completedHeight}%` }}\r\n                    ></div>\r\n                </div>\r\n            </div>\r\n            {/* Day label */}\r\n            <p className={`text-sm font-semibold ${isToday ? 'text-cyan-500' : 'text-gray-500'}`}>\r\n                {day}\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\n/**\r\n * The main component that displays the weekly summary chart.\r\n */\r\nconst WeeklyTaskSummary = React.memo(({ weeklyData }) => {\r\n    const totalCompleted = weeklyData.reduce((sum, day) => sum + day.completed, 0);\r\n    const totalMissed = weeklyData.reduce((sum, day) => sum + day.missed, 0);\r\n\r\n    return (\r\n        <div className=\"bg-white p-6 rounded-2xl\">\r\n            <div className=\"flex justify-between items-start mb-4\">\r\n                <div>\r\n                    <h3 className=\"text-gray-500 text-sm\">Overall</h3>\r\n                    <p className=\"text-3xl font-bold text-gray-800\">{totalCompleted} <span className=\"text-lg font-medium text-gray-600\">Completed</span></p>\r\n                    <p className=\"text-red-500 text-lg font-bold\">{totalMissed} <span className=\"font-medium\">Missed</span></p>\r\n                </div>\r\n                {/* Updated Legend */}\r\n                <div className=\"flex flex-col items-end space-y-1 text-sm\">\r\n                    <div className=\"flex items-center\">\r\n                        <span className=\"w-3 h-3 rounded-full bg-gray-200 mr-2\"></span>\r\n                        <span>Planned</span>\r\n                    </div>\r\n                    <div className=\"flex items-center\">\r\n                        <span className=\"w-3 h-3 rounded-full bg-cyan-400 mr-2\"></span>\r\n                        <span>Completed</span>\r\n                    </div>\r\n                    <div className=\"flex items-center\">\r\n                        <span className=\"w-3 h-3 rounded-full bg-red-400 mr-2\"></span>\r\n                        <span>Missed</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"flex justify-around\">\r\n                {weeklyData.map(data => (\r\n                    <DayBar\r\n                        key={data.day}\r\n                        day={data.day}\r\n                        planned={data.planned}\r\n                        completed={data.completed}\r\n                        missed={data.missed}\r\n                        isToday={data.isToday}\r\n                    />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default WeeklyTaskSummary;","// src/components/AvailableTestCard.js\nimport React from 'react';\nimport { useHandlers } from '../context/HandlerContext';\n\nconst AvailableTestCard = ({ test, subject, isAdded, onRemove }) => {\n    const handlers = useHandlers();\n\n    const handleAddClick = (e) => {\n        e.stopPropagation();\n        handlers.addFocusItem(test, subject);\n    };\n\n    const handleRemoveClick = (e) => {\n        e.stopPropagation();\n        if (onRemove) {\n            onRemove(test);\n        } else {\n            handlers.removeFocusItem(test.id);\n        }\n    };\n\n    \n    const handleCheckboxClick = (e) => {\n        e.stopPropagation();\n        handlers.toggleTestCompletion(subject, test.title, !test.completed);\n    };\n\n    const cardClasses = `\n        flex items-center justify-between p-3 rounded-xl border transition-all duration-300\n        ${test.completed \n            ? 'bg-green-50 border-green-200' \n            : 'bg-white border-gray-200 hover:shadow-md'\n        }\n    `;\n\n    const titleClasses = `\n        font-semibold\n        ${test.completed \n            ? 'line-through text-gray-500' \n            : 'text-gray-800'\n        }\n    `;\n    \n    const subjectClasses = `\n        text-sm\n        ${test.completed \n            ? 'text-gray-400' \n            : 'text-gray-500'\n        }\n    `;\n\n    return (\n        <div id={`available-test-${test.id}`} className={cardClasses}>\n            <div className=\"flex items-center flex-grow mr-2\">\n                <button\n                    onClick={handleCheckboxClick}\n                    className={`w-6 h-6 rounded-md border-2 ${test.completed ? \"bg-green-500 border-green-500\" : \"border-gray-300\"} mr-3 flex-shrink-0 flex items-center justify-center transition-colors`}\n                    aria-label={test.completed ? \"Mark as incomplete\" : \"Mark as complete\"}\n                >\n                    {test.completed && (\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4 text-white\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={3} d=\"M5 13l4 4L19 7\" />\n                        </svg>\n                    )}\n                </button>\n                <div className=\"truncate\">\n                    <h4 className={titleClasses}>{test.title}</h4>\n                    <p className={subjectClasses}>{subject}</p>\n                </div>\n            </div>\n            \n            <button\n                onClick={isAdded ? handleRemoveClick : handleAddClick}\n                className={`flex-shrink-0 px-4 py-1.5 text-sm font-semibold rounded-lg transition-colors duration-200\n                    ${isAdded \n                        ? 'bg-red-100 text-red-700 hover:bg-red-200' \n                        : 'bg-blue-100 text-blue-700 hover:bg-blue-200'\n                    }`\n                }\n            >\n                {isAdded ? 'Remove' : 'Add'}\n            </button>\n        </div>\n    );\n};\n\nexport default AvailableTestCard;","// src/components/EditFocusModal.js\nimport React, { useState, useMemo, useEffect } from 'react';\nimport { AnimatePresence, motion } from 'framer-motion';\nimport AvailableTestCard from './AvailableTestCard';\n\nconst EditFocusModal = ({ isOpen, onClose, testData, todayFocusItems, addFocusItem, removeFocusItem, handleToggleTestCompletion }) => {\n    const [searchQuery, setSearchQuery] = useState('');\n    const [selectedAvailableSubject, setSelectedAvailableSubject] = useState('');\n\n    // Reset filters when modal opens\n    useEffect(() => {\n        if (isOpen) {\n            setSearchQuery('');\n            setSelectedAvailableSubject('');\n        }\n    }, [isOpen]);\n\n    // Memoize allTests calculation to prevent unnecessary re-renders\n    const allTests = useMemo(() => {\n        return Object.keys(testData).flatMap(subject =>\n            testData[subject].map(test => ({ ...test, subject, id: `${subject}-${test.title}` }))\n        );\n    }, [testData]);\n\n    // Memoize filteredAllTests calculation\n    const filteredAllTests = useMemo(() => {\n        return allTests.filter(test => {\n            const matchesSubject = selectedAvailableSubject === '' || test.subject === selectedAvailableSubject;\n            const matchesSearch = test.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                test.subject.toLowerCase().includes(searchQuery.toLowerCase());\n            return matchesSubject && matchesSearch;\n        });\n    }, [allTests, selectedAvailableSubject, searchQuery]);\n\n    const subjects = Object.keys(testData);\n\n    return (\n        <AnimatePresence>\n            {isOpen && (\n                <motion.div\n                    className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\"\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    exit={{ opacity: 0 }}\n                    transition={{ duration: 0.22 }}\n                    onClick={onClose} // Close modal on backdrop click\n                >\n                    <div\n                        onClick={(e) => e.stopPropagation()} // Prevent modal content click from closing modal\n                        className=\"bg-white rounded-2xl shadow-xl p-6 w-full max-w-md mx-auto relative flex flex-col\" \n                        style={{maxHeight: '85vh'}}\n                    >\n                        <div className=\"flex justify-between items-center mb-4 pb-4 border-b border-gray-200\">\n                            <h2 className=\"text-2xl font-bold text-gray-800\">Add to Today's Focus</h2>\n                            <button\n                                onClick={onClose}\n                                className=\"p-2 rounded-full text-gray-500 hover:bg-gray-200 transition-colors\"\n                                aria-label=\"Close modal\"\n                            >\n                                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line><line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line></svg>\n                            </button>\n                        </div>\n\n                        <div className=\"mb-4\">\n                            <label htmlFor=\"select-available-subject\" className=\"block text-sm font-medium text-gray-700 mb-1\">Filter by Subject:</label>\n                            <select\n                                id=\"select-available-subject\"\n                                className=\"w-full px-4 py-2 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-50\"\n                                value={selectedAvailableSubject}\n                                onChange={(e) => setSelectedAvailableSubject(e.target.value)}\n                            >\n                                <option value=\"\">All Subjects</option>\n                                {subjects.map(subject => (\n                                    <option key={subject} value={subject}>{subject}</option>\n                                ))}\n                            </select>\n                        </div>\n\n                        <div className=\"mb-4\">\n                            <input\n                                type=\"text\"\n                                placeholder=\"Search available tests...\"\n                                className=\"w-full px-4 py-2 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-50\"\n                                value={searchQuery}\n                                onChange={(e) => setSearchQuery(e.target.value)}\n                                aria-label=\"Search available tests\"\n                            />\n                        </div>\n\n                        <div id=\"available-tests-list\" className=\"space-y-3 pr-2 -mr-2 overflow-y-auto flex-grow\">\n                            {filteredAllTests.length === 0 ? (\n                                <p className=\"text-gray-500 text-center py-4\">No tests available matching your filters.</p>\n                            ) : (\n                                filteredAllTests.map(test => {\n                                    const isAdded = todayFocusItems.some(item => item.id === test.id || (item.subject === test.subject && item.title === test.title));\n                                    return (\n                                        <AvailableTestCard\n                                            key={test.id}\n                                            test={test}\n                                            subject={test.subject}\n                                            isAdded={isAdded}\n                                            onAdd={addFocusItem}\n                                            onRemove={removeFocusItem}\n                                            handleToggleTestCompletion={handleToggleTestCompletion}\n                                        />\n                                    );\n                                })\n                            )}\n                        </div>\n                         <div className=\"mt-6 flex justify-end pt-4 border-t border-gray-200\">\n                            <button\n                                onClick={onClose}\n                                className=\"px-6 py-2 bg-blue-600 text-white font-bold rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition duration-300\"\n                            >\n                                Done\n                            </button>\n                        </div>\n                    </div>\n                </motion.div>\n            )}\n        </AnimatePresence>\n    );\n};\n\nexport default EditFocusModal;","// src/pages/DashboardPage.js\nimport React, { useState, useMemo, useEffect, useCallback } from 'react';\nimport { useTestData } from '../context/TestDataContext';\nimport { useTimetable } from '../context/TimetableContext';\nimport { useFocusItems } from '../context/FocusItemsContext';\nimport Greeting from '../components/Greeting';\nimport { AnimatePresence, motion } from 'framer-motion';\nimport { useHandlers } from '../context/HandlerContext';\nimport FocusItemCard from '../components/FocusItemCard';\nimport LoadingSpinner from '../components/LoadingSpinner';\nimport CircularProgressBar from '../components/CircularProgressBar';\nimport WeeklyTaskSummary from '../components/WeeklyTaskSummary';\nimport EditFocusModal from '../components/EditFocusModal';\nimport {\n  DndContext,\n  closestCenter,\n  KeyboardSensor,\n  PointerSensor,\n  TouchSensor,\n  useSensor,\n  useSensors,\n} from '@dnd-kit/core';\nimport {\n  arrayMove,\n  SortableContext,\n  verticalListSortingStrategy,\n} from '@dnd-kit/sortable';\n\nconst DashboardPage = React.memo(({\n  onNavigate,\n  userName,\n  isLoadingTodayFocus,\n  currentTimetableSubject,\n  setCurrentTimetableSubject,\n  setCurrentSelectedSubject,\n  navigateToTrophyPage,\n}) => {\n  const handlers = useHandlers();\n  // Use context for test data and related state\n  const { testData } = useTestData();\n  const { timetableEntries } = useTimetable();\n  const { todayFocusItems } = useFocusItems();\n\n  const [isEditFocusModalOpen, setIsEditFocusModalOpen] = useState(false);\n\n    // Copilot: Memoize subjects array from testData\n    const subjects = useMemo(() => Object.keys(testData), [testData]);\n\n    // Copilot: Memoize completedCount and totalCount for currentTimetableSubject\n    const completedCount = useMemo(() => (\n        testData[currentTimetableSubject]\n            ? testData[currentTimetableSubject].filter(test => test.completed).length\n            : 0\n    ), [testData, currentTimetableSubject]);\n\n    const totalCount = useMemo(() => (\n        testData[currentTimetableSubject]\n            ? testData[currentTimetableSubject].length\n            : 0\n    ), [testData, currentTimetableSubject]);\n\n    // Copilot: Memoize progressPercentage calculation\n    const progressPercentage = useMemo(() => {\n        const subjectTests = testData[currentTimetableSubject] || [];\n        const totalTests = subjectTests.length;\n        const completedTests = subjectTests.filter(test => test.completed).length;\n        return totalTests > 0 ? (completedTests / totalTests) * 100 : 0;\n    }, [testData, currentTimetableSubject]);\n\n    // Copilot: Memoize weeklyTaskData calculation\n    const weeklyTaskData = useMemo(() => {\n        if (!timetableEntries) return [];\n        const days = ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'];\n        const weeklySummary = [];\n        const today = new Date();\n        const todayDateString = today.toLocaleDateString('en-CA');\n        const startOfWeek = new Date(today);\n        startOfWeek.setHours(0, 0, 0, 0);\n        startOfWeek.setDate(today.getDate() - today.getDay());\n\n        for (let i = 0; i < 7; i++) {\n            const currentDay = new Date(startOfWeek);\n            currentDay.setDate(startOfWeek.getDate() + i);\n            const dateString = currentDay.toLocaleDateString('en-CA');\n            const tasksForDay = timetableEntries.filter(entry => entry.date === dateString);\n            let completed = 0;\n            let missed = 0;\n            const now = new Date();\n            tasksForDay.forEach(task => {\n                if (task.checked) {\n                    completed++;\n                } else {\n                    const eventDateTime = new Date(`${task.date}T${task.time}`);\n                    if (eventDateTime < now) missed++;\n                }\n            });\n            weeklySummary.push({ day: days[currentDay.getDay()], planned: tasksForDay.length, completed, missed, isToday: dateString === todayDateString });\n        }\n        return weeklySummary;\n    }, [timetableEntries]);\n\n    // Calculate today's date string in 'YYYY-MM-DD' format\n    const todayDateString = useMemo(() => {\n        const today = new Date();\n        const year = today.getFullYear();\n        const month = (today.getMonth() + 1).toString().padStart(2, '0');\n        const day = today.getDate().toString().padStart(2, '0');\n        return `${year}-${month}-${day}`;\n    }, []);\n\n    // Filter today's focus items for today (if they have a date field)\n    const todaysFocusTests = useMemo(() => {\n        return todayFocusItems.sort((a, b) => (a.time || '').localeCompare(b.time || ''));\n    }, [todayFocusItems]);\n\n    // Find the current ongoing or next upcoming focus test\n    const currentFocusTest = useMemo(() => {\n        const now = new Date();\n        let ongoing = null;\n        for (let i = 0; i < todaysFocusTests.length; i++) {\n            const item = todaysFocusTests[i];\n            if (!item.time) continue;\n            const [hour, minute] = item.time.split(':').map(Number);\n            const eventDate = new Date(now.getFullYear(), now.getMonth(), now.getDate(), hour, minute);\n            if (eventDate <= now) {\n                ongoing = item; // latest not in the future\n            } else if (!ongoing) {\n                // If all are in the future, pick the first one\n                return item;\n            }\n        }\n        return ongoing || null;\n    }, [todaysFocusTests]);\n\n    // Find Live and Upcoming timetable events\n    const now = new Date();\n    const sortedTimetable = [...timetableEntries].sort((a, b) => {\n        const aTime = new Date(`${a.date}T${a.time}`);\n        const bTime = new Date(`${b.date}T${b.time}`);\n        return aTime - bTime;\n    });\n    // Find Live event\n    const liveEvent = sortedTimetable.find((event, idx, arr) => {\n        if (event.checked) return false;\n        const eventStart = new Date(`${event.date}T${event.time}`);\n        const nextEvent = arr[idx + 1];\n        const nextStart = nextEvent ? new Date(`${nextEvent.date}T${nextEvent.time}`) : null;\n        return now >= eventStart && (!nextStart || now < nextStart);\n    });\n    // Find Upcoming event (first future event that is not completed)\n    const upcomingEvent = sortedTimetable.find(event => {\n        if (event.checked) return false;\n        const eventStart = new Date(`${event.date}T${event.time}`);\n        return now < eventStart;\n    });\n\n    const sensors = useSensors(\n        useSensor(PointerSensor, { activationConstraint: { distance: 5 } }),\n        useSensor(TouchSensor, { activationConstraint: { delay: 100, tolerance: 5 } }),\n        useSensor(KeyboardSensor)\n    );\n\n    const handleDragEnd = (event) => {\n        const { active, over } = event;\n        if (active.id !== over.id) {\n            const oldIndex = todayFocusItems.findIndex(item => item.id === active.id);\n            const newIndex = todayFocusItems.findIndex(item => item.id === over.id);\n            const newItems = arrayMove(todayFocusItems, oldIndex, newIndex);\n            handlers.reorderFocusItems(newItems);\n        }\n    };\n\n    const handleRemoveFocusItem = useCallback((id) => {\n        handlers.removeFocusItem(id);\n    }, [handlers]);\n\n    const handleToggleTestCompletion = useCallback((id) => {\n        handlers.toggleTestCompletion(id);\n    }, [handlers]);\n\n    const handleAddFocusItem = useCallback((item) => {\n        handlers.addFocusItem(item);\n    }, [handlers]);\n\n    const handleCheck = useCallback((id) => {\n        handlers.toggleTestCompletion(id);\n    }, [handlers]);\n\n    return (\n        <>\n            <div id=\"page-dashboard\" className=\"page px-6 py-8 overflow-x-hidden\">\n                \n                <div\n                    className=\"flex items-center gap-4 mb-8 cursor-pointer transition-colors duration-300\"\n                    onClick={() => onNavigate('profile')}\n                >\n                    <img src=\"https://placehold.co/80x80/E2E8F0/4A5568?text=NK\" alt=\"User Avatar\" className=\"w-16 h-16 rounded-full\" />\n                    <div>\n                        <h2 className=\"text-2xl text-gray-600\">Hello <span className=\"font-bold text-gray-800\">Nikhil !</span></h2>\n                        <Greeting userName={userName || 'User'} />\n                    </div>\n                </div>\n\n                {/* Timetable Status Cards Section */}\n                <div className=\"mb-4\">\n                  <h3 className=\"text-lg font-bold text-gray-800 mb-3 pl-1\">Today's Timetable Status</h3>\n                </div>\n                <div className=\"mb-8\">\n                  <div\n                    className=\"flex flex-nowrap overflow-x-auto pb-2 hide-scrollbar scroll-smooth w-full max-w-full\"\n                    style={{ WebkitOverflowScrolling: 'touch' }}\n                  >\n                    {/* Live Event Card */}\n                    {liveEvent && (\n                      <div className=\"min-w-[300px] flex-shrink-0 bg-white border border-gray-200 rounded-xl flex items-center p-6 first:ml-0 ml-4\">\n                        <div>\n                          <div className=\"text-lg font-semibold text-gray-800\">{liveEvent.subject}</div>\n                          <div className=\"text-base text-gray-600\">{liveEvent.topic}</div>\n                          {/* Status with colored dot */}\n                          <span className=\"flex items-center gap-1 mt-1\">\n                            <span className=\"inline-block w-3 h-3 rounded-full border border-white flex-shrink-0 mr-2 bg-cyan-500\"></span>\n                            <span className=\"text-sm font-semibold text-cyan-600\">Live</span>\n                          </span>\n                        </div>\n                      </div>\n                    )}\n                    {/* Upcoming Event Card */}\n                    {upcomingEvent && (\n                      <div className=\"min-w-[300px] flex-shrink-0 bg-white border border-gray-200 rounded-xl flex items-center p-6 first:ml-0 ml-4\">\n                        <div>\n                          <div className=\"text-lg font-semibold text-gray-800\">{upcomingEvent.subject}</div>\n                          <div className=\"text-base text-gray-600\">{upcomingEvent.topic}</div>\n                          {/* Status with colored dot */}\n                          <span className=\"flex items-center gap-1 mt-1\">\n                            <span className=\"inline-block w-3 h-3 rounded-full border border-white flex-shrink-0 mr-2 bg-orange-400\"></span>\n                            <span className=\"text-sm font-semibold text-orange-600\">Upcoming</span>\n                          </span>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                <header className=\"flex items-center justify-between mb-2\">\n                    <h1 className=\"text-xl font-bold text-gray-900\">Weekly Performance</h1>\n                </header>\n                <p className=\"text-gray-500 mb-6\">Your progress for this week...</p>\n                <div className=\"mb-10 border rounded-lg\">\n                    <WeeklyTaskSummary weeklyData={weeklyTaskData} />\n                </div>\n\n                <header className=\"flex items-center justify-between mb-2\">\n                    <h2 className=\"text-xl font-bold text-gray-900\">Subject Progress</h2>\n                </header>\n                <p className=\"text-gray-500 mb-6\">Track completed tests for a specific subject.</p>\n                <div className=\"mb-6\">\n                    <label htmlFor=\"select-timetable-subject\" className=\"block text-sm font-medium text-gray-700 mb-3\">Select Subject:</label>\n                    <select\n                        id=\"select-timetable-subject\"\n                        className=\"w-full px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                        value={currentTimetableSubject}\n                        onChange={(e) => {\n                            const newSubject = e.target.value;\n                            setCurrentTimetableSubject(newSubject);\n                            setCurrentSelectedSubject(newSubject);\n                            localStorage.setItem('currentTimetableSubject', newSubject);\n                        }}\n                        disabled={subjects.length === 0}\n                    >\n                        {subjects.length === 0 && <option value=\"\">No Subjects Available</option>}\n                        {subjects.map(subject => <option key={subject} value={subject}>{subject}</option>)}\n                    </select>\n                </div>\n                <div id=\"timetable-progress-card\" onClick={() => navigateToTrophyPage(currentTimetableSubject)} className=\"rounded-xl border p-5 flex items-center justify-between mb-10 cursor-pointer transition-colors duration-300 shadow-sm\">\n                    <CircularProgressBar percentage={progressPercentage} />\n                    <div className=\"flex-1 ml-4\">\n                        <p className=\"text-sm text-gray-500\">Subject</p>\n                        <p id=\"timetable-progress-subject\" className=\"text-xl font-bold text-gray-800\">{currentTimetableSubject || 'Select Subject'}</p>\n                        <p className=\"text-sm text-gray-500 mt-1\">Tests Completed</p>\n                        <p className=\"text-lg font-bold text-gray-800\">{completedCount}/{totalCount}</p>\n                    </div>\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><polyline points=\"9 18 15 12 9 6\"></polyline></svg>\n                </div>\n                \n                <header className=\"flex items-center justify-between mb-2\">\n                    <h2 className=\"text-xl font-bold text-gray-900\">Today's Focus</h2>\n                    <button onClick={() => setIsEditFocusModalOpen(true)} className=\"bg-blue-50 text-blue-700 font-semibold text-xs px-4 py-2 rounded-full flex items-center hover:bg-blue-100 transition duration-200\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"mr-1\"><path d=\"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\"></path><path d=\"M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z\"></path></svg>\n                        Edit Focus\n                    </button>\n                </header>\n                <p className=\"text-gray-500 mb-6\">\n                {todaysFocusTests.length === 0\n                        ? \"You have no tests in Today's Focus.\"\n                        : `You have ${todaysFocusTests.length} test${todaysFocusTests.length > 1 ? 's' : ''} in Today's Focus.`}\n                </p>\n                <div id=\"today-focus-container\" className=\"flex flex-col space-y-4 pb-4\">\n                    {isLoadingTodayFocus ? (\n                        <LoadingSpinner />\n                    ) : (\n                        todaysFocusTests.length === 0 ? (\n                            <p className=\"text-gray-500 text-center w-full\">No focus items for today.</p>\n                        ) : (\n                            <DndContext\n                                sensors={sensors}\n                                collisionDetection={closestCenter}\n                                onDragEnd={handleDragEnd}\n                            >\n                                <SortableContext\n                                    items={todaysFocusTests.map(item => item.id)}\n                                    strategy={verticalListSortingStrategy}\n                                >\n                                    <AnimatePresence>\n                                        {todaysFocusTests.map((item, index) => (\n                                            <motion.div key={item.id} layout>\n                                                <FocusItemCard \n    item={item} \n    onRemove={handleRemoveFocusItem} \n    handleToggleTestCompletion={handleToggleTestCompletion} \n    onCheck={handleCheck} \n    isFirst={index === 0} \n    isLast={index === todaysFocusTests.length - 1} \n/>\n                                            </motion.div>\n                                        ))}\n                                    </AnimatePresence>\n                                </SortableContext>\n                            </DndContext>\n                        )\n                    )}\n                </div>\n            </div>\n\n            <EditFocusModal\n                isOpen={isEditFocusModalOpen}\n                onClose={() => setIsEditFocusModalOpen(false)}\n                testData={testData}\n                todayFocusItems={todayFocusItems}\n                addFocusItem={handleAddFocusItem}\n                removeFocusItem={handleRemoveFocusItem}\n            />\n        </>\n    );\n});\n\nexport default DashboardPage;"],"names":["React","_ref","userName","greetingText","setGreetingText","useState","greetingEmoji","setGreetingEmoji","useEffect","updateGreeting","hour","Date","getHours","text","emoji","intervalId","setInterval","clearInterval","_jsx","children","_jsxs","className","item","handleOpenFocusTest","_objectWithoutProperties","_excluded","handlers","useHandlers","attributes","listeners","setNodeRef","transform","transition","isDragging","useSortable","id","style","CSS","Transform","toString","willChange","opacity","background","undefined","cardClasses","completed","subject","hash","i","length","charCodeAt","concat","subjectColor","titleClasses","motion","div","ref","replace","variants","initial","scale","y","animate","exit","x","duration","button","onClick","e","stopPropagation","toggleTestCompletion","title","whileTap","backgroundColor","borderColor","type","stiffness","damping","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","link","href","target","rel","tabIndex","textDecoration","mcqs","removeFocusItem","width","height","x1","y1","x2","y2","_objectSpread","cursor","touchAction","percentage","circumference","Math","PI","offset","strokeDasharray","strokeDashoffset","round","DayBar","day","planned","missed","isToday","completedHeight","missedHeight","_ref2","weeklyData","totalCompleted","reduce","sum","totalMissed","map","data","test","isAdded","onRemove","subjectClasses","addFocusItem","isOpen","onClose","testData","todayFocusItems","handleToggleTestCompletion","searchQuery","setSearchQuery","selectedAvailableSubject","setSelectedAvailableSubject","allTests","useMemo","Object","keys","flatMap","filteredAllTests","filter","matchesSubject","matchesSearch","toLowerCase","includes","subjects","AnimatePresence","maxHeight","htmlFor","value","onChange","placeholder","some","AvailableTestCard","onAdd","onNavigate","isLoadingTodayFocus","currentTimetableSubject","setCurrentTimetableSubject","setCurrentSelectedSubject","navigateToTrophyPage","useTestData","timetableEntries","useTimetable","useFocusItems","isEditFocusModalOpen","setIsEditFocusModalOpen","completedCount","totalCount","progressPercentage","subjectTests","totalTests","completedTests","weeklyTaskData","days","weeklySummary","today","todayDateString","toLocaleDateString","startOfWeek","setHours","setDate","getDate","getDay","currentDay","dateString","tasksForDay","entry","date","now","forEach","task","checked","time","push","todaysFocusTests","year","getFullYear","month","getMonth","padStart","sort","a","b","localeCompare","ongoing","minute","split","Number","sortedTimetable","liveEvent","find","event","idx","arr","eventStart","nextEvent","nextStart","upcomingEvent","sensors","useSensors","useSensor","PointerSensor","activationConstraint","distance","TouchSensor","delay","tolerance","KeyboardSensor","handleRemoveFocusItem","useCallback","handleAddFocusItem","handleCheck","_Fragment","src","alt","Greeting","WebkitOverflowScrolling","topic","WeeklyTaskSummary","newSubject","localStorage","setItem","disabled","CircularProgressBar","points","LoadingSpinner","DndContext","collisionDetection","closestCenter","onDragEnd","active","over","oldIndex","findIndex","newIndex","newItems","arrayMove","reorderFocusItems","SortableContext","items","strategy","verticalListSortingStrategy","index","layout","FocusItemCard","onCheck","isFirst","isLast","EditFocusModal"],"sourceRoot":""}