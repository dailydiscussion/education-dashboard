{"version":3,"file":"static/js/244.c52b6a3a.chunk.js","mappings":"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","sources":["components/TestCard.js","pages/TestsCompletedPage.js","components/AddModal.js"],"sourcesContent":["// src/components/TestCard.js\nimport React from 'react';\nimport { useHandlers } from '../context/HandlerContext';\nimport { motion } from 'framer-motion';\n\nconst TestCard = React.memo(({ test, isEditMode, onDelete }) => {\n  // Ensure test object has all required properties with defaults\n  const safeTest = {\n    ...test,\n    title: test?.title || 'Untitled Test',\n    mcqs: test?.mcqs || 0,\n    completed: test?.completed || false,\n    link: test?.link || '',\n    date: test?.date || new Date().toISOString().split('T')[0],\n    subject: test?.subject || '',\n  };\n  const handlers = useHandlers();\n  const handleCardClick = () => {\n    // Allow clicking the card to open a link only if not in edit mode and has a valid link\n    if (!isEditMode && safeTest.link) {\n      if (safeTest.link.startsWith('http')) {\n        window.open(safeTest.link, '_blank');\n      } else {\n        // Log a warning for developers if the link is malformed\n        console.warn(\n          `Invalid link for ${safeTest.title}: ${safeTest.link}. Must start with http:// or https://`\n        );\n      }\n    }\n  };\n\n  const handleCheckboxClick = (e) => {\n    // Prevent the card's click event from firing when the checkbox is clicked\n    e.stopPropagation();\n    if (safeTest.subject && safeTest.title) {\n      handlers.toggleTestCompletion(safeTest.subject, safeTest.title, !safeTest.completed);\n    } else {\n      console.error('Cannot toggle test completion: subject or title is missing');\n    }\n  };\n\n  // Define base classes for the card for consistency\n  const baseCardClasses =\n    'relative p-4 rounded-lg flex justify-between items-center transition-all duration-300';\n\n  // Define specific classes for the completed state\n  const completedClasses = 'bg-green-100';\n\n  // Define specific classes for the default (incomplete) state\n  const defaultClasses = 'bg-gray-50';\n\n  // Add hover effects only if the card has a link and is not in edit mode\n  const linkClasses =\n    safeTest.link && !isEditMode ? 'cursor-pointer hover:shadow-md hover:-translate-y-1' : '';\n\n  // Combine all classes based on the component's state\n  const cardClasses = `${baseCardClasses} ${safeTest.completed ? completedClasses : defaultClasses} ${linkClasses}`;\n\n  return (\n    <div\n      id={`trophy-test-item-${safeTest.subject}-${safeTest.title}`}\n      className={cardClasses}\n      onClick={handleCardClick}\n      aria-label={safeTest.completed ? 'Completed test' : 'Incomplete test'}\n    >\n      <div className=\"flex items-center flex-grow min-w-0\">\n        {/* The interactive checkbox for toggling completion status */}\n        <motion.button\n          onClick={handleCheckboxClick}\n          className={`flex-shrink-0 w-6 h-6 rounded-full border-2 flex items-center justify-center mr-4`}\n          aria-label={safeTest.completed ? 'Mark as incomplete' : 'Mark as complete'}\n          whileTap={{ scale: 0.85 }}\n          animate={{\n            scale: safeTest.completed ? 1.1 : 1,\n            backgroundColor: safeTest.completed ? '#22c55e' : '#ffffff00',\n            borderColor: safeTest.completed ? '#22c55e' : '#d1d5db',\n          }}\n          transition={{ type: 'spring', stiffness: 400, damping: 15 }}\n        >\n          {safeTest.completed && (\n            <motion.svg\n              initial={{ scale: 0, rotate: -90 }}\n              animate={{ scale: 1, rotate: 0 }}\n              transition={{ type: 'spring', stiffness: 500, damping: 20 }}\n              xmlns=\"http://www.w3.org/2000/svg\"\n              className=\"h-4 w-4 text-white\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              stroke=\"currentColor\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={3}\n                d=\"M5 13l4 4L19 7\"\n              />\n            </motion.svg>\n          )}\n        </motion.button>\n\n        {/* Text content with conditional styling for better readability */}\n        <div className=\"flex-1 min-w-0\">\n          <div className=\"flex items-center gap-2\">\n            <h4\n              className={`font-semibold truncate ${safeTest.completed ? 'text-gray-800' : 'text-gray-900'}`}\n            >\n              {safeTest.title}\n            </h4>\n          </div>\n          <p className={`text-sm mt-1 ${safeTest.completed ? 'text-gray-600' : 'text-gray-600'}`}>\n            {safeTest.mcqs} MCQs\n          </p>\n        </div>\n      </div>\n\n      {/* Controls for editing and navigation */}\n      <div className=\"flex-shrink-0 ml-2\">\n        {isEditMode ? (\n          <button\n            className=\"p-1.5 rounded-full text-gray-400 hover:text-red-500 hover:bg-red-100 transition-colors duration-200\"\n            onClick={(e) => {\n              e.stopPropagation();\n              onDelete(safeTest.subject, safeTest.title);\n            }}\n            aria-label=\"Delete test\"\n          >\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              width=\"18\"\n              height=\"18\"\n              viewBox=\"0 0 24 24\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeWidth=\"2\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n            >\n              <path d=\"M3 6h18\"></path>\n              <path d=\"M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6\"></path>\n              <path d=\"M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2\"></path>\n              <line x1=\"10\" y1=\"11\" x2=\"10\" y2=\"17\"></line>\n              <line x1=\"14\" y1=\"11\" x2=\"14\" y2=\"17\"></line>\n            </svg>\n          </button>\n        ) : (\n          test.link && (\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              width=\"20\"\n              height=\"20\"\n              viewBox=\"0 0 24 24\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeWidth=\"2\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              className=\"text-gray-400\"\n            >\n              <polyline points=\"9 18 15 12 9 6\"></polyline>\n            </svg>\n          )\n        )}\n      </div>\n    </div>\n  );\n});\n\nexport default TestCard;\n","// src/pages/TestsCompletedPage.js\nimport React, { useState, useCallback, useMemo, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport {\n  FaPlus,\n  FaPen,\n  FaTrash,\n  FaCheck,\n  FaTimes,\n  FaChevronDown,\n  FaChevronUp,\n} from 'react-icons/fa';\nimport { useAdmin } from '../context/AdminContext';\nimport { useTestData } from '../context/TestDataContext';\nimport TestCard from '../components/TestCard';\nimport { useHandlers } from '../context/HandlerContext';\nimport AddModal from '../components/AddModal';\n\nconst TestsCompletedPage = React.memo(\n  ({ currentSelectedSubject, setCurrentSelectedSubject, showNotification }) => {\n    const { testData, handleAddTest } = useTestData();\n    const handlers = useHandlers();\n    const { isAdmin } = useAdmin();\n    const [trophyEditMode, setTrophyEditMode] = useState(false);\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [searchQuery, setSearchQuery] = useState('');\n\n    const subjects = useMemo(() => Object.keys(testData), [testData]);\n\n    useEffect(() => {\n      if (\n        subjects.length > 0 &&\n        (!currentSelectedSubject || !subjects.includes(currentSelectedSubject))\n      ) {\n        setCurrentSelectedSubject(subjects[0]);\n      } else if (subjects.length === 0 && currentSelectedSubject !== '') {\n        setCurrentSelectedSubject('');\n      }\n    }, [subjects, currentSelectedSubject, setCurrentSelectedSubject]);\n\n    const openAddTestModal = React.useCallback(() => {\n      setIsModalOpen(true);\n    }, []);\n\n    const handleCloseModal = React.useCallback(() => {\n      setIsModalOpen(false);\n    }, []);\n\n    const handleToggleEditMode = React.useCallback(() => {\n      setTrophyEditMode((prev) => !prev);\n    }, []);\n\n    const handleSelectSubject = React.useCallback(\n      (subject) => {\n        setCurrentSelectedSubject(subject);\n      },\n      [setCurrentSelectedSubject]\n    );\n\n    const handleSearchChange = React.useCallback((e) => {\n      setSearchQuery(e.target.value);\n    }, []);\n\n    const handleSaveTest = (data) => {\n      handlers.addTest(currentSelectedSubject, data.title, data.mcqs, data.date, data.link);\n    };\n\n    const handleDeleteTest = useCallback(\n      (subject, title) => {\n        if (isAdmin) {\n          handlers.deleteTest(subject, title);\n        }\n      },\n      [handlers, isAdmin]\n    );\n\n    const onToggleTestCompletion = useCallback(\n      (subject, title, completed) => {\n        if (isAdmin) {\n          handlers.toggleTestCompletion(subject, title, completed);\n        }\n      },\n      [handlers, isAdmin]\n    );\n\n    // Helper function to render a test item\n    const renderTestItem = useCallback(\n      (test) => {\n        const testWithDefaults = {\n          ...test,\n          subject: test.subject || '',\n          title: test.title || 'Untitled Test',\n          mcqs: test.mcqs || 0,\n          completed: test.completed || false,\n          date: test.date || new Date().toISOString().split('T')[0],\n          link: test.link || '',\n          id: test.id || `${test.subject}-${test.title}`,\n        };\n\n        return (\n          <li key={testWithDefaults.id}>\n            <TestCard\n              test={testWithDefaults}\n              isEditMode={trophyEditMode}\n              onDelete={() => handleDeleteTest(testWithDefaults.subject, testWithDefaults.title)}\n            />\n          </li>\n        );\n      },\n      [trophyEditMode, handleDeleteTest]\n    );\n\n    const modalFields = [\n      { name: 'title', label: 'Test Title', placeholder: 'e.g., Mid-term Exam', required: true },\n      {\n        name: 'mcqs',\n        label: 'Number of MCQs',\n        type: 'number',\n        placeholder: 'e.g., 40',\n        required: true,\n      },\n      { name: 'date', label: 'Completion Date', type: 'date', required: true },\n      {\n        name: 'link',\n        label: 'Test Link (Optional)',\n        type: 'url',\n        placeholder: 'https://example.com/test',\n      },\n    ];\n\n    // Global search: if searchQuery, search all subjects\n    const isSearching = searchQuery.trim().length > 0;\n    const filteredTests = isSearching\n      ? Object.entries(testData).flatMap(([subject, tests]) =>\n          tests\n            .filter((test) => test.title.toLowerCase().includes(searchQuery.toLowerCase()))\n            .map((test) => ({ ...test, subject }))\n        )\n      : currentSelectedSubject && testData[currentSelectedSubject]\n        ? testData[currentSelectedSubject].map((test) => ({\n            ...test,\n            subject: currentSelectedSubject,\n          }))\n        : [];\n\n    // Empty state component\n    const EmptyState = () => (\n      <div className=\"flex flex-col items-center justify-center py-12 text-center\">\n        <div className=\"w-24 h-24 mb-4 text-gray-300\">\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            fill=\"none\"\n            viewBox=\"0 0 24 24\"\n            stroke=\"currentColor\"\n          >\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={1}\n              d=\"M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2\"\n            />\n          </svg>\n        </div>\n        <h3 className=\"text-lg font-medium text-gray-900\">No tests added yet!</h3>\n        <p className=\"mt-2 text-sm text-gray-500\">Get started by adding your first test.</p>\n        <button\n        onClick={openAddTestModal}\n        className=\"mt-6 px-4 py-2 rounded-lg shadow-md transition-all duration-200 ease-in-out flex items-center gap-2 bg-blue-600 text-white hover:bg-blue-700 hover:shadow-lg hover:-translate-y-0.5 cursor-pointer\"\n        title=\"Add test\"\n        >\n        <span>Add Test</span>\n        </button>\n      </div>\n    );\n\n    return (\n      <>\n        <div id=\"page-trophy\" className=\"page px-6 py-8\">\n          <header className=\"mb-2\">\n            <h1 className=\"text-3xl font-bold text-gray-900\">Tests</h1>\n          </header>\n          <p className=\"text-gray-500 mb-6\">Completed Tests & Progress</p>\n\n          <div className=\"mb-6\">\n            <input\n              type=\"text\"\n              placeholder=\"Search tests...\"\n              className=\"w-full px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-50\"\n              value={searchQuery}\n              onChange={handleSearchChange}\n              aria-label=\"Search tests\"\n            />\n          </div>\n\n          {/* Hide subject selector and add button during search */}\n          {!isSearching && (\n            <>\n              <div\n                className=\"flex space-x-3 mb-6 overflow-x-auto hide-scrollbar\"\n                id=\"subject-filters-container\"\n              >\n                {subjects.map((subject) => (\n                  <button\n                    key={subject}\n                    className={`subject-filter flex-shrink-0 text-left p-3 rounded-lg transition-colors duration-200\n                                        ${currentSelectedSubject === subject ? 'bg-blue-600 text-white' : 'bg-gray-100 text-gray-700 hover:bg-gray-200'}`}\n                    onClick={() => handleSelectSubject(subject)}\n                  >\n                    <p className=\"font-bold\">{subject}</p>\n                    <p\n                      className={`text-sm ${currentSelectedSubject === subject ? 'opacity-80' : 'text-gray-500'}`}\n                    >\n                      {testData[subject]?.length || 0} Test\n                      {testData[subject]?.length === 1 ? '' : 's'}\n                    </p>\n                  </button>\n                ))}\n              </div>\n\n              {/* Edit Button */}\n              {isAdmin && (\n                <button\n                  onClick={handleToggleEditMode}\n                  className={`\n                fixed bottom-[9.5rem] right-6 z-50\n                bg-blue-50 text-blue-700 font-semibold \n                py-3 px-5 rounded-xl shadow-md \n                flex items-center text-sm\n                transition-all duration-200 ease-in-out\n                ${\n                  !currentSelectedSubject\n                    ? 'opacity-50 cursor-not-allowed'\n                    : 'hover:bg-blue-100 hover:shadow-lg hover:-translate-y-0.5 active:scale-[0.98] active:shadow-sm'\n                }\n              `}\n                  disabled={!currentSelectedSubject}\n                  title={\n                    !currentSelectedSubject\n                      ? 'Select a subject to edit tests'\n                      : trophyEditMode\n                        ? 'Done editing tests'\n                        : 'Edit tests'\n                  }\n                >\n                  {trophyEditMode ? (\n                    <>\n                      <FaCheck className=\"mr-2\" /> Done\n                    </>\n                  ) : (\n                    <>\n                      <FaPen className=\"mr-2\" /> Edit\n                    </>\n                  )}\n                </button>\n              )}\n\n              {isAdmin && (\n                <button\n                  onClick={openAddTestModal}\n                  className={`\n                    fixed bottom-20 right-6 z-50\n                    bg-blue-600 text-white font-semibold \n                    py-4 px-6 rounded-xl shadow-lg \n                    flex items-center\n                    transition-all duration-200 ease-in-out\n                    ${\n                      // Removed !currentSelectedSubject condition here\n                      'hover:bg-blue-700 hover:shadow-xl hover:-translate-y-0.5 active:scale-[0.98] active:shadow-sm'\n                    }\n                  `}\n                  // Removed disabled prop entirely\n                  title={'Add a new test'} // Simplified title\n                >\n                  <FaPlus className=\"mr-2\" />\n                  <span>Add Test</span>\n                </button>\n              )}\n            </>\n          )}\n\n          {/* test list */}\n          <div id=\"test-list-container\" className=\"space-y-6 pb-24\">\n            {isSearching ? (\n              // Show all tests in a single list when searching\n              <div className=\"space-y-3\">\n                <h3 className=\"text-lg font-medium text-gray-900\">Search Results</h3>\n                {filteredTests.length > 0 ? (\n                  <ul className=\"space-y-3\">{filteredTests.map((test) => renderTestItem(test))}</ul>\n                ) : (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    No tests found matching \"{searchQuery}\"\n                  </div>\n                )}\n              </div>\n            ) : (\n              // Group tests by subject when not searching\n              Object.entries(\n                filteredTests.reduce((groups, test) => {\n                  const subject = test.subject || 'Other';\n                  if (!groups[subject]) {\n                    groups[subject] = [];\n                  }\n                  groups[subject].push(test);\n                  return groups;\n                }, {})\n              ).map(([subject, tests]) => (\n                <div key={subject} className=\"space-y-3\">\n                  <h3 className=\"text-lg font-medium text-gray-900\">{subject}</h3>\n                  <ul className=\"space-y-3\">{tests.map((test) => renderTestItem(test))}</ul>\n                </div>\n              ))\n            )}\n\n            {!isSearching && filteredTests.length === 0 && <EmptyState />}\n          </div>\n        </div>\n        <AddModal\n          isOpen={isModalOpen}\n          onClose={handleCloseModal}\n          onSave={handleSaveTest}\n          title={`Add New Test to ${currentSelectedSubject}`}\n          fields={modalFields}\n          showNotification={showNotification}\n        />\n      </>\n    );\n  }\n);\n\nexport default TestsCompletedPage;\n","// src/components/AddModal.js\nimport React, { useState, useEffect } from 'react';\nimport { useHandlers } from '../context/HandlerContext';\nimport { AnimatePresence, motion } from 'framer-motion';\n\nconst EMPTY_INITIAL_STATE = {};\n\nconst AddModal = ({\n  isOpen,\n  onClose,\n  onSave,\n  title,\n  fields,\n  initialState = EMPTY_INITIAL_STATE,\n}) => {\n  const handlers = useHandlers();\n  const [formData, setFormData] = useState({});\n\n  useEffect(() => {\n    if (isOpen) {\n      const initialData = fields.reduce((acc, field) => {\n        acc[field.name] = initialState[field.name] || field.defaultValue || '';\n        return acc;\n      }, {});\n      setFormData(initialData);\n    } else {\n      setFormData({});\n    }\n  }, [isOpen, fields, initialState]);\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData((prev) => ({ ...prev, [name]: value }));\n  };\n\n  const handleSaveClick = () => {\n    for (const field of fields) {\n      if (field.required && !formData[field.name]) {\n        if (handlers.showNotification) {\n          handlers.showNotification(`${field.label} is required.`, 'error');\n        } else {\n          console.error(`${field.label} is required.`);\n        }\n        return;\n      }\n    }\n    if (onSave) {\n      onSave(formData);\n    } else if (handlers.addTimetableEntry) {\n      handlers.addTimetableEntry(formData);\n    }\n    onClose();\n  };\n\n  return (\n    <AnimatePresence>\n      {isOpen && (\n        <motion.div\n          className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\"\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n          transition={{ duration: 0.22 }}\n          onClick={onClose}\n        >\n          <div\n            onClick={(e) => e.stopPropagation()}\n            className=\"bg-white rounded-lg shadow-xl p-6 w-full max-w-md mx-auto relative\"\n          >\n            <h2 className=\"text-2xl font-bold mb-4 text-gray-800\">{title}</h2>\n            <div className=\"space-y-4\">\n              {fields.map((field) => (\n                <div key={field.name} className=\"flex flex-col\">\n                  <label\n                    htmlFor={field.name}\n                    className=\"block text-sm font-medium text-gray-700 mb-1\"\n                  >\n                    {field.label}\n                    {field.required && <span className=\"text-red-500\">*</span>}\n                  </label>\n                  {field.type === 'textarea' ? (\n                    <textarea\n                      id={field.name}\n                      name={field.name}\n                      placeholder={field.placeholder || ''}\n                      value={formData[field.name] || ''}\n                      onChange={handleChange}\n                      disabled={field.disabled || false}\n                      rows=\"3\"\n                      className=\"w-full px-4 py-2 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-50 disabled:bg-gray-200\"\n                    />\n                  ) : field.type === 'select' ? (\n                    <select\n                      id={field.name}\n                      name={field.name}\n                      value={formData[field.name] || ''}\n                      onChange={handleChange}\n                      disabled={field.disabled || false}\n                      className=\"w-full px-4 py-2 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-50 disabled:bg-gray-200\"\n                    >\n                      {field.options &&\n                        field.options.map((option) => (\n                          <option key={option.value} value={option.value}>\n                            {option.label}\n                          </option>\n                        ))}\n                    </select>\n                  ) : (\n                    <input\n                      type={field.type || 'text'}\n                      id={field.name}\n                      name={field.name}\n                      placeholder={field.placeholder || ''}\n                      value={formData[field.name] || ''}\n                      onChange={handleChange}\n                      disabled={field.disabled || false}\n                      className=\"w-full px-4 py-2 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-50 disabled:bg-gray-200\"\n                    />\n                  )}\n                </div>\n              ))}\n            </div>\n            <div className=\"mt-6 flex justify-end space-x-3\">\n              <button\n                onClick={onClose}\n                className=\"px-4 py-2 bg-gray-200 text-gray-700 font-bold rounded-lg hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-400 transition duration-300\"\n              >\n                Cancel\n              </button>\n              <button\n                onClick={handleSaveClick}\n                className=\"px-4 py-2 bg-blue-600 text-white font-bold rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition duration-300\"\n              >\n                Save\n              </button>\n            </div>\n          </div>\n        </motion.div>\n      )}\n    </AnimatePresence>\n  );\n};\n\nexport default AddModal;\n"],"names":["React","_ref","test","isEditMode","onDelete","safeTest","title","mcqs","completed","link","date","Date","toISOString","split","subject","handlers","useHandlers","linkClasses","cardClasses","_jsxs","id","className","onClick","handleCardClick","startsWith","window","open","console","warn","children","_jsx","motion","button","e","stopPropagation","toggleTestCompletion","error","whileTap","scale","animate","backgroundColor","borderColor","transition","type","stiffness","damping","svg","initial","rotate","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","width","height","x1","y1","x2","y2","points","currentSelectedSubject","setCurrentSelectedSubject","showNotification","testData","handleAddTest","useTestData","isAdmin","useAdmin","trophyEditMode","setTrophyEditMode","useState","isModalOpen","setIsModalOpen","searchQuery","setSearchQuery","subjects","useMemo","Object","keys","useEffect","length","includes","openAddTestModal","handleCloseModal","handleToggleEditMode","prev","handleSelectSubject","handleSearchChange","target","value","handleDeleteTest","useCallback","deleteTest","renderTestItem","testWithDefaults","TestCard","isSearching","trim","filteredTests","entries","flatMap","_ref2","tests","filter","toLowerCase","map","EmptyState","_Fragment","placeholder","onChange","_testData$subject","_testData$subject2","disabled","FaCheck","FaPen","FaPlus","reduce","groups","push","_ref3","AddModal","isOpen","onClose","onSave","data","addTest","fields","name","label","required","EMPTY_INITIAL_STATE","initialState","formData","setFormData","initialData","acc","field","defaultValue","handleChange","AnimatePresence","div","opacity","exit","duration","htmlFor","rows","options","option","handleSaveClick","addTimetableEntry"],"sourceRoot":""}