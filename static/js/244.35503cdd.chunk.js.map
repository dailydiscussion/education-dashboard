{"version":3,"file":"static/js/244.35503cdd.chunk.js","mappings":"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","sources":["components/AddModal.js","components/TestCard.js","pages/TestsCompletedPage.js"],"sourcesContent":["// src/components/AddModal.js\nimport React, { useState, useEffect } from 'react';\nimport { useHandlers } from '../context/HandlerContext';\nimport { AnimatePresence, motion } from 'framer-motion';\n\nconst EMPTY_INITIAL_STATE = {};\n\nconst AddModal = ({\n  isOpen,\n  onClose,\n  onSave,\n  title,\n  fields,\n  initialState = EMPTY_INITIAL_STATE,\n}) => {\n  const handlers = useHandlers();\n  const [formData, setFormData] = useState({});\n\n  useEffect(() => {\n    if (isOpen) {\n      const initialData = fields.reduce((acc, field) => {\n        acc[field.name] = initialState[field.name] || field.defaultValue || '';\n        return acc;\n      }, {});\n      setFormData(initialData);\n    } else {\n      setFormData({});\n    }\n  }, [isOpen, fields, initialState]);\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData((prev) => ({ ...prev, [name]: value }));\n  };\n\n  const handleSaveClick = () => {\n    for (const field of fields) {\n      if (field.required && !formData[field.name]) {\n        if (handlers.showNotification) {\n          handlers.showNotification(`${field.label} is required.`, 'error');\n        } else {\n          console.error(`${field.label} is required.`);\n        }\n        return;\n      }\n    }\n    if (onSave) {\n      onSave(formData);\n    } else if (handlers.addTimetableEntry) {\n      handlers.addTimetableEntry(formData);\n    }\n    onClose();\n  };\n\n  return (\n    <AnimatePresence>\n      {isOpen && (\n        <motion.div\n          className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\"\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n          transition={{ duration: 0.22 }}\n          onClick={onClose}\n        >\n          <div\n            onClick={(e) => e.stopPropagation()}\n            className=\"bg-white rounded-lg shadow-xl p-6 w-full max-w-md mx-auto relative\"\n          >\n            <h2 className=\"text-2xl font-bold mb-4 text-gray-800\">{title}</h2>\n            <div className=\"space-y-4\">\n              {fields.map((field) => (\n                <div key={field.name} className=\"flex flex-col\">\n                  <label\n                    htmlFor={field.name}\n                    className=\"block text-sm font-medium text-gray-700 mb-1\"\n                  >\n                    {field.label}\n                    {field.required && <span className=\"text-red-500\">*</span>}\n                  </label>\n                  {field.type === 'textarea' ? (\n                    <textarea\n                      id={field.name}\n                      name={field.name}\n                      placeholder={field.placeholder || ''}\n                      value={formData[field.name] || ''}\n                      onChange={handleChange}\n                      disabled={field.disabled || false}\n                      rows=\"3\"\n                      className=\"w-full px-4 py-2 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-50 disabled:bg-gray-200\"\n                    />\n                  ) : field.type === 'select' ? (\n                    <select\n                      id={field.name}\n                      name={field.name}\n                      value={formData[field.name] || ''}\n                      onChange={handleChange}\n                      disabled={field.disabled || false}\n                      className=\"w-full px-4 py-2 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-50 disabled:bg-gray-200\"\n                    >\n                      {field.options &&\n                        field.options.map((option) => (\n                          <option key={option.value} value={option.value}>\n                            {option.label}\n                          </option>\n                        ))}\n                    </select>\n                  ) : (\n                    <input\n                      type={field.type || 'text'}\n                      id={field.name}\n                      name={field.name}\n                      placeholder={field.placeholder || ''}\n                      value={formData[field.name] || ''}\n                      onChange={handleChange}\n                      disabled={field.disabled || false}\n                      className=\"w-full px-4 py-2 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-50 disabled:bg-gray-200\"\n                    />\n                  )}\n                </div>\n              ))}\n            </div>\n            <div className=\"mt-6 flex justify-end space-x-3\">\n              <button\n                onClick={onClose}\n                className=\"px-4 py-2 bg-gray-200 text-gray-700 font-bold rounded-lg hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-400 transition duration-300\"\n              >\n                Cancel\n              </button>\n              <button\n                onClick={handleSaveClick}\n                className=\"px-4 py-2 bg-blue-600 text-white font-bold rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition duration-300\"\n              >\n                Save\n              </button>\n            </div>\n          </div>\n        </motion.div>\n      )}\n    </AnimatePresence>\n  );\n};\n\nexport default AddModal;\n","// src/components/TestCard.js\nimport React from 'react';\nimport { useHandlers } from '../context/HandlerContext';\nimport { motion } from 'framer-motion';\n\nconst TestCard = React.memo(({ test, isEditMode, onDelete }) => {\n  // Ensure test object has all required properties with defaults\n  const safeTest = {\n    ...test,\n    title: test?.title || 'Untitled Test',\n    mcqs: test?.mcqs || 0,\n    completed: test?.completed || false,\n    link: test?.link || '',\n    date: test?.date || new Date().toISOString().split('T')[0],\n    subject: test?.subject || '',\n  };\n  const handlers = useHandlers();\n  const handleCardClick = () => {\n    // Allow clicking the card to open a link only if not in edit mode and has a valid link\n    if (!isEditMode && safeTest.link) {\n      if (safeTest.link.startsWith('http')) {\n        window.open(safeTest.link, '_blank');\n      } else {\n        // Log a warning for developers if the link is malformed\n        console.warn(\n          `Invalid link for ${safeTest.title}: ${safeTest.link}. Must start with http:// or https://`\n        );\n      }\n    }\n  };\n\n  const handleCheckboxClick = (e) => {\n    // Prevent the card's click event from firing when the checkbox is clicked\n    e.stopPropagation();\n    if (safeTest.subject && safeTest.title) {\n      handlers.toggleTestCompletion(safeTest.subject, safeTest.title, !safeTest.completed);\n    } else {\n      console.error('Cannot toggle test completion: subject or title is missing');\n    }\n  };\n\n  // Define base classes for the card for consistency\n  const baseCardClasses =\n    'relative p-4 rounded-lg flex justify-between items-center transition-all duration-300';\n\n  // Define specific classes for the completed state\n  const completedClasses = 'bg-green-100';\n\n  // Define specific classes for the default (incomplete) state\n  const defaultClasses = 'bg-gray-50';\n\n  // Add hover effects only if the card has a link and is not in edit mode\n  const linkClasses =\n    safeTest.link && !isEditMode ? 'cursor-pointer hover:shadow-md hover:-translate-y-1' : '';\n\n  // Combine all classes based on the component's state\n  const cardClasses = `${baseCardClasses} ${safeTest.completed ? completedClasses : defaultClasses} ${linkClasses}`;\n\n  return (\n    <div\n      id={`trophy-test-item-${safeTest.subject}-${safeTest.title}`}\n      className={cardClasses}\n      onClick={handleCardClick}\n      aria-label={safeTest.completed ? 'Completed test' : 'Incomplete test'}\n    >\n      <div className=\"flex items-center flex-grow min-w-0\">\n        {/* The interactive checkbox for toggling completion status */}\n        <motion.button\n          onClick={handleCheckboxClick}\n          className={`flex-shrink-0 w-6 h-6 rounded-full border-2 flex items-center justify-center mr-4`}\n          aria-label={safeTest.completed ? 'Mark as incomplete' : 'Mark as complete'}\n          whileTap={{ scale: 0.85 }}\n          animate={{\n            scale: safeTest.completed ? 1.1 : 1,\n            backgroundColor: safeTest.completed ? '#22c55e' : '#ffffff00',\n            borderColor: safeTest.completed ? '#22c55e' : '#d1d5db',\n          }}\n          transition={{ type: 'spring', stiffness: 400, damping: 15 }}\n        >\n          {safeTest.completed && (\n            <motion.svg\n              initial={{ scale: 0, rotate: -90 }}\n              animate={{ scale: 1, rotate: 0 }}\n              transition={{ type: 'spring', stiffness: 500, damping: 20 }}\n              xmlns=\"http://www.w3.org/2000/svg\"\n              className=\"h-4 w-4 text-white\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              stroke=\"currentColor\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={3}\n                d=\"M5 13l4 4L19 7\"\n              />\n            </motion.svg>\n          )}\n        </motion.button>\n\n        {/* Text content with conditional styling for better readability */}\n        <div className=\"flex-1 min-w-0\">\n          <div className=\"flex items-center gap-2\">\n            <h4\n              className={`font-semibold truncate ${safeTest.completed ? 'text-gray-800' : 'text-gray-900'}`}\n            >\n              {safeTest.title}\n            </h4>\n          </div>\n          <p className={`text-sm mt-1 ${safeTest.completed ? 'text-gray-600' : 'text-gray-600'}`}>\n            {safeTest.mcqs} MCQs\n          </p>\n        </div>\n      </div>\n\n      {/* Controls for editing and navigation */}\n      <div className=\"flex-shrink-0 ml-2\">\n        {isEditMode ? (\n          <button\n            className=\"p-1.5 rounded-full text-gray-400 hover:text-red-500 hover:bg-red-100 transition-colors duration-200\"\n            onClick={(e) => {\n              e.stopPropagation();\n              onDelete(safeTest.subject, safeTest.title);\n            }}\n            aria-label=\"Delete test\"\n          >\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              width=\"18\"\n              height=\"18\"\n              viewBox=\"0 0 24 24\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeWidth=\"2\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n            >\n              <path d=\"M3 6h18\"></path>\n              <path d=\"M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6\"></path>\n              <path d=\"M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2\"></path>\n              <line x1=\"10\" y1=\"11\" x2=\"10\" y2=\"17\"></line>\n              <line x1=\"14\" y1=\"11\" x2=\"14\" y2=\"17\"></line>\n            </svg>\n          </button>\n        ) : (\n          test.link && (\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              width=\"20\"\n              height=\"20\"\n              viewBox=\"0 0 24 24\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeWidth=\"2\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              className=\"text-gray-400\"\n            >\n              <polyline points=\"9 18 15 12 9 6\"></polyline>\n            </svg>\n          )\n        )}\n      </div>\n    </div>\n  );\n});\n\nexport default TestCard;\n","// src/pages/TestsCompletedPage.js\nimport React, { useState, useCallback, useMemo, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport {\n  FaPlus,\n  FaPen,\n  FaTrash,\n  FaCheck,\n  FaTimes,\n  FaChevronDown,\n  FaChevronUp,\n} from 'react-icons/fa';\nimport { useAdmin } from '../context/AdminContext';\nimport { useTestData } from '../context/TestDataContext';\nimport TestCard from '../components/TestCard';\nimport { useHandlers } from '../context/HandlerContext';\nimport AddModal from '../components/AddModal';\n\nconst TestsCompletedPage = React.memo(\n  ({ currentSelectedSubject, setCurrentSelectedSubject, showNotification }) => {\n    const { testData, handleAddTest } = useTestData();\n    const handlers = useHandlers();\n    const { isAdmin } = useAdmin();\n    const [trophyEditMode, setTrophyEditMode] = useState(false);\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [searchQuery, setSearchQuery] = useState('');\n\n    const subjects = useMemo(() => Object.keys(testData), [testData]);\n\n    useEffect(() => {\n      if (\n        subjects.length > 0 &&\n        (!currentSelectedSubject || !subjects.includes(currentSelectedSubject))\n      ) {\n        setCurrentSelectedSubject(subjects[0]);\n      } else if (subjects.length === 0 && currentSelectedSubject !== '') {\n        setCurrentSelectedSubject('');\n      }\n    }, [subjects, currentSelectedSubject, setCurrentSelectedSubject]);\n\n    const openAddTestModal = React.useCallback(() => {\n      setIsModalOpen(true);\n    }, []);\n\n    const handleCloseModal = React.useCallback(() => {\n      setIsModalOpen(false);\n    }, []);\n\n    const handleToggleEditMode = React.useCallback(() => {\n      setTrophyEditMode((prev) => !prev);\n    }, []);\n\n    const handleSelectSubject = React.useCallback(\n      (subject) => {\n        setCurrentSelectedSubject(subject);\n      },\n      [setCurrentSelectedSubject]\n    );\n\n    const handleSearchChange = React.useCallback((e) => {\n      setSearchQuery(e.target.value);\n    }, []);\n\n    const handleSaveTest = (data) => {\n      handlers.addTest(currentSelectedSubject, data.title, data.mcqs, data.date, data.link);\n    };\n\n    const handleDeleteTest = useCallback(\n      (subject, title) => {\n        if (isAdmin) {\n          handlers.deleteTest(subject, title);\n        }\n      },\n      [handlers, isAdmin]\n    );\n\n    const onToggleTestCompletion = useCallback(\n      (subject, title, completed) => {\n        if (isAdmin) {\n          handlers.toggleTestCompletion(subject, title, completed);\n        }\n      },\n      [handlers, isAdmin]\n    );\n\n    // Helper function to render a test item\n    const renderTestItem = useCallback(\n      (test) => {\n        const testWithDefaults = {\n          ...test,\n          subject: test.subject || '',\n          title: test.title || 'Untitled Test',\n          mcqs: test.mcqs || 0,\n          completed: test.completed || false,\n          date: test.date || new Date().toISOString().split('T')[0],\n          link: test.link || '',\n          id: test.id || `${test.subject}-${test.title}`,\n        };\n\n        return (\n          <li key={testWithDefaults.id}>\n            <TestCard\n              test={testWithDefaults}\n              isEditMode={trophyEditMode}\n              onDelete={() => handleDeleteTest(testWithDefaults.subject, testWithDefaults.title)}\n            />\n          </li>\n        );\n      },\n      [trophyEditMode, handleDeleteTest]\n    );\n\n    const modalFields = [\n      { name: 'title', label: 'Test Title', placeholder: 'e.g., Mid-term Exam', required: true },\n      {\n        name: 'mcqs',\n        label: 'Number of MCQs',\n        type: 'number',\n        placeholder: 'e.g., 40',\n        required: true,\n      },\n      { name: 'date', label: 'Completion Date', type: 'date', required: true },\n      {\n        name: 'link',\n        label: 'Test Link (Optional)',\n        type: 'url',\n        placeholder: 'https://example.com/test',\n      },\n    ];\n\n    // Global search: if searchQuery, search all subjects\n    const isSearching = searchQuery.trim().length > 0;\n    const filteredTests = isSearching\n      ? Object.entries(testData).flatMap(([subject, tests]) =>\n          tests\n            .filter((test) => test.title.toLowerCase().includes(searchQuery.toLowerCase()))\n            .map((test) => ({ ...test, subject }))\n        )\n      : currentSelectedSubject && testData[currentSelectedSubject]\n        ? testData[currentSelectedSubject].map((test) => ({\n            ...test,\n            subject: currentSelectedSubject,\n          }))\n        : [];\n\n    // Empty state component\n    const EmptyState = () => (\n      <div className=\"flex flex-col items-center justify-center py-12 text-center\">\n        <div className=\"w-24 h-24 mb-4 text-gray-300\">\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            fill=\"none\"\n            viewBox=\"0 0 24 24\"\n            stroke=\"currentColor\"\n          >\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={1}\n              d=\"M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2\"\n            />\n          </svg>\n        </div>\n        <h3 className=\"text-lg font-medium text-gray-900\">No tests added yet!</h3>\n        <p className=\"mt-2 text-sm text-gray-500\">Get started by adding your first test.</p>\n        <button\n        onClick={openAddTestModal}\n        className=\"mt-6 px-4 py-2 rounded-lg shadow-md transition-all duration-200 ease-in-out flex items-center gap-2 bg-blue-600 text-white hover:bg-blue-700 hover:shadow-lg hover:-translate-y-0.5 cursor-pointer\"\n        title=\"Add test\"\n        >\n        <span>Add Test</span>\n        </button>\n      </div>\n    );\n\n    return (\n      <>\n        <div id=\"page-trophy\" className=\"page px-6 py-8\">\n          <header className=\"mb-2\">\n            <h1 className=\"text-3xl font-bold text-gray-900\">Tests</h1>\n          </header>\n          <p className=\"text-gray-500 mb-6\">Completed Tests & Progress</p>\n\n          <div className=\"mb-6\">\n            <input\n              type=\"text\"\n              placeholder=\"Search tests...\"\n              className=\"w-full px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-50\"\n              value={searchQuery}\n              onChange={handleSearchChange}\n              aria-label=\"Search tests\"\n            />\n          </div>\n\n          {/* Hide subject selector and add button during search */}\n          {!isSearching && (\n            <>\n              <div\n                className=\"flex space-x-3 mb-6 overflow-x-auto hide-scrollbar\"\n                id=\"subject-filters-container\"\n              >\n                {subjects.map((subject) => (\n                  <button\n                    key={subject}\n                    className={`subject-filter flex-shrink-0 text-left p-3 rounded-lg transition-colors duration-200\n                                        ${currentSelectedSubject === subject ? 'bg-blue-600 text-white' : 'bg-gray-100 text-gray-700 hover:bg-gray-200'}`}\n                    onClick={() => handleSelectSubject(subject)}\n                  >\n                    <p className=\"font-bold\">{subject}</p>\n                    <p\n                      className={`text-sm ${currentSelectedSubject === subject ? 'opacity-80' : 'text-gray-500'}`}\n                    >\n                      {testData[subject]?.length || 0} Test\n                      {testData[subject]?.length === 1 ? '' : 's'}\n                    </p>\n                  </button>\n                ))}\n              </div>\n\n              {/* Edit Button */}\n              {isAdmin && (\n                <button\n                  onClick={handleToggleEditMode}\n                  className={`\n                fixed bottom-[9.5rem] right-6 z-50\n                bg-blue-50 text-blue-700 font-semibold \n                py-3 px-5 rounded-xl shadow-md \n                flex items-center text-sm\n                transition-all duration-200 ease-in-out\n                ${\n                  !currentSelectedSubject\n                    ? 'opacity-50 cursor-not-allowed'\n                    : 'hover:bg-blue-100 hover:shadow-lg hover:-translate-y-0.5 active:scale-[0.98] active:shadow-sm'\n                }\n              `}\n                  disabled={!currentSelectedSubject}\n                  title={\n                    !currentSelectedSubject\n                      ? 'Select a subject to edit tests'\n                      : trophyEditMode\n                        ? 'Done editing tests'\n                        : 'Edit tests'\n                  }\n                >\n                  {trophyEditMode ? (\n                    <>\n                      <FaCheck className=\"mr-2\" /> Done\n                    </>\n                  ) : (\n                    <>\n                      <FaPen className=\"mr-2\" /> Edit\n                    </>\n                  )}\n                </button>\n              )}\n\n              {isAdmin && (\n                <button\n                  onClick={openAddTestModal}\n                  className={`\n                    fixed bottom-20 right-6 z-50\n                    bg-blue-600 text-white font-semibold \n                    py-4 px-6 rounded-xl shadow-lg \n                    flex items-center\n                    transition-all duration-200 ease-in-out\n                    ${\n                      // Removed !currentSelectedSubject condition here\n                      'hover:bg-blue-700 hover:shadow-xl hover:-translate-y-0.5 active:scale-[0.98] active:shadow-sm'\n                    }\n                  `}\n                  // Removed disabled prop entirely\n                  title={'Add a new test'} // Simplified title\n                >\n                  <FaPlus className=\"mr-2\" />\n                  <span>Add Test</span>\n                </button>\n              )}\n            </>\n          )}\n\n          {/* test list */}\n          <div id=\"test-list-container\" className=\"space-y-6 pb-24\">\n            {isSearching ? (\n              // Show all tests in a single list when searching\n              <div className=\"space-y-3\">\n                <h3 className=\"text-lg font-medium text-gray-900\">Search Results</h3>\n                {filteredTests.length > 0 ? (\n                  <ul className=\"space-y-3\">{filteredTests.map((test) => renderTestItem(test))}</ul>\n                ) : (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    No tests found matching \"{searchQuery}\"\n                  </div>\n                )}\n              </div>\n            ) : (\n              // Group tests by subject when not searching\n              Object.entries(\n                filteredTests.reduce((groups, test) => {\n                  const subject = test.subject || 'Other';\n                  if (!groups[subject]) {\n                    groups[subject] = [];\n                  }\n                  groups[subject].push(test);\n                  return groups;\n                }, {})\n              ).map(([subject, tests]) => (\n                <div key={subject} className=\"space-y-3\">\n                  <h3 className=\"text-lg font-medium text-gray-900\">{subject}</h3>\n                  <ul className=\"space-y-3\">{tests.map((test) => renderTestItem(test))}</ul>\n                </div>\n              ))\n            )}\n\n            {!isSearching && filteredTests.length === 0 && <EmptyState />}\n          </div>\n        </div>\n        <AddModal\n          isOpen={isModalOpen}\n          onClose={handleCloseModal}\n          onSave={handleSaveTest}\n          title={`Add New Test to ${currentSelectedSubject}`}\n          fields={modalFields}\n          showNotification={showNotification}\n        />\n      </>\n    );\n  }\n);\n\nexport default TestsCompletedPage;\n"],"names":["EMPTY_INITIAL_STATE","_ref","isOpen","onClose","onSave","title","fields","initialState","handlers","useHandlers","formData","setFormData","useState","useEffect","initialData","reduce","acc","field","name","defaultValue","handleChange","e","value","target","prev","_objectSpread","_jsx","AnimatePresence","children","motion","div","className","initial","opacity","animate","exit","transition","duration","onClick","_jsxs","stopPropagation","map","htmlFor","label","required","type","id","placeholder","onChange","disabled","rows","options","option","handleSaveClick","showNotification","concat","console","error","addTimetableEntry","React","test","isEditMode","onDelete","safeTest","mcqs","completed","link","date","Date","toISOString","split","subject","linkClasses","cardClasses","handleCardClick","startsWith","window","open","warn","button","toggleTestCompletion","whileTap","scale","backgroundColor","borderColor","stiffness","damping","svg","rotate","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","width","height","x1","y1","x2","y2","points","currentSelectedSubject","setCurrentSelectedSubject","testData","handleAddTest","useTestData","isAdmin","useAdmin","trophyEditMode","setTrophyEditMode","isModalOpen","setIsModalOpen","searchQuery","setSearchQuery","subjects","useMemo","Object","keys","length","includes","openAddTestModal","handleCloseModal","handleToggleEditMode","handleSelectSubject","handleSearchChange","handleDeleteTest","useCallback","deleteTest","renderTestItem","testWithDefaults","TestCard","isSearching","trim","filteredTests","entries","flatMap","_ref2","tests","filter","toLowerCase","EmptyState","_Fragment","_testData$subject","_testData$subject2","FaCheck","FaPen","FaPlus","groups","push","_ref3","AddModal","data","addTest"],"sourceRoot":""}