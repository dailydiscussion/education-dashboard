{"version":3,"file":"static/js/3.03d80e7b.chunk.js","mappings":"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","sources":["components/TimetableEventCard.js","components/EditTimetableModal.js","pages/TimetablePage.js","components/EmptyState.js","components/AddModal.js","../node_modules/@heroicons/react/24/outline/esm/ExclamationCircleIcon.js"],"sourcesContent":["/**\n * @file TimetableEventCard.js\n * @description A card component that displays a single timetable event with interactive controls.\n * It shows event details, status, and provides actions like edit, check/uncheck, and delete.\n * \n * @module components/TimetableEventCard\n * @requires react\n * @requires framer-motion\n * @requires ../context/HandlerContext\n */\n\nimport React from 'react';\nimport { useHandlers } from '../context/HandlerContext';\nimport { motion } from 'framer-motion';\n\n/**\n * @typedef {Object} TimetableEvent\n * @property {string} id - Unique identifier for the event\n * @property {string} subject - The subject of the event\n * @property {string} topic - The topic or title of the event\n * @property {string} date - The date of the event in 'YYYY-MM-DD' format\n * @property {string} time - The time of the event in 'HH:MM' format\n * @property {boolean} [checked] - Whether the event is marked as completed\n * @property {string} [notificationId] - ID for any scheduled notifications\n */\n\n/**\n * @typedef {Object} EventStatus\n * @property {string} text - Display text for the status\n * @property {string} colorClass - Tailwind CSS class for text color\n * @property {string} dotClass - Tailwind CSS class for status dot\n */\n\n/**\n * TimetableEventCard Component\n * \n * @component\n * @param {Object} props - Component props\n * @param {TimetableEvent} props.event - The event data to display\n * @param {TimetableEvent} [props.nextEvent] - The next event in the timetable (used for status calculation)\n * @param {boolean} [props.isEditMode=false] - Whether the card is in edit mode\n * @param {Function} [props.onEdit] - Callback function when edit button is clicked\n * @param {string} [props.status] - Explicit status override (optional)\n * @returns {React.ReactElement} A card element displaying the timetable event\n * \n * @example\n * <TimetableEventCard \n *   event={eventData}\n *   nextEvent={nextEventData}\n *   isEditMode={false}\n *   onEdit={handleEdit}\n * />\n */\nconst TimetableEventCard = React.memo(({ event, nextEvent, isEditMode = false, onEdit, status }) => {\n    const handlers = useHandlers();\n\n    // Removed sortedEvents useMemo as this component now receives a single event.\n    // Sorting is handled in TimetablePage.js before passing individual events.\n\n    // Removed formatDateForDisplay as date navigation is no longer in this component.\n    // Removed handlePrevDay and handleNextDay as date navigation is no longer in this component.\n\n    /**\n     * Calculates the study day for a given date, considering a day to be from 4am to 4am\n     * \n     * @private\n     * @param {Date|string} dateObj - The date to calculate the study day for\n     * @returns {Date} The start of the study day (previous day if before 4am)\n     */\n    function getStudyDay(dateObj) {\n        const studyDay = new Date(dateObj);\n        if (studyDay.getHours() < 4) {\n            studyDay.setDate(studyDay.getDate() - 1);\n        }\n        studyDay.setHours(0, 0, 0, 0);\n        return studyDay;\n    }\n\n    /**\n     * Determines the status of an event (Completed, Missed, or Pending).\n     * \n     * @private\n     * @param {TimetableEvent} event - The event to determine status for\n     * @param {TimetableEvent} nextEvent - The next event in the timetable\n     * @param {Date} [now=new Date()] - The current date and time for reference\n     * @returns {EventStatus} An object with status text and styling classes\n     * \n     * @example\n     * const status = getEventStatus(event, nextEvent);\n     * // Returns: { text: 'Upcoming', colorClass: 'text-blue-600', dotClass: 'bg-blue-500' }\n     */\n    const getEventStatus = (event, nextEvent, now = new Date()) => {\n        if (event.checked) {\n            return { text: 'Completed', colorClass: 'text-green-600', dotClass: 'bg-green-500' };\n        }\n        const eventStart = new Date(`${event.date}T${event.time}`);\n        const DEFAULT_DURATION_MINUTES = 180;\n        const eventEnd = new Date(eventStart.getTime() + DEFAULT_DURATION_MINUTES * 60000);\n        const nextStart = nextEvent ? new Date(`${nextEvent.date}T${nextEvent.time}`) : null;\n        const studyDay = getStudyDay(eventStart);\n        const studyDayEnd = new Date(studyDay);\n        studyDayEnd.setDate(studyDay.getDate() + 1);\n        studyDayEnd.setHours(4, 0, 0, 0); // 4am next day\n        // If now is after study day end, missed\n        if (now > studyDayEnd) {\n            return { text: 'Missed', colorClass: 'text-red-600', dotClass: 'bg-red-500' };\n        }\n        // If now is before event start time\n        if (now < eventStart) {\n            return { text: 'Upcoming', colorClass: 'text-orange-600', dotClass: 'bg-orange-400' };\n        }\n        // If now is between event start and event end: Live\n        if (now >= eventStart && now < eventEnd) {\n            return { text: 'Live', colorClass: 'text-cyan-600', dotClass: 'bg-cyan-500' };\n        }\n        // If now is after event end and before next event's start (or no next event): Missed\n        if (now >= eventEnd && (!nextStart || now < nextStart)) {\n            return { text: 'Missed', colorClass: 'text-red-600', dotClass: 'bg-red-500' };\n        }\n        // If now is after next event's start: Missed\n        if (nextStart && now >= nextStart) {\n            return { text: 'Missed', colorClass: 'text-red-600', dotClass: 'bg-red-500' };\n        }\n        // Default fallback\n        return { text: 'Upcoming', colorClass: 'text-orange-600', dotClass: 'bg-orange-400' };\n\n\n    };\n\n    // Determine status object based on props or calculate it\n    /** @type {EventStatus} */\n    let statusObj;\n    \n    // If status prop is provided, use it for text/color, otherwise fallback to local calculation\n    if (status) {\n        switch (status) {\n            case 'Completed':\n                statusObj = { text: 'Completed', colorClass: 'text-green-600', dotClass: 'bg-green-500' };\n                break;\n            case 'Live':\n                statusObj = { text: 'Live', colorClass: 'text-cyan-600', dotClass: 'bg-cyan-500' };\n                break;\n            case 'Missed':\n                statusObj = { text: 'Missed', colorClass: 'text-red-600', dotClass: 'bg-red-500' };\n                break;\n            case 'Pending':\n                statusObj = { text: 'Upcoming', colorClass: 'text-orange-600', dotClass: 'bg-orange-400' };\n                break;\n            default:\n                statusObj = { text: status, colorClass: 'text-gray-600', dotClass: 'bg-gray-300' };\n        }\n    } else {\n        // Calculate status based on event times\n        statusObj = getEventStatus(event, nextEvent, new Date());\n    }\n\n    // Card background: green for completed, gray for normal, red for missed\n    let cardClasses = `flex justify-between items-center p-4 mb-3 rounded-xl`;\n    if (event.checked || (status && status === 'Completed')) {\n        cardClasses += ' bg-green-100'; // Completed: green background\n    } else if ((status && status === 'Missed') || (!status && statusObj.text === 'Missed')) {\n        cardClasses += ' bg-red-100'; // Missed: red background\n    } else {\n        cardClasses += ' bg-gray-50'; // Normal: subtle gray background\n    }\n\n    return (\n        <div\n            id={`timetable-event-${event.id}`}\n            className={cardClasses}\n        >\n            <div>\n                <p className=\"text-sm text-gray-500\">{event.time}</p>\n                <p className={`text-lg font-semibold text-gray-800 ${event.checked ? 'line-through opacity-70' : ''}`}>{event.subject}</p>\n                <h4 className=\"text-base text-gray-600\">{event.topic}</h4>\n                {/* Status with colored dot (always for Live, Pending, Missed; never for Completed) */}\n                {!event.checked && statusObj && (\n                  <span className=\"flex items-center gap-1 mt-1\">\n                    <span className={`inline-block w-3 h-3 rounded-full border border-white flex-shrink-0 mr-2 ${statusObj.dotClass}`}></span>\n                    <span className={`text-sm font-semibold ${statusObj.colorClass}`}>{statusObj.text}</span>\n                  </span>\n                )}\n            </div>\n            <div className=\"flex items-center gap-1\">\n                {isEditMode ? (\n                    <>\n                        {/* Edit button, visible only in edit mode */}\n                        <button\n                            onClick={() => onEdit(event.id)}\n                            className=\"p-1.5 mr-4 rounded-full text-gray-400 hover:text-blue-500 transition-colors duration-200\"\n                            aria-label=\"Edit event\"\n                        >\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                                <path d=\"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\"></path>\n                                <path d=\"M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z\"></path>\n                            </svg>\n                        </button>\n                        {/* Delete button, visible only in edit mode */}\n                        <button\n                            onClick={() => handlers.deleteTimetableEntry(event.id)}\n                            className=\"p-1.5 rounded-full text-gray-400 hover:text-red-500 transition-colors duration-200 mr-2\"\n                            aria-label=\"Delete event\"\n                        >\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                                <path d=\"M3 6h18\"></path>\n                                <path d=\"M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6\"></path>\n                                <path d=\"M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2\"></path>\n                                <line x1=\"10\" y1=\"11\" x2=\"10\" y2=\"17\"></line>\n                                <line x1=\"14\" y1=\"11\" x2=\"14\" y2=\"17\"></line>\n                            </svg>\n                        </button>\n                    </>\n                ) : (\n                    // Check/uncheck button for marking completion, visible only NOT in edit mode\n                    <motion.button\n                        onClick={() => handlers.checkTimetableEntry(event.id)}\n                        className={`w-6 h-6 rounded-full border-2 flex items-center justify-center`}\n                        aria-label={event.checked ? \"Mark as incomplete\" : \"Mark as complete\"}\n                        whileTap={{ scale: 0.85 }}\n                        animate={{\n                            scale: event.checked ? 1.1 : 1,\n                            backgroundColor: event.checked ? '#22c55e' : '#ffffff00',\n                            borderColor: event.checked ? '#22c55e' : '#d1d5db'\n                        }}\n                        transition={{ type: 'spring', stiffness: 400, damping: 15 }}\n                    >\n                        {/* Checkmark icon if event is checked */}\n                        {event.checked && (\n                            <motion.svg\n                                initial={{ scale: 0, rotate: -90 }}\n                                animate={{ scale: 1, rotate: 0 }}\n                                transition={{ type: 'spring', stiffness: 500, damping: 20 }}\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                                className=\"h-4 w-4 text-white\"\n                                fill=\"none\"\n                                viewBox=\"0 0 24 24\"\n                                stroke=\"currentColor\"\n                            >\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={3} d=\"M5 13l4 4L19 7\" />\n                            </motion.svg>\n                        )}\n                    </motion.button>\n                )}\n            </div>\n        </div>\n    );\n});\n\nexport default TimetableEventCard;","// src/components/EditTimetableModal.js\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { AnimatePresence, motion } from 'framer-motion';\nimport { ExclamationCircleIcon } from '@heroicons/react/24/outline';\n\n// Validation functions\nconst validateField = (name, value, allValues = {}) => {\n  switch (name) {\n    case 'subject':\n      if (!value) return 'Subject is required';\n      if (value.length < 2) return 'Subject is too short';\n      return '';\n    case 'topic':\n      if (!value) return 'Topic is required';\n      if (value.length < 2) return 'Topic is too short';\n      return '';\n    case 'date':\n      if (!value) return 'Date is required';\n      if (new Date(value) < new Date(new Date().setHours(0, 0, 0, 0)) && !allValues.createFutureEvent) {\n        return 'Date cannot be in the past';\n      }\n      return '';\n    case 'time':\n      if (!value) return 'Time is required';\n      return '';\n    case 'futureDate':\n      if (allValues.createFutureEvent && !value) return 'Future date is required';\n      if (allValues.createFutureEvent && new Date(value) <= new Date(allValues.date)) {\n        return 'Future date must be after the original date';\n      }\n      return '';\n    default:\n      return '';\n  }\n};\n\nconst EditTimetableModal = ({\n  isOpen,\n  onClose,\n  eventData,\n  onUpdate,\n  showNotification,\n  onAddSimilar,\n}) => {\n  const [formData, setFormData] = useState({\n    subject: '',\n    topic: '',\n    date: '',\n    time: '',\n    createFutureEvent: false,\n    futureDate: ''\n  });\n  \n  const [touched, setTouched] = useState({});\n  const [errors, setErrors] = useState({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  // Initialize form data when modal opens or eventData changes\n  useEffect(() => {\n    if (eventData) {\n      const initialData = {\n        subject: eventData.subject || '',\n        topic: eventData.topic || '',\n        date: eventData.date || '',\n        time: eventData.time || '',\n        createFutureEvent: false,\n        futureDate: ''\n      };\n      setFormData(initialData);\n      setTouched({});\n      setErrors({});\n    }\n  }, [eventData, isOpen]);\n\n  // Validate form\n  const validateForm = useCallback(() => {\n    const newErrors = {};\n    let isValid = true;\n\n    // Validate all fields\n    Object.keys(formData).forEach(field => {\n      if (field === 'futureDate' && !formData.createFutureEvent) return;\n      \n      const error = validateField(field, formData[field], formData);\n      if (error) {\n        newErrors[field] = error;\n        isValid = false;\n      }\n    });\n\n    setErrors(newErrors);\n    return isValid;\n  }, [formData]);\n\n  // Validate field on blur\n  const handleBlur = (field) => {\n    setTouched(prev => ({ ...prev, [field]: true }));\n    const error = validateField(field, formData[field], formData);\n    setErrors(prev => ({ ...prev, [field]: error }));\n  };\n\n  const handleChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    const newValue = type === 'checkbox' ? checked : value;\n    \n    setFormData(prev => ({\n      ...prev,\n      [name]: newValue\n    }));\n    \n    // Clear error when user starts typing (if field was previously touched)\n    if (touched[name] && errors[name]) {\n      const error = validateField(name, newValue, { ...formData, [name]: newValue });\n      setErrors(prev => ({ ...prev, [name]: error }));\n    }\n  };\n\n  const handleUpdateClick = async () => {\n    if (!eventData) {\n      showNotification('No event selected for editing.', 'error');\n      return;\n    }\n\n    // Mark all fields as touched to show all errors\n    const allTouched = Object.keys(formData).reduce((acc, field) => {\n      acc[field] = true;\n      return acc;\n    }, {});\n    setTouched(allTouched);\n    \n    // Validate all fields\n    const isValid = validateForm();\n    \n    if (!isValid) {\n      showNotification('Please fix the errors in the form', 'error');\n      return;\n    }\n\n    setIsSubmitting(true);\n    \n    try {\n      if (formData.createFutureEvent) {\n        await onAddSimilar({\n          ...eventData,\n          subject: formData.subject,\n          topic: formData.topic,\n          date: formData.futureDate,\n          time: formData.time,\n          checked: false,\n        });\n        showNotification('New event created for future date.', 'success');\n      } else {\n        if (eventData.id) {\n          await onUpdate(\n            eventData.id, \n            formData.subject, \n            formData.topic, \n            formData.date, \n            formData.time\n          );\n          showNotification('Event updated successfully.', 'success');\n        }\n      }\n      onClose();\n    } catch (error) {\n      console.error('Error updating event:', error);\n      showNotification(\n        error.message || 'Failed to update event. Please try again.', \n        'error'\n      );\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <AnimatePresence>\n      {isOpen && (\n        <motion.div\n          className=\"fixed inset-0 bg-gray-600 bg-opacity-75 flex items-center justify-center p-4 z-50\"\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n          transition={{ duration: 0.22 }}\n          onClick={onClose}\n        >\n            <div\n            onClick={(e) => e.stopPropagation()}\n            className=\"bg-white rounded-lg shadow-xl w-full max-w-md max-h-[90vh] overflow-y-auto p-6 relative\"\n            >\n\n            <h3 className=\"text-xl font-bold text-gray-800 mb-4\">Edit Study Event</h3>\n\n            <div className=\"mb-3\">\n              <label htmlFor=\"edit-modal-subject\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Subject <span className=\"text-red-500\">*</span>\n              </label>\n              <div className=\"relative\">\n                <input\n                  type=\"text\"\n                  id=\"edit-modal-subject\"\n                  name=\"subject\"\n                  className={`w-full px-4 py-2 rounded-lg border ${\n                    touched.subject && errors.subject\n                      ? 'border-red-300 text-red-900 placeholder-red-300 focus:outline-none focus:ring-red-500 focus:border-red-500'\n                      : 'border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent'\n                  } bg-gray-50`}\n                  placeholder=\"e.g., Anatomy\"\n                  value={formData.subject}\n                  onChange={handleChange}\n                  onBlur={() => handleBlur('subject')}\n                  aria-invalid={touched.subject && errors.subject ? 'true' : 'false'}\n                  aria-describedby=\"subject-error\"\n                />\n                {touched.subject && errors.subject && (\n                  <div className=\"absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none\">\n                    <ExclamationCircleIcon className=\"h-5 w-5 text-red-500\" aria-hidden=\"true\" />\n                  </div>\n                )}\n              </div>\n              {touched.subject && errors.subject && (\n                <p className=\"mt-1 text-sm text-red-600\" id=\"subject-error\">\n                  {errors.subject}\n                </p>\n              )}\n            </div>\n\n            <div className=\"mb-3\">\n              <label htmlFor=\"edit-modal-topic\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Topic <span className=\"text-red-500\">*</span>\n              </label>\n              <div className=\"relative\">\n                <input\n                  type=\"text\"\n                  id=\"edit-modal-topic\"\n                  name=\"topic\"\n                  className={`w-full px-4 py-2 rounded-lg border ${\n                    touched.topic && errors.topic\n                      ? 'border-red-300 text-red-900 placeholder-red-300 focus:outline-none focus:ring-red-500 focus:border-red-500'\n                      : 'border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent'\n                  } bg-gray-50`}\n                  placeholder=\"e.g., Cardiovascular System\"\n                  value={formData.topic}\n                  onChange={handleChange}\n                  onBlur={() => handleBlur('topic')}\n                  aria-invalid={touched.topic && errors.topic ? 'true' : 'false'}\n                  aria-describedby=\"topic-error\"\n                />\n                {touched.topic && errors.topic && (\n                  <div className=\"absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none\">\n                    <ExclamationCircleIcon className=\"h-5 w-5 text-red-500\" aria-hidden=\"true\" />\n                  </div>\n                )}\n              </div>\n              {touched.topic && errors.topic && (\n                <p className=\"mt-1 text-sm text-red-600\" id=\"topic-error\">\n                  {errors.topic}\n                </p>\n              )}\n            </div>\n\n            <div className=\"mb-3\">\n              <label htmlFor=\"edit-modal-date\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Date <span className=\"text-red-500\">*</span>\n              </label>\n              <div className=\"relative\">\n                <input\n                  type=\"date\"\n                  id=\"edit-modal-date\"\n                  name=\"date\"\n                  className={`w-full px-4 py-2 rounded-lg border ${\n                    touched.date && errors.date\n                      ? 'border-red-300 text-red-900 placeholder-red-300 focus:outline-none focus:ring-red-500 focus:border-red-500'\n                      : 'border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent'\n                  } bg-gray-50`}\n                  value={formData.date}\n                  onChange={handleChange}\n                  onBlur={() => handleBlur('date')}\n                  min={new Date().toISOString().split('T')[0]}\n                  aria-invalid={touched.date && errors.date ? 'true' : 'false'}\n                  aria-describedby=\"date-error\"\n                />\n                {touched.date && errors.date && (\n                  <div className=\"absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none\">\n                    <ExclamationCircleIcon className=\"h-5 w-5 text-red-500\" aria-hidden=\"true\" />\n                  </div>\n                )}\n              </div>\n              {touched.date && errors.date && (\n                <p className=\"mt-1 text-sm text-red-600\" id=\"date-error\">\n                  {errors.date}\n                </p>\n              )}\n            </div>\n\n            <div className=\"mb-4\">\n              <label htmlFor=\"edit-modal-time\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Time <span className=\"text-red-500\">*</span>\n              </label>\n              <div className=\"relative\">\n                <input\n                  type=\"time\"\n                  id=\"edit-modal-time\"\n                  name=\"time\"\n                  className={`w-full px-4 py-2 rounded-lg border ${\n                    touched.time && errors.time\n                      ? 'border-red-300 text-red-900 placeholder-red-300 focus:outline-none focus:ring-red-500 focus:border-red-500'\n                      : 'border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent'\n                  } bg-gray-50`}\n                  value={formData.time}\n                  onChange={handleChange}\n                  onBlur={() => handleBlur('time')}\n                  aria-invalid={touched.time && errors.time ? 'true' : 'false'}\n                  aria-describedby=\"time-error\"\n                />\n                {touched.time && errors.time && (\n                  <div className=\"absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none\">\n                    <ExclamationCircleIcon className=\"h-5 w-5 text-red-500\" aria-hidden=\"true\" />\n                  </div>\n                )}\n              </div>\n              {touched.time && errors.time && (\n                <p className=\"mt-1 text-sm text-red-600\" id=\"time-error\">\n                  {errors.time}\n                </p>\n              )}\n            </div>\n\n            <div className=\"mb-6 pt-4 border-t border-gray-200\">\n              <div className=\"flex items-center justify-between mb-3\">\n                <span className=\"text-sm font-medium text-gray-700\">Repeat Event</span>\n\n                {/* Custom Horizontal Toggle Button */}\n                <button\n                  type=\"button\"\n                  onClick={() => {\n                    const newValue = !formData.createFutureEvent;\n                    setFormData(prev => ({\n                      ...prev,\n                      createFutureEvent: newValue,\n                      futureDate: newValue ? formData.date : ''\n                    }));\n                    \n                    // Clear future date error when toggling off\n                    if (!newValue) {\n                      setErrors(prev => ({\n                        ...prev,\n                        futureDate: ''\n                      }));\n                    }\n                  }}\n                  className={`relative w-12 h-6 rounded-full focus:outline-none transition-colors duration-300 ${\n                    formData.createFutureEvent ? 'bg-blue-600' : 'bg-gray-300'\n                  }`}\n                  aria-pressed={formData.createFutureEvent}\n                  aria-label={formData.createFutureEvent ? 'Disable repeat event' : 'Enable repeat event'}\n                >\n                  <span\n                    className={`absolute top-1 left-1 h-4 w-4 rounded-full bg-white shadow transform transition-transform duration-300 ${\n                      formData.createFutureEvent ? 'translate-x-6' : 'translate-x-0'\n                    }`}\n                  />\n                </button>\n              </div>\n\n              {formData.createFutureEvent && (\n                <div className=\"mt-4\">\n                  <label htmlFor=\"future-date\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    Future Date <span className=\"text-red-500\">*</span>\n                  </label>\n                  <div className=\"relative\">\n                    <input\n                      type=\"date\"\n                      id=\"future-date\"\n                      name=\"futureDate\"\n                      min={formData.date || new Date().toISOString().split('T')[0]}\n                      className={`w-full px-4 py-2 rounded-lg border ${\n                        touched.futureDate && errors.futureDate\n                          ? 'border-red-300 text-red-900 placeholder-red-300 focus:outline-none focus:ring-red-500 focus:border-red-500'\n                          : 'border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent'\n                      } bg-gray-50`}\n                      value={formData.futureDate}\n                      onChange={handleChange}\n                      onBlur={() => handleBlur('futureDate')}\n                      aria-invalid={touched.futureDate && errors.futureDate ? 'true' : 'false'}\n                      aria-describedby=\"future-date-error\"\n                    />\n                    {touched.futureDate && errors.futureDate && (\n                      <div className=\"absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none\">\n                        <ExclamationCircleIcon className=\"h-5 w-5 text-red-500\" aria-hidden=\"true\" />\n                      </div>\n                    )}\n                  </div>\n                  {touched.futureDate && errors.futureDate && (\n                    <p className=\"mt-1 text-sm text-red-600\" id=\"future-date-error\">\n                      {errors.futureDate}\n                    </p>\n                  )}\n                </div>\n              )}\n            </div>\n\n            <div className=\"mt-8 flex justify-end space-x-3\">\n              <button\n                type=\"button\"\n                onClick={onClose}\n                disabled={isSubmitting}\n                className=\"px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                Cancel\n              </button>\n              <button\n                type=\"button\"\n                onClick={handleUpdateClick}\n                disabled={isSubmitting || Object.keys(errors).length > 0}\n                className={`px-4 py-2 text-sm font-medium text-white border border-transparent rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 ${\n                  isSubmitting || Object.keys(errors).length > 0\n                    ? 'bg-blue-400 cursor-not-allowed'\n                    : 'bg-blue-600 hover:bg-blue-700'\n                }`}\n              >\n                {isSubmitting ? (\n                  <span className=\"flex items-center\">\n                    <svg className=\"animate-spin -ml-1 mr-2 h-4 w-4 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                      <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                      <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                    </svg>\n                    {formData.createFutureEvent ? 'Creating...' : 'Saving...'}\n                  </span>\n                ) : formData.createFutureEvent ? 'Create Future Event' : 'Update Event'}\n              </button>\n            </div>\n          </div>\n        </motion.div>\n      )}\n    </AnimatePresence>\n  );\n};\n\nexport default EditTimetableModal;","// src/pages/TimetablePage.js\nimport React, { useState, useMemo, useCallback } from 'react';\nimport TimetableEventCard from '../components/TimetableEventCard';\nimport { useHandlers } from '../context/HandlerContext';\nimport EditTimetableModal from '../components/EditTimetableModal';\nimport AddModal from '../components/AddModal';\nimport EmptyState from '../components/EmptyState';\n\n\n/**\n * Helper function to get a 'YYYY-MM-DD' formatted string from a Date object,\n * based on the user's local time zone. This prevents UTC conversion issues.\n * @param {Date} date - The date object to format.\n * @returns {string} The formatted date string.\n */\nconst getLocalDateString = (date) => {\n    const year = date.getFullYear();\n    const month = (date.getMonth() + 1).toString().padStart(2, '0');\n    const day = date.getDate().toString().padStart(2, '0');\n    return `${year}-${month}-${day}`;\n};\n\n// Custom areEqual function for React.memo\nfunction areEqual(prevProps, nextProps) {\n    if (\n        prevProps.timetableEntries.length !== nextProps.timetableEntries.length ||\n        prevProps.selectedDisplayDate !== nextProps.selectedDisplayDate\n    ) {\n        return false;\n    }\n    // Compare each event by id and checked (add more fields if needed)\n    for (let i = 0; i < prevProps.timetableEntries.length; i++) {\n        const prevEvent = prevProps.timetableEntries[i];\n        const nextEvent = nextProps.timetableEntries[i];\n        if (\n            prevEvent.id !== nextEvent.id ||\n            prevEvent.checked !== nextEvent.checked ||\n            prevEvent.subject !== nextEvent.subject ||\n            prevEvent.topic !== nextEvent.topic ||\n            prevEvent.date !== nextEvent.date ||\n            prevEvent.time !== nextEvent.time\n        ) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Memoize TimetablePage to prevent unnecessary re-renders\nconst TimetablePage = React.memo(({ timetableEntries, showNotification, userId }) => {\n    const handlers = useHandlers();\n    const [timetableEditMode, setTimetableEditMode] = useState(false);\n    const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n    const [isEditModalOpen, setIsEditModalFromState] = useState(false); // Renamed to avoid confusion\n    const [currentEventToEdit, setCurrentEventToEdit] = useState(null);\n\n    const [selectedDisplayDate, setSelectedDisplayDate] = useState(getLocalDateString(new Date()));\n    // Search state with validation\n    const [searchQuery, setSearchQuery] = useState(\"\");\n    const [isSearching, setIsSearching] = useState(false);\n    const [searchError, setSearchError] = useState(\"\");\n\n    // Helper to control modal state consistently\n    const setIsEditModalOpen = useCallback((isOpen) => {\n        setIsEditModalFromState(isOpen);\n        if (!isOpen) {\n            setCurrentEventToEdit(null); // Clear event data when modal closes\n        }\n    }, []);\n\n    // Memoized handlers for toggles and modals\n    const handleToggleEditMode = useCallback(() => {\n        setTimetableEditMode(prev => !prev);\n    }, []);\n\n    const handleCloseAddModal = useCallback(() => {\n        setIsAddModalOpen(false);\n    }, []);\n\n    const handleCloseEditModal = useCallback(() => {\n        setIsEditModalOpen(false);\n    }, [setIsEditModalOpen]);\n\n    // (Moved above usage)\n    const handleSaveEvent = (data) => {\n        handlers.addTimetableEntry(data.subject, data.topic, data.date, data.time);\n    };\n\n    const handleEditEvent = useCallback((eventId) => {\n        const eventToEdit = timetableEntries.find(event => event.id === eventId);\n        if (eventToEdit) {\n            setCurrentEventToEdit(eventToEdit);\n            setIsEditModalOpen(true);\n        }\n    }, [timetableEntries, setIsEditModalOpen]);\n\n    const handleDeleteTimetableEntry = useCallback((id) => {\n        handlers.deleteTimetableEntry(id);\n    }, [handlers]);\n\n    const handleCheckTimetableEntry = useCallback((id) => {\n        handlers.checkTimetableEntry(id);\n    }, [handlers]);\n\n    // This handleUpdateEvent now correctly calls the updateTimetableEntry prop from App.js\n    // which already has userId and showNotification in its closure.\n    const handleUpdateEvent = useCallback(async (eventId, subject, topic, date, time) => {\n        await handlers.updateTimetableEntry(eventId, subject, topic, date, time);\n        setIsEditModalOpen(false); // Close modal using the consistent helper\n    }, [handlers, setIsEditModalOpen]);\n\n    const handleAddSimilarEvent = useCallback((eventData) => {\n        handlers.addTimetableEntry(\n            eventData.subject,\n            eventData.topic,\n            eventData.date,\n            eventData.time\n        );\n    }, [handlers]);\n\n    const memoizedSelectedDateObject = useMemo(() => {\n        const date = new Date(selectedDisplayDate);\n        const userTimezoneOffset = date.getTimezoneOffset() * 60000;\n        return new Date(date.getTime() + userTimezoneOffset);\n    }, [selectedDisplayDate]);\n\n    // Chronologically sort all entries by date, then by time\n    const sortedTimetableEntries = useMemo(() => {\n        return [...timetableEntries].sort((a, b) => {\n            if (a.date !== b.date) return a.date.localeCompare(b.date);\n            return a.time.localeCompare(b.time);\n        });\n    }, [timetableEntries]);\n\n    // Filtered and sorted entries based on search (searches across all entries)\n    const filteredEntries = useMemo(() => {\n        if (!searchQuery.trim() || searchQuery.trim().length < 2) {\n            // If not searching or search query is too short, show only today's entries, sorted\n            return sortedTimetableEntries.filter(entry => entry.date === selectedDisplayDate);\n        }\n        const q = searchQuery.toLowerCase();\n        return sortedTimetableEntries.filter(entry =>\n            entry.subject.toLowerCase().includes(q) ||\n            entry.topic.toLowerCase().includes(q) ||\n            entry.time.toLowerCase().includes(q)\n        );\n    }, [sortedTimetableEntries, searchQuery, selectedDisplayDate]);\n\n    // Utility: calculate event end time (default 1 hour duration if not specified)\n    const getEventEndTime = (event) => {\n        if (event.endTime) {\n            return new Date(`${event.date}T${event.endTime}`);\n        }\n        const [hour] = event.time.split(':').map(Number);\n        return new Date(new Date(`${event.date}T${event.time}`).setHours(hour + 1));\n    };\n\n    // Calculate status for each event\n    const filteredEntriesWithStatus = useMemo(() => {\n        const now = new Date();\n        return filteredEntries.map((event) => {\n            if (event.checked) return { ...event, status: 'Completed' };\n            // Find the true next event in the full sorted timetable\n            const idxInFull = sortedTimetableEntries.findIndex(e => e.id === event.id);\n            const nextEvent = idxInFull !== -1 ? sortedTimetableEntries[idxInFull + 1] : undefined;\n            const eventStart = new Date(`${event.date}T${event.time}`);\n            const eventEnd = getEventEndTime(event);\n            const nextStart = nextEvent ? new Date(`${nextEvent.date}T${nextEvent.time}`) : null;\n            if (now >= eventStart && (!nextStart || now < nextStart)) {\n                return { ...event, status: 'Live' };\n            } else if (now < eventStart) {\n                return { ...event, status: 'Pending' };\n            } else if (now > eventEnd && nextEvent && now > nextStart && !event.checked) {\n                return { ...event, status: 'Missed' };\n            }\n            return { ...event, status: 'Pending' };\n        });\n    }, [filteredEntries, sortedTimetableEntries]);\n\n    // Group filtered entries by date for search results\n    const groupedByDate = useMemo(() => {\n        if (!searchQuery.trim()) return {};\n        return filteredEntriesWithStatus.reduce((acc, entry) => {\n            if (!acc[entry.date]) acc[entry.date] = [];\n            acc[entry.date].push(entry);\n            return acc;\n        }, {});\n    }, [filteredEntriesWithStatus, searchQuery]);\n\n    const addModalFields = useMemo(() => [\n        { name: 'subject', label: 'Subject', placeholder: 'e.g., Anatomy', required: true },\n        { name: 'topic', label: 'Topic', placeholder: 'e.g., Cardiovascular System', required: true },\n        { name: 'date', label: 'Date', type: 'date', required: true, defaultValue: selectedDisplayDate },\n        { name: 'time', label: 'Time', type: 'time', required: true, defaultValue: '09:00' }\n    ], [selectedDisplayDate]);\n\n    const handleSelectCalendarDate = useCallback((date) => {\n        setSelectedDisplayDate(getLocalDateString(date));\n    }, []);\n\n    const handlePrevDay = useCallback(() => {\n        const newDate = new Date(memoizedSelectedDateObject);\n        newDate.setDate(newDate.getDate() - 1);\n        handleSelectCalendarDate(newDate);\n    }, [memoizedSelectedDateObject, handleSelectCalendarDate]);\n\n    const handleNextDay = useCallback(() => {\n        const newDate = new Date(memoizedSelectedDateObject);\n        newDate.setDate(newDate.getDate() + 1);\n        handleSelectCalendarDate(newDate);\n    }, [memoizedSelectedDateObject, handleSelectCalendarDate]);\n\n    return (\n        <>\n            <div id=\"page-timetable\" className=\"page px-6 py-8\">\n                <header className=\"flex items-center justify-between mb-2\">\n                    <h1 className=\"text-3xl font-bold text-gray-900\">Timetable</h1>\n                        <button\n                        onClick={handleToggleEditMode}\n                        className=\"bg-blue-50 text-blue-700 font-semibold text-xs px-4 py-2 rounded-full flex items-center hover:bg-blue-100 transition duration-200\"\n                        aria-label={timetableEditMode ? 'Done editing timetable' : 'Edit timetable'}\n                        >\n                        <svg\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        width=\"16\"\n                        height=\"16\"\n                        viewBox=\"0 0 24 24\"\n                        fill=\"none\"\n                        stroke=\"currentColor\"\n                        strokeWidth=\"2\"\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        className=\"mr-1\"\n                        >\n                        <path d=\"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\"></path>\n                        <path d=\"M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z\"></path>\n                        </svg>\n                        {timetableEditMode ? 'Done' : 'Edit'}\n                        </button>\n                </header>\n                <p className=\"text-gray-500 mb-6\">Upcoming Study Schedule</p>\n\n                {/* Enhanced Search Bar */}\n                <div className=\"mb-6 relative\">\n                    <div className=\"relative\">\n                        <input\n                            type=\"text\"\n                            value={searchQuery}\n                            onChange={(e) => {\n                                const value = e.target.value;\n                                setSearchQuery(value);\n                                \n                                // Clear any previous errors\n                                if (searchError) setSearchError('');\n                                \n                                // Show loading state if query is long enough\n                                if (value.trim().length >= 2) {\n                                    setIsSearching(true);\n                                    // Simulate search delay\n                                    const timer = setTimeout(() => {\n                                        setIsSearching(false);\n                                    }, 300);\n                                    return () => clearTimeout(timer);\n                                } else if (value.trim().length > 0) {\n                                    setSearchError('Please enter at least 2 characters');\n                                }\n                            }}\n                            placeholder=\"Search events by subject, topic, or time...\"\n                            className={`w-full pl-10 pr-10 py-2 rounded-lg border ${\n                                searchError ? 'border-red-400' : 'border-gray-300'\n                            } focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white transition-colors duration-200`}\n                            aria-label=\"Search timetable events\"\n                            aria-invalid={!!searchError}\n                            aria-describedby={searchError ? 'search-error' : undefined}\n                        />\n                        <div className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\">\n                            {isSearching ? (\n                                <svg className=\"animate-spin h-4 w-4 text-blue-500\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                                    <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                                    <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                                </svg>\n                            ) : (\n                                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" />\n                                </svg>\n                            )}\n                        </div>\n                        {searchQuery && (\n                            <button\n                                onClick={() => {\n                                    setSearchQuery('');\n                                    setSearchError('');\n                                }}\n                                className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600 focus:outline-none\"\n                                aria-label=\"Clear search\"\n                            >\n                                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                                </svg>\n                            </button>\n                        )}\n                    </div>\n                    <div className=\"flex justify-between mt-1 px-1\">\n                        {searchError ? (\n                            <p id=\"search-error\" className=\"text-xs text-red-500\">{searchError}</p>\n                        ) : searchQuery ? (\n                            <p className=\"text-xs text-gray-500\">\n                                {searchQuery.length}/50 characters • {filteredEntries.length} event{filteredEntries.length !== 1 ? 's' : ''} found\n                            </p>\n                        ) : (\n                            <p className=\"text-xs text-gray-400\">Type at least 2 characters to search events</p>\n                        )}\n                    </div>\n                </div>\n\n                {/* Only show Add New button and date picker if not searching */}\n                {(!searchQuery.trim()) && (\n                    <>\n                <button\n                    onClick={() => setIsAddModalOpen(true)}\n                    className=\"w-full bg-blue-50 text-blue-700 font-semibold mt-6 py-2 px-4 rounded-lg flex items-center justify-center hover:bg-blue-100 transition duration-300 mb-2\"\n                >\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" className=\"mr-2\"><line x1=\"12\" y1=\"5\" x2=\"12\" y2=\"19\"></line><line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\"></line></svg>\n                    Add New Study Event\n                </button>\n\n                <div className=\"flex items-center justify-between px-0 py-6 text-gray-700 font-semibold text-lg\">\n                    <button onClick={handlePrevDay} className=\"p-2 rounded-full hover:bg-gray-100 transition-colors duration-200\" aria-label=\"Previous day\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><polyline points=\"15 18 9 12 15 6\"></polyline></svg>\n                    </button>\n                    <span className=\"flex-grow text-center text-lg sm:text-base\">\n                        {memoizedSelectedDateObject.toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })}\n                    </span>\n                    <button onClick={handleNextDay} className=\"p-2 rounded-full hover:bg-gray-100 transition-colors duration-200\" aria-label=\"Next day\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><polyline points=\"9 18 15 12 9 6\"></polyline></svg>\n                    </button>\n                </div>\n                    </>\n                )}\n\n                <div id=\"timetable-events-list\" className=\"space-y-4 bg-white rounded-lg min-h-[100px]\">\n                    {filteredEntriesWithStatus.length === 0 ? (\n                        <EmptyState\n                            title={searchQuery.trim().length >= 2 ? 'No events found' : 'Your timetable is empty'}\n                            description={\n                                searchQuery.trim().length >= 2\n                                    ? 'No events match your search. Try different keywords or check your spelling.'\n                                    : 'Add your first event to get started!'\n                            }\n                            icon={\n                                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"48\" height=\"48\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"text-gray-300\">\n                                    <rect x=\"3\" y=\"4\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect>\n                                    <line x1=\"16\" y1=\"2\" x2=\"16\" y2=\"6\"></line>\n                                    <line x1=\"8\" y1=\"2\" x2=\"8\" y2=\"6\"></line>\n                                    <line x1=\"3\" y1=\"10\" x2=\"21\" y2=\"10\"></line>\n                                    <path d=\"M8 14h.01\"></path>\n                                    <path d=\"M12 14h.01\"></path>\n                                    <path d=\"M16 14h.01\"></path>\n                                    <path d=\"M8 18h.01\"></path>\n                                    <path d=\"M12 18h.01\"></path>\n                                    <path d=\"M16 18h.01\"></path>\n                                </svg>\n                            }\n                            action={\n                                <button\n                                    onClick={() => setIsAddModalOpen(true)}\n                                    className=\"mt-4 inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200\"\n                                >\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 mr-2\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                                        <path fillRule=\"evenodd\" d=\"M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z\" clipRule=\"evenodd\" />\n                                    </svg>\n                                    Add Your First Event\n                                </button>\n                            }\n                        />\n                    ) : (\n                        <div className=\"space-y-4\">\n                            {/* If searching, group by date and show bold date headers */}\n                            {searchQuery.trim() ? (\n                                Object.keys(groupedByDate).sort().map(date => (\n                                    <div key={date}>\n                                        <div className=\"font-bold text-lg text-blue-800 mb-2 mt-6 pl-1 tracking-wide\">\n                                            {new Date(date).toLocaleDateString('en-US', { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' })}\n                                        </div>\n                                        <div className=\"space-y-4\">\n                                            {groupedByDate[date].map((event, i, arr) => {\n                                                const statusEvent = filteredEntriesWithStatus.find(e => e.id === event.id) || event;\n                                                return (\n                                                    <TimetableEventCard\n                                                        key={event.id}\n                                                        event={event}\n                                                        status={statusEvent.status}\n                                                        nextEvent={arr[i+1]}\n                                                        isEditMode={timetableEditMode}\n                                                        onDelete={handlers.deleteTimetableEntry}\n                                                        onCheck={handlers.checkTimetableEntry}\n                                                        onEdit={handleEditEvent}\n                                                    />\n                                                );\n                                            })}\n                                        </div>\n                                    </div>\n                                ))\n                            ) : (\n                                filteredEntriesWithStatus.map((event, idx) => (\n                                    <TimetableEventCard\n                                        key={event.id}\n                                        event={event}\n                                        status={event.status}\n                                        nextEvent={filteredEntriesWithStatus[idx+1]}\n                                        isEditMode={timetableEditMode}\n                                        onDelete={handleDeleteTimetableEntry}\n                                        onCheck={handleCheckTimetableEntry}\n                                        onEdit={handleEditEvent}\n                                    />\n                                ))\n                            )}\n                        </div>\n                    )}\n                </div>\n            </div>\n\n            <AddModal\n                isOpen={isAddModalOpen}\n                onClose={handleCloseAddModal}\n                onSave={handleSaveEvent}\n                title=\"Add New Study Event\"\n                fields={addModalFields}\n            />\n\n        <EditTimetableModal\n            isOpen={isEditModalOpen}\n            onClose={handleCloseEditModal}\n            eventData={currentEventToEdit}\n            onUpdate={handleUpdateEvent}\n            onAddSimilar={handleAddSimilarEvent}\n            showNotification={showNotification}\n        />\n    </>\n);\n}, areEqual);\n\nexport default TimetablePage;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { motion } from 'framer-motion';\n\n/**\n * EmptyState Component\n * \n * A reusable component to display a friendly message when there's no content to show.\n * \n * @param {Object} props - Component props\n * @param {string} [props.title='No items found'] - The main title/message\n * @param {string} [props.description='There are no items to display at the moment.'] - Additional description text\n * @param {React.ReactNode} [props.icon] - Optional icon to display\n * @param {React.ReactNode} [props.action] - Optional call-to-action button or element\n * @param {string} [props.className=''] - Additional CSS classes\n * @returns {React.ReactElement} The EmptyState component\n */\nconst EmptyState = ({\n  title = 'No items found',\n  description = 'There are no items to display at the moment.',\n  icon,\n  action,\n  className = ''\n}) => {\n  return (\n    <motion.div \n      className={`flex flex-col items-center justify-center p-8 text-center ${className}`}\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.3 }}\n    >\n      {icon && <div className=\"mb-4 text-gray-400\">{icon}</div>}\n      <h3 className=\"text-lg font-medium text-gray-900 mb-2\">{title}</h3>\n      <p className=\"text-gray-500 mb-6 max-w-md\">{description}</p>\n      {action && <div className=\"mt-2\">{action}</div>}\n    </motion.div>\n  );\n};\n\nEmptyState.propTypes = {\n  title: PropTypes.string,\n  description: PropTypes.string,\n  icon: PropTypes.node,\n  action: PropTypes.node,\n  className: PropTypes.string,\n};\n\nexport default EmptyState;\n","// src/components/AddModal.js\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useHandlers } from '../context/HandlerContext';\nimport { AnimatePresence, motion } from 'framer-motion';\nimport { XMarkIcon, ExclamationCircleIcon } from '@heroicons/react/24/outline';\n\nconst EMPTY_INITIAL_STATE = {};\n\n// Validation function for different field types\nconst validateField = (field, value) => {\n    if (field.required && !value) {\n        return `${field.label} is required`;\n    }\n    \n    if (value) {\n        // Email validation\n        if (field.type === 'email' && !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(value)) {\n            return 'Please enter a valid email address';\n        }\n        \n        // URL validation\n        if (field.type === 'url' && !/^https?:\\/\\//.test(value)) {\n            return 'Please enter a valid URL starting with http:// or https://';\n        }\n        \n        // Number validation\n        if (field.type === 'number') {\n            const numValue = Number(value);\n            if (isNaN(numValue)) return 'Please enter a valid number';\n            if (field.min !== undefined && numValue < field.min) {\n                return `Must be at least ${field.min}`;\n            }\n            if (field.max !== undefined && numValue > field.max) {\n                return `Cannot exceed ${field.max}`;\n            }\n        }\n        \n        // Min length validation\n        if (field.minLength && value.length < field.minLength) {\n            return `Must be at least ${field.minLength} characters`;\n        }\n        \n        // Max length validation\n        if (field.maxLength && value.length > field.maxLength) {\n            return `Cannot exceed ${field.maxLength} characters`;\n        }\n        \n        // Custom validation function\n        if (field.validate && typeof field.validate === 'function') {\n            const customError = field.validate(value, field);\n            if (customError) return customError;\n        }\n    }\n    \n    return '';\n};\n\nconst AddModal = ({ isOpen, onClose, onSave, title, fields, initialState = EMPTY_INITIAL_STATE }) => {\n    const handlers = useHandlers();\n    const [formData, setFormData] = useState({});\n    const [touched, setTouched] = useState({});\n    const [errors, setErrors] = useState({});\n    const [isSubmitting, setIsSubmitting] = useState(false);\n\n    // Initialize form data when modal opens\n    useEffect(() => {\n        if (isOpen) {\n            const initialData = fields.reduce((acc, field) => {\n                acc[field.name] = initialState[field.name] ?? field.defaultValue ?? '';\n                return acc;\n            }, {});\n            setFormData(initialData);\n            setTouched({});\n            setErrors({});\n        } else {\n            setFormData({});\n            setTouched({});\n            setErrors({});\n        }\n    }, [isOpen, fields, initialState]);\n\n    // Validate form\n    const validateForm = useCallback(() => {\n        const newErrors = {};\n        let isValid = true;\n\n        fields.forEach(field => {\n            const error = validateField(field, formData[field.name] || '');\n            if (error) {\n                newErrors[field.name] = error;\n                isValid = false;\n            }\n        });\n\n        setErrors(newErrors);\n        return isValid;\n    }, [fields, formData]);\n\n    // Validate field on blur\n    const handleBlur = (field) => {\n        setTouched(prev => ({ ...prev, [field.name]: true }));\n        const error = validateField(field, formData[field.name] || '');\n        setErrors(prev => ({ ...prev, [field.name]: error }));\n    };\n\n    const handleChange = (e) => {\n        const { name, value, type, checked } = e.target;\n        const newValue = type === 'checkbox' ? checked : value;\n        \n        setFormData(prev => ({ ...prev, [name]: newValue }));\n        \n        // Clear error when user starts typing (if field was previously touched)\n        if (touched[name] && errors[name]) {\n            const error = validateField(\n                fields.find(f => f.name === name) || {},\n                newValue\n            );\n            setErrors(prev => ({ ...prev, [name]: error }));\n        }\n    };\n\n    const handleSaveClick = async () => {\n        // Mark all fields as touched to show all errors\n        const allTouched = fields.reduce((acc, field) => {\n            acc[field.name] = true;\n            return acc;\n        }, {});\n        setTouched(allTouched);\n        \n        // Validate all fields\n        const isValid = validateForm();\n        \n        if (!isValid) {\n            if (handlers.showNotification) {\n                handlers.showNotification('Please fix the errors in the form', 'error');\n            }\n            return;\n        }\n        \n        setIsSubmitting(true);\n        \n        try {\n            if (onSave) {\n                await onSave(formData);\n            } else if (handlers.addTimetableEntry) {\n                await handlers.addTimetableEntry(formData);\n            }\n            onClose();\n        } catch (error) {\n            console.error('Error saving form:', error);\n            if (handlers.showNotification) {\n                handlers.showNotification(\n                    error.message || 'Failed to save. Please try again.',\n                    'error'\n                );\n            }\n        } finally {\n            setIsSubmitting(false);\n        }\n    };\n\n    return (\n        <AnimatePresence>\n            {isOpen && (\n                <motion.div\n                    className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\"\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    exit={{ opacity: 0 }}\n                    transition={{ duration: 0.22 }}\n                    onClick={onClose}\n                >\n                    <div\n                        onClick={(e) => e.stopPropagation()}\n                        className=\"bg-white rounded-lg shadow-xl p-6 w-full max-w-md mx-auto relative\"\n                    >\n                        <h2 className=\"text-2xl font-bold mb-4 text-gray-800\">{title}</h2>\n                        <div className=\"space-y-4\">\n                            {fields.map(field => {\n                                const hasError = touched[field.name] && errors[field.name];\n                                const fieldValue = formData[field.name] || '';\n                                \n                                return (\n                                    <div key={field.name} className=\"flex flex-col\">\n                                        <div className=\"flex justify-between items-center mb-1\">\n                                            <label \n                                                htmlFor={field.name} \n                                                className=\"block text-sm font-medium text-gray-700\"\n                                            >\n                                                {field.label}\n                                                {field.required && <span className=\"text-red-500\">*</span>}\n                                            </label>\n                                            {field.helpText && (\n                                                <span className=\"text-xs text-gray-500\">\n                                                    {field.helpText}\n                                                </span>\n                                            )}\n                                        </div>\n                                        \n                                        {field.type === 'textarea' ? (\n                                            <div className=\"relative\">\n                                                <textarea\n                                                    id={field.name}\n                                                    name={field.name}\n                                                    placeholder={field.placeholder || ''}\n                                                    value={fieldValue}\n                                                    onChange={handleChange}\n                                                    onBlur={() => handleBlur(field)}\n                                                    disabled={field.disabled || false}\n                                                    rows={field.rows || 3}\n                                                    className={`w-full px-4 py-2 rounded-lg border ${\n                                                        hasError \n                                                            ? 'border-red-300 text-red-900 placeholder-red-300 focus:outline-none focus:ring-red-500 focus:border-red-500' \n                                                            : 'border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent'\n                                                    } bg-gray-50 disabled:bg-gray-100 disabled:text-gray-500 pr-10`}\n                                                    aria-invalid={hasError ? 'true' : 'false'}\n                                                    aria-describedby={`${field.name}-error`}\n                                                />\n                                                {hasError && (\n                                                    <div className=\"absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none\">\n                                                        <ExclamationCircleIcon className=\"h-5 w-5 text-red-500\" aria-hidden=\"true\" />\n                                                    </div>\n                                                )}\n                                            </div>\n                                        ) : field.type === 'select' ? (\n                                            <div className=\"relative\">\n                                                <select\n                                                    id={field.name}\n                                                    name={field.name}\n                                                    value={fieldValue}\n                                                    onChange={handleChange}\n                                                    onBlur={() => handleBlur(field)}\n                                                    disabled={field.disabled || false}\n                                                    className={`w-full px-4 py-2 rounded-lg border ${\n                                                        hasError \n                                                            ? 'border-red-300 text-red-900 focus:outline-none focus:ring-red-500 focus:border-red-500' \n                                                            : 'border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent'\n                                                    } bg-gray-50 disabled:bg-gray-100 disabled:text-gray-500 pr-10 appearance-none`}\n                                                    aria-invalid={hasError ? 'true' : 'false'}\n                                                    aria-describedby={`${field.name}-error`}\n                                                >\n                                                    {!fieldValue && (\n                                                        <option value=\"\">\n                                                            {field.placeholder || 'Select an option'}\n                                                        </option>\n                                                    )}\n                                                    {field.options && field.options.map(option => (\n                                                        <option key={option.value} value={option.value}>\n                                                            {option.label}\n                                                        </option>\n                                                    ))}\n                                                </select>\n                                                {hasError && (\n                                                    <div className=\"absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none\">\n                                                        <ExclamationCircleIcon className=\"h-5 w-5 text-red-500\" aria-hidden=\"true\" />\n                                                    </div>\n                                                )}\n                                                <div className=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                                                    <svg className=\"fill-current h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                                                        <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                                                    </svg>\n                                                </div>\n                                            </div>\n                                        ) : field.type === 'checkbox' ? (\n                                            <div className=\"relative flex items-start\">\n                                                <div className=\"flex items-center h-5\">\n                                                    <input\n                                                        id={field.name}\n                                                        name={field.name}\n                                                        type=\"checkbox\"\n                                                        checked={!!fieldValue}\n                                                        onChange={handleChange}\n                                                        onBlur={() => handleBlur(field)}\n                                                        disabled={field.disabled || false}\n                                                        className={`h-4 w-4 rounded ${\n                                                            hasError \n                                                                ? 'text-red-600 border-red-300 focus:ring-red-500' \n                                                                : 'text-blue-600 border-gray-300 focus:ring-blue-500'\n                                                        }`}\n                                                        aria-invalid={hasError ? 'true' : 'false'}\n                                                        aria-describedby={`${field.name}-error`}\n                                                    />\n                                                </div>\n                                                <div className=\"ml-3 text-sm\">\n                                                    <label htmlFor={field.name} className=\"font-medium text-gray-700\">\n                                                        {field.checkboxLabel || field.label}\n                                                        {field.required && <span className=\"text-red-500\">*</span>}\n                                                    </label>\n                                                    {field.checkboxDescription && (\n                                                        <p className=\"text-gray-500\">{field.checkboxDescription}</p>\n                                                    )}\n                                                </div>\n                                            </div>\n                                        ) : (\n                                            <div className=\"relative\">\n                                                <input\n                                                    type={field.type || 'text'}\n                                                    id={field.name}\n                                                    name={field.name}\n                                                    placeholder={field.placeholder || ''}\n                                                    value={fieldValue}\n                                                    onChange={handleChange}\n                                                    onBlur={() => handleBlur(field)}\n                                                    disabled={field.disabled || false}\n                                                    min={field.min}\n                                                    max={field.max}\n                                                    step={field.step}\n                                                    className={`w-full px-4 py-2 rounded-lg border ${\n                                                        hasError \n                                                            ? 'border-red-300 text-red-900 placeholder-red-300 focus:outline-none focus:ring-red-500 focus:border-red-500' \n                                                            : 'border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent'\n                                                    } bg-gray-50 disabled:bg-gray-100 disabled:text-gray-500 ${field.type === 'number' ? 'pr-12' : 'pr-10'}`}\n                                                    aria-invalid={hasError ? 'true' : 'false'}\n                                                    aria-describedby={`${field.name}-error`}\n                                                />\n                                                {hasError && (\n                                                    <div className=\"absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none\">\n                                                        <ExclamationCircleIcon className=\"h-5 w-5 text-red-500\" aria-hidden=\"true\" />\n                                                    </div>\n                                                )}\n                                                {field.type === 'number' && field.unit && !hasError && (\n                                                    <div className=\"absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none\">\n                                                        <span className=\"text-gray-500 text-sm\">{field.unit}</span>\n                                                    </div>\n                                                )}\n                                            </div>\n                                        )}\n                                        \n                                        {hasError && (\n                                            <p className=\"mt-1 text-sm text-red-600\" id={`${field.name}-error`}>\n                                                {errors[field.name]}\n                                            </p>\n                                        )}\n                                    </div>\n                                );\n                            })}\n                        </div>\n                        <div className=\"mt-6 flex justify-end space-x-3\">\n                            <button\n                                type=\"button\"\n                                onClick={onClose}\n                                className=\"px-4 py-2 bg-white border border-gray-300 text-gray-700 font-medium rounded-lg hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                                disabled={isSubmitting}\n                            >\n                                Cancel\n                            </button>\n                            <button\n                                type=\"button\"\n                                onClick={handleSaveClick}\n                                disabled={isSubmitting || Object.keys(errors).length > 0}\n                                className={`px-4 py-2 font-medium rounded-lg focus:outline-none focus:ring-2 focus:ring-offset-2 transition duration-300 ${\n                                    isSubmitting || Object.keys(errors).length > 0\n                                        ? 'bg-blue-400 text-white cursor-not-allowed'\n                                        : 'bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500'\n                                }`}\n                            >\n                                {isSubmitting ? (\n                                    <span className=\"flex items-center\">\n                                        <svg className=\"animate-spin -ml-1 mr-2 h-4 w-4 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                                            <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                                            <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                                        </svg>\n                                        Saving...\n                                    </span>\n                                ) : 'Save'}\n                            </button>\n                        </div>\n                    </div>\n                </motion.div>\n            )}\n        </AnimatePresence>\n    );\n};\n\nexport default AddModal;","import * as React from \"react\";\nfunction ExclamationCircleIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M12 9v3.75m9-.75a9 9 0 1 1-18 0 9 9 0 0 1 18 0Zm-9 3.75h.008v.008H12v-.008Z\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(ExclamationCircleIcon);\nexport default ForwardRef;"],"names":["React","_ref","event","nextEvent","isEditMode","onEdit","status","handlers","useHandlers","getEventStatus","now","arguments","length","undefined","Date","checked","text","colorClass","dotClass","eventStart","concat","date","time","eventEnd","getTime","DEFAULT_DURATION_MINUTES","nextStart","studyDay","dateObj","getHours","setDate","getDate","setHours","getStudyDay","studyDayEnd","statusObj","cardClasses","_jsxs","id","className","children","_jsx","subject","topic","_Fragment","onClick","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","deleteTimetableEntry","x1","y1","x2","y2","motion","button","checkTimetableEntry","whileTap","scale","animate","backgroundColor","borderColor","transition","type","stiffness","damping","svg","initial","rotate","validateField","name","value","allValues","createFutureEvent","isOpen","onClose","eventData","onUpdate","showNotification","onAddSimilar","formData","setFormData","useState","futureDate","touched","setTouched","errors","setErrors","isSubmitting","setIsSubmitting","useEffect","initialData","validateForm","useCallback","newErrors","isValid","Object","keys","forEach","field","error","handleBlur","prev","_objectSpread","handleChange","e","target","newValue","AnimatePresence","div","opacity","exit","duration","stopPropagation","htmlFor","placeholder","onChange","onBlur","ExclamationCircleIcon","min","toISOString","split","disabled","async","allTouched","reduce","acc","console","message","cx","cy","r","getLocalDateString","year","getFullYear","month","getMonth","toString","padStart","day","areEqual","prevProps","nextProps","timetableEntries","selectedDisplayDate","i","prevEvent","userId","timetableEditMode","setTimetableEditMode","isAddModalOpen","setIsAddModalOpen","isEditModalOpen","setIsEditModalFromState","currentEventToEdit","setCurrentEventToEdit","setSelectedDisplayDate","searchQuery","setSearchQuery","isSearching","setIsSearching","searchError","setSearchError","setIsEditModalOpen","handleToggleEditMode","handleCloseAddModal","handleCloseEditModal","handleEditEvent","eventId","eventToEdit","find","handleDeleteTimetableEntry","handleCheckTimetableEntry","handleUpdateEvent","updateTimetableEntry","handleAddSimilarEvent","addTimetableEntry","memoizedSelectedDateObject","useMemo","userTimezoneOffset","getTimezoneOffset","sortedTimetableEntries","sort","a","b","localeCompare","filteredEntries","trim","filter","entry","q","toLowerCase","includes","filteredEntriesWithStatus","map","idxInFull","findIndex","endTime","hour","Number","getEventEndTime","groupedByDate","push","addModalFields","label","required","defaultValue","handleSelectCalendarDate","handlePrevDay","newDate","handleNextDay","timer","setTimeout","clearTimeout","points","toLocaleDateString","weekday","EmptyState","title","description","icon","x","y","rx","ry","action","fillRule","clipRule","arr","statusEvent","TimetableEventCard","onDelete","onCheck","idx","AddModal","onSave","data","fields","EditTimetableModal","EMPTY_INITIAL_STATE","test","numValue","isNaN","max","minLength","maxLength","validate","customError","initialState","_ref2","_initialState$field$n","f","hasError","fieldValue","helpText","rows","options","option","checkboxLabel","checkboxDescription","step","unit","svgRef","titleId","props","_objectWithoutProperties","_excluded","assign","ref"],"sourceRoot":""}