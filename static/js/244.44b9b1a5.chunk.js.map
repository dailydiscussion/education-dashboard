{"version":3,"file":"static/js/244.44b9b1a5.chunk.js","mappings":"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","sources":["components/TestCard.js","pages/TestsCompletedPage.js","components/AddModal.js"],"sourcesContent":["// src/components/TestCard.js\nimport React from 'react';\nimport { useHandlers } from '../context/HandlerContext';\nimport { motion } from 'framer-motion';\n\nconst TestCard = React.memo(({ test, subject, isEditMode, onDelete }) => {\n    const handlers = useHandlers();\n    const handleCardClick = () => {\n        // Allow clicking the card to open a link only if not in edit mode\n        if (!isEditMode && test.link && test.link.startsWith('http')) {\n            window.open(test.link, '_blank');\n        } else if (test.link) {\n            // Log a warning for developers if the link is malformed\n            console.warn(`Invalid link for ${test.title}: ${test.link}. Must start with http:// or https://`);\n        }\n    };\n\n    const handleCheckboxClick = (e) => {\n        // Prevent the card's click event from firing when the checkbox is clicked\n        e.stopPropagation();\n        handlers.toggleTestCompletion(subject, test.title, !test.completed);\n    };\n\n    // Define base classes for the card for consistency\n    const baseCardClasses = 'relative p-4 rounded-lg flex justify-between items-center transition-all duration-300';\n    \n    // Define specific classes for the completed state\n    const completedClasses = 'bg-green-100';\n    \n    // Define specific classes for the default (incomplete) state\n    const defaultClasses = 'bg-gray-50';\n    \n    // Add hover effects only if the card has a link and is not in edit mode\n    const linkClasses = test.link && !isEditMode ? 'cursor-pointer hover:shadow-md hover:-translate-y-1' : '';\n\n    // Combine all classes based on the component's state\n    const cardClasses = `${baseCardClasses} ${test.completed ? completedClasses : defaultClasses} ${linkClasses}`;\n\n    return (\n        <div\n            id={`trophy-test-item-${subject}-${test.title}`}\n            className={cardClasses}\n            onClick={handleCardClick}\n        >\n            <div className=\"flex items-center flex-grow min-w-0\">\n                {/* The interactive checkbox for toggling completion status */}\n                <motion.button\n                    onClick={handleCheckboxClick}\n                    className={`flex-shrink-0 w-6 h-6 rounded-full border-2 flex items-center justify-center mr-4`}\n                    aria-label={test.completed ? \"Mark as incomplete\" : \"Mark as complete\"}\n                    whileTap={{ scale: 0.85 }}\n                    animate={{\n                        scale: test.completed ? 1.1 : 1,\n                        backgroundColor: test.completed ? '#22c55e' : '#ffffff00',\n                        borderColor: test.completed ? '#22c55e' : '#d1d5db'\n                    }}\n                    transition={{ type: 'spring', stiffness: 400, damping: 15 }}\n                >\n                    {test.completed && (\n                        <motion.svg \n                            initial={{ scale: 0, rotate: -90 }}\n                            animate={{ scale: 1, rotate: 0 }}\n                            transition={{ type: 'spring', stiffness: 500, damping: 20 }}\n                            xmlns=\"http://www.w3.org/2000/svg\" \n                            className=\"h-4 w-4 text-white\" \n                            fill=\"none\" \n                            viewBox=\"0 0 24 24\" \n                            stroke=\"currentColor\"\n                        >\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={3} d=\"M5 13l4 4L19 7\" />\n                        </motion.svg>\n                    )}\n                </motion.button>\n                \n                {/* Text content with conditional styling for better readability */}\n                <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-center gap-2\">\n                        <h4 className={`font-semibold truncate ${test.completed ? 'text-gray-800' : 'text-gray-900'}`}>{test.title}</h4>\n                    </div>\n                    <p className={`text-sm mt-1 ${test.completed ? 'text-gray-600' : 'text-gray-600'}`}>{test.mcqs} MCQs</p>\n                    \n                </div>\n            </div>\n            \n            {/* Controls for editing and navigation */}\n            <div className=\"flex-shrink-0 ml-2\">\n                {isEditMode ? (\n                    <button\n                        className=\"p-1.5 rounded-full text-gray-400 hover:text-red-500 hover:bg-red-100 transition-colors duration-200\"\n                        onClick={(e) => { e.stopPropagation(); onDelete(subject, test.title); }}\n                        aria-label=\"Delete test\"\n                    >\n                         <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><path d=\"M3 6h18\"></path><path d=\"M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6\"></path><path d=\"M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2\"></path><line x1=\"10\" y1=\"11\" x2=\"10\" y2=\"17\"></line><line x1=\"14\" y1=\"11\" x2=\"14\" y2=\"17\"></line></svg>\n                    </button>\n                ) : (\n                    test.link && <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"text-gray-400\"><polyline points=\"9 18 15 12 9 6\"></polyline></svg>\n                )}\n            </div>\n        </div>\n    );\n});\n\nexport default TestCard;","\n// src/pages/TestsCompletedPage.js\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { useTestData } from '../context/TestDataContext'; // Only testData is in this context now\nimport TestCard from '../components/TestCard';\n\nimport { useHandlers } from '../context/HandlerContext';\nimport AddModal from '../components/AddModal'; // Import the new modal\n\nconst TestsCompletedPage = React.memo(({ currentSelectedSubject, setCurrentSelectedSubject, showNotification }) => {\n    const { testData } = useTestData();\n    const handlers = useHandlers();\n    const [trophyEditMode, setTrophyEditMode] = useState(false);\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [searchQuery, setSearchQuery] = useState('');\n\n    const subjects = useMemo(() => Object.keys(testData), [testData]);\n\n    useEffect(() => {\n        if (subjects.length > 0 && (!currentSelectedSubject || !subjects.includes(currentSelectedSubject))) {\n            setCurrentSelectedSubject(subjects[0]);\n        } else if (subjects.length === 0 && currentSelectedSubject !== '') {\n            setCurrentSelectedSubject('');\n        }\n    }, [subjects, currentSelectedSubject, setCurrentSelectedSubject]);\n\n    const openAddTestModal = React.useCallback(() => {\n        setIsModalOpen(true);\n    }, []);\n\n    const handleCloseModal = React.useCallback(() => {\n        setIsModalOpen(false);\n    }, []);\n\n    const handleToggleEditMode = React.useCallback(() => {\n        setTrophyEditMode(prev => !prev);\n    }, []);\n\n    const handleSelectSubject = React.useCallback((subject) => {\n        setCurrentSelectedSubject(subject);\n    }, [setCurrentSelectedSubject]);\n\n    const handleSearchChange = React.useCallback((e) => {\n        setSearchQuery(e.target.value);\n    }, []);\n\n    const handleSaveTest = (data) => {\n        handlers.addTest(currentSelectedSubject, data.title, data.mcqs, data.date, data.link);\n    };\n\n    const handleDeleteTest = React.useCallback((subject, title) => {\n        handlers.deleteTest(subject, title);\n    }, [handlers]);\n\n    const handleToggleTestCompletion = React.useCallback((id) => {\n        handlers.toggleTestCompletion(id);\n    }, [handlers]);\n\n    const modalFields = [\n        { name: 'title', label: 'Test Title', placeholder: 'e.g., Mid-term Exam', required: true },\n        { name: 'mcqs', label: 'Number of MCQs', type: 'number', placeholder: 'e.g., 40', required: true },\n        { name: 'date', label: 'Completion Date', type: 'date', required: true },\n        { name: 'link', label: 'Test Link (Optional)', type: 'url', placeholder: 'https://example.com/test' }\n    ];\n\n    // Global search: if searchQuery, search all subjects\n    const isSearching = searchQuery.trim().length > 0;\n    const filteredTests = isSearching\n        ? Object.entries(testData).flatMap(([subject, tests]) =>\n            tests.filter(test =>\n                test.title.toLowerCase().includes(searchQuery.toLowerCase())\n            ).map(test => ({ ...test, subject }))\n        )\n        : (currentSelectedSubject && testData[currentSelectedSubject]\n            ? testData[currentSelectedSubject].map(test => ({ ...test, subject: currentSelectedSubject }))\n            : []\n        );\n\n    return (\n        <>\n            <div id=\"page-trophy\" className=\"page px-6 py-8\">\n                <header className=\"flex items-center justify-between mb-2\">\n                    <h1 className=\"text-3xl font-bold text-gray-900\">Tests</h1>\n                    <button\n                        onClick={handleToggleEditMode}\n                        className=\"bg-blue-50 text-blue-700 font-semibold text-xs px-4 py-2 rounded-full flex items-center hover:bg-blue-100 transition duration-200\"\n                        aria-label={trophyEditMode ? 'Done editing tests' : 'Edit tests'}\n                    >\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"mr-1\"><path d=\"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\"></path><path d=\"M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z\"></path></svg>\n                        {trophyEditMode ? 'Done' : 'Edit'}\n                    </button>\n                </header>\n                <p className=\"text-gray-500 mb-6\">Completed Tests & Progress</p>\n\n                <div className=\"mb-6\">\n                    <input\n                        type=\"text\"\n                        placeholder=\"Search tests...\"\n                        className=\"w-full px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-50\"\n                        value={searchQuery}\n                        onChange={handleSearchChange}\n                        aria-label=\"Search tests\"\n                    />\n                </div>\n\n                {/* Hide subject selector and add button during search */}\n                {!isSearching && (\n                    <>\n                        <div className=\"flex space-x-3 mb-6 overflow-x-auto hide-scrollbar\" id=\"subject-filters-container\">\n                            {subjects.map(subject => (\n                                <button\n                                    key={subject}\n                                    className={`subject-filter flex-shrink-0 text-left p-3 rounded-lg transition-colors duration-200\n                                        ${currentSelectedSubject === subject ? 'bg-blue-600 text-white' : 'bg-gray-100 text-gray-700 hover:bg-gray-200'}`}\n                                    onClick={() => handleSelectSubject(subject)}\n                                >\n                                    <p className=\"font-bold\">{subject}</p>\n                                    <p className={`text-sm ${currentSelectedSubject === subject ? 'opacity-80' : 'text-gray-500'}`}>\n                                        {testData[subject]?.length || 0} Test{testData[subject]?.length === 1 ? '' : 's'}\n                                    </p>\n                                </button>\n                            ))}\n                        </div>\n                        <button\n                            onClick={openAddTestModal}\n                            className=\"w-full bg-blue-50 text-blue-700 font-semibold py-2 px-4 rounded-lg flex items-center justify-center hover:bg-blue-100 transition duration-300 mb-6\"\n                            disabled={!currentSelectedSubject}\n                        >\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"mr-2\"><line x1=\"12\" y1=\"5\" x2=\"12\" y2=\"19\"></line><line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\"></line></svg>\n                            {`Add New Test to ${currentSelectedSubject || '...'}`}\n                        </button>\n                    </>\n                )}\n\n                <div id=\"test-list-container\" className=\"space-y-3\">\n                    {filteredTests.length === 0 ? (\n                        <p className=\"text-gray-500 text-center py-4\">\n                            {isSearching ? 'No tests found.' : `No tests available for ${currentSelectedSubject}.`}\n                        </p>\n                    ) : (\n                        filteredTests.map(test => (\n                            <TestCard\n                                key={test.subject + '-' + test.title}\n                                test={test}\n                                subject={test.subject}\n                                isEditMode={trophyEditMode}\n                                onDelete={handleDeleteTest}\n                                handleToggleTestCompletion={handleToggleTestCompletion}\n                            />\n                        ))\n                    )}\n                </div>\n            </div>\n            <AddModal\n                isOpen={isModalOpen}\n                onClose={handleCloseModal}\n                onSave={handleSaveTest}\n                title={`Add New Test to ${currentSelectedSubject}`}\n                fields={modalFields}\n                showNotification={showNotification}\n            />\n        </>\n    );\n});\n\nexport default TestsCompletedPage;","// src/components/AddModal.js\nimport React, { useState, useEffect } from 'react';\nimport { useHandlers } from '../context/HandlerContext';\nimport { AnimatePresence, motion } from 'framer-motion';\n\nconst EMPTY_INITIAL_STATE = {};\n\nconst AddModal = ({ isOpen, onClose, onSave, title, fields, initialState = EMPTY_INITIAL_STATE }) => {\n    const handlers = useHandlers();\n    const [formData, setFormData] = useState({});\n\n    useEffect(() => {\n        if (isOpen) {\n            const initialData = fields.reduce((acc, field) => {\n                acc[field.name] = initialState[field.name] || field.defaultValue || '';\n                return acc;\n            }, {});\n            setFormData(initialData);\n        } else {\n            setFormData({});\n        }\n    }, [isOpen, fields, initialState]);\n\n    const handleChange = (e) => {\n        const { name, value } = e.target;\n        setFormData(prev => ({ ...prev, [name]: value }));\n    };\n\n    const handleSaveClick = () => {\n        for (const field of fields) {\n            if (field.required && !formData[field.name]) {\n                if (handlers.showNotification) {\n                    handlers.showNotification(`${field.label} is required.`, 'error');\n                } else {\n                    console.error(`${field.label} is required.`);\n                }\n                return;\n            }\n        }\n        if (onSave) {\n            onSave(formData);\n        } else if (handlers.addTimetableEntry) {\n            handlers.addTimetableEntry(formData);\n        }\n        onClose();\n    };\n\n    return (\n        <AnimatePresence>\n            {isOpen && (\n                <motion.div\n                    className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\"\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    exit={{ opacity: 0 }}\n                    transition={{ duration: 0.22 }}\n                    onClick={onClose}\n                >\n                    <div\n                        onClick={(e) => e.stopPropagation()}\n                        className=\"bg-white rounded-lg shadow-xl p-6 w-full max-w-md mx-auto relative\"\n                    >\n                        <h2 className=\"text-2xl font-bold mb-4 text-gray-800\">{title}</h2>\n                        <div className=\"space-y-4\">\n                            {fields.map(field => (\n                                <div key={field.name} className=\"flex flex-col\">\n                                    <label htmlFor={field.name} className=\"block text-sm font-medium text-gray-700 mb-1\">\n                                        {field.label}{field.required && <span className=\"text-red-500\">*</span>}\n                                    </label>\n                                    {field.type === 'textarea' ? (\n                                        <textarea\n                                            id={field.name}\n                                            name={field.name}\n                                            placeholder={field.placeholder || ''}\n                                            value={formData[field.name] || ''}\n                                            onChange={handleChange}\n                                            disabled={field.disabled || false}\n                                            rows=\"3\"\n                                            className=\"w-full px-4 py-2 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-50 disabled:bg-gray-200\"\n                                        />\n                                    ) : field.type === 'select' ? (\n                                        <select\n                                            id={field.name}\n                                            name={field.name}\n                                            value={formData[field.name] || ''}\n                                            onChange={handleChange}\n                                            disabled={field.disabled || false}\n                                            className=\"w-full px-4 py-2 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-50 disabled:bg-gray-200\"\n                                        >\n                                            {field.options && field.options.map(option => (\n                                                <option key={option.value} value={option.value}>\n                                                    {option.label}\n                                                </option>\n                                            ))}\n                                        </select>\n                                    ) : (\n                                        <input\n                                            type={field.type || 'text'}\n                                            id={field.name}\n                                            name={field.name}\n                                            placeholder={field.placeholder || ''}\n                                            value={formData[field.name] || ''}\n                                            onChange={handleChange}\n                                            disabled={field.disabled || false}\n                                            className=\"w-full px-4 py-2 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-50 disabled:bg-gray-200\"\n                                        />\n                                    )}\n                                </div>\n                            ))}\n                        </div>\n                        <div className=\"mt-6 flex justify-end space-x-3\">\n                            <button\n                                onClick={onClose}\n                                className=\"px-4 py-2 bg-gray-200 text-gray-700 font-bold rounded-lg hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-400 transition duration-300\"\n                            >\n                                Cancel\n                            </button>\n                            <button\n                                onClick={handleSaveClick}\n                                className=\"px-4 py-2 bg-blue-600 text-white font-bold rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition duration-300\"\n                            >\n                                Save\n                            </button>\n                        </div>\n                    </div>\n                </motion.div>\n            )}\n        </AnimatePresence>\n    );\n};\n\nexport default AddModal;"],"names":["React","_ref","test","subject","isEditMode","onDelete","handlers","useHandlers","linkClasses","link","cardClasses","concat","completed","_jsxs","id","title","className","onClick","handleCardClick","startsWith","window","open","console","warn","children","_jsx","motion","button","e","stopPropagation","toggleTestCompletion","whileTap","scale","animate","backgroundColor","borderColor","transition","type","stiffness","damping","svg","initial","rotate","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","mcqs","width","height","x1","y1","x2","y2","points","currentSelectedSubject","setCurrentSelectedSubject","showNotification","testData","useTestData","trophyEditMode","setTrophyEditMode","useState","isModalOpen","setIsModalOpen","searchQuery","setSearchQuery","subjects","useMemo","Object","keys","useEffect","length","includes","openAddTestModal","handleCloseModal","handleToggleEditMode","prev","handleSelectSubject","handleSearchChange","target","value","handleDeleteTest","deleteTest","handleToggleTestCompletion","isSearching","trim","filteredTests","entries","flatMap","_ref2","tests","filter","toLowerCase","map","_objectSpread","_Fragment","placeholder","onChange","_testData$subject","_testData$subject2","disabled","TestCard","AddModal","isOpen","onClose","onSave","data","addTest","date","fields","name","label","required","EMPTY_INITIAL_STATE","initialState","formData","setFormData","initialData","reduce","acc","field","defaultValue","handleChange","AnimatePresence","div","opacity","exit","duration","htmlFor","rows","options","option","handleSaveClick","error","addTimetableEntry"],"sourceRoot":""}