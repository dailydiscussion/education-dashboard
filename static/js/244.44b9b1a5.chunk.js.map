{"version":3,"file":"static/js/244.44b9b1a5.chunk.js","mappings":"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","sources":["components/TestCard.js","pages/TestsCompletedPage.js","components/AddModal.js"],"sourcesContent":["// src/components/TestCard.js\nimport React from 'react';\nimport { useHandlers } from '../context/HandlerContext';\nimport { motion } from 'framer-motion';\n\nconst TestCard = React.memo(({ test, subject, isEditMode, onDelete }) => {\n  const handlers = useHandlers();\n  const handleCardClick = () => {\n    // Allow clicking the card to open a link only if not in edit mode\n    if (!isEditMode && test.link && test.link.startsWith('http')) {\n      window.open(test.link, '_blank');\n    } else if (test.link) {\n      // Log a warning for developers if the link is malformed\n      console.warn(\n        `Invalid link for ${test.title}: ${test.link}. Must start with http:// or https://`\n      );\n    }\n  };\n\n  const handleCheckboxClick = (e) => {\n    // Prevent the card's click event from firing when the checkbox is clicked\n    e.stopPropagation();\n    handlers.toggleTestCompletion(subject, test.title, !test.completed);\n  };\n\n  // Define base classes for the card for consistency\n  const baseCardClasses =\n    'relative p-4 rounded-lg flex justify-between items-center transition-all duration-300';\n\n  // Define specific classes for the completed state\n  const completedClasses = 'bg-green-100';\n\n  // Define specific classes for the default (incomplete) state\n  const defaultClasses = 'bg-gray-50';\n\n  // Add hover effects only if the card has a link and is not in edit mode\n  const linkClasses =\n    test.link && !isEditMode ? 'cursor-pointer hover:shadow-md hover:-translate-y-1' : '';\n\n  // Combine all classes based on the component's state\n  const cardClasses = `${baseCardClasses} ${test.completed ? completedClasses : defaultClasses} ${linkClasses}`;\n\n  return (\n    <div\n      id={`trophy-test-item-${subject}-${test.title}`}\n      className={cardClasses}\n      onClick={handleCardClick}\n    >\n      <div className=\"flex items-center flex-grow min-w-0\">\n        {/* The interactive checkbox for toggling completion status */}\n        <motion.button\n          onClick={handleCheckboxClick}\n          className={`flex-shrink-0 w-6 h-6 rounded-full border-2 flex items-center justify-center mr-4`}\n          aria-label={test.completed ? 'Mark as incomplete' : 'Mark as complete'}\n          whileTap={{ scale: 0.85 }}\n          animate={{\n            scale: test.completed ? 1.1 : 1,\n            backgroundColor: test.completed ? '#22c55e' : '#ffffff00',\n            borderColor: test.completed ? '#22c55e' : '#d1d5db',\n          }}\n          transition={{ type: 'spring', stiffness: 400, damping: 15 }}\n        >\n          {test.completed && (\n            <motion.svg\n              initial={{ scale: 0, rotate: -90 }}\n              animate={{ scale: 1, rotate: 0 }}\n              transition={{ type: 'spring', stiffness: 500, damping: 20 }}\n              xmlns=\"http://www.w3.org/2000/svg\"\n              className=\"h-4 w-4 text-white\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              stroke=\"currentColor\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={3}\n                d=\"M5 13l4 4L19 7\"\n              />\n            </motion.svg>\n          )}\n        </motion.button>\n\n        {/* Text content with conditional styling for better readability */}\n        <div className=\"flex-1 min-w-0\">\n          <div className=\"flex items-center gap-2\">\n            <h4\n              className={`font-semibold truncate ${test.completed ? 'text-gray-800' : 'text-gray-900'}`}\n            >\n              {test.title}\n            </h4>\n          </div>\n          <p className={`text-sm mt-1 ${test.completed ? 'text-gray-600' : 'text-gray-600'}`}>\n            {test.mcqs} MCQs\n          </p>\n        </div>\n      </div>\n\n      {/* Controls for editing and navigation */}\n      <div className=\"flex-shrink-0 ml-2\">\n        {isEditMode ? (\n          <button\n            className=\"p-1.5 rounded-full text-gray-400 hover:text-red-500 hover:bg-red-100 transition-colors duration-200\"\n            onClick={(e) => {\n              e.stopPropagation();\n              onDelete(subject, test.title);\n            }}\n            aria-label=\"Delete test\"\n          >\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              width=\"18\"\n              height=\"18\"\n              viewBox=\"0 0 24 24\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeWidth=\"2\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n            >\n              <path d=\"M3 6h18\"></path>\n              <path d=\"M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6\"></path>\n              <path d=\"M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2\"></path>\n              <line x1=\"10\" y1=\"11\" x2=\"10\" y2=\"17\"></line>\n              <line x1=\"14\" y1=\"11\" x2=\"14\" y2=\"17\"></line>\n            </svg>\n          </button>\n        ) : (\n          test.link && (\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              width=\"20\"\n              height=\"20\"\n              viewBox=\"0 0 24 24\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeWidth=\"2\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              className=\"text-gray-400\"\n            >\n              <polyline points=\"9 18 15 12 9 6\"></polyline>\n            </svg>\n          )\n        )}\n      </div>\n    </div>\n  );\n});\n\nexport default TestCard;\n","// src/pages/TestsCompletedPage.js\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { useTestData } from '../context/TestDataContext'; // Only testData is in this context now\nimport TestCard from '../components/TestCard';\n\nimport { useHandlers } from '../context/HandlerContext';\nimport AddModal from '../components/AddModal'; // Import the new modal\n\nconst TestsCompletedPage = React.memo(\n  ({ currentSelectedSubject, setCurrentSelectedSubject, showNotification }) => {\n    const { testData } = useTestData();\n    const handlers = useHandlers();\n    const [trophyEditMode, setTrophyEditMode] = useState(false);\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [searchQuery, setSearchQuery] = useState('');\n\n    const subjects = useMemo(() => Object.keys(testData), [testData]);\n\n    useEffect(() => {\n      if (\n        subjects.length > 0 &&\n        (!currentSelectedSubject || !subjects.includes(currentSelectedSubject))\n      ) {\n        setCurrentSelectedSubject(subjects[0]);\n      } else if (subjects.length === 0 && currentSelectedSubject !== '') {\n        setCurrentSelectedSubject('');\n      }\n    }, [subjects, currentSelectedSubject, setCurrentSelectedSubject]);\n\n    const openAddTestModal = React.useCallback(() => {\n      setIsModalOpen(true);\n    }, []);\n\n    const handleCloseModal = React.useCallback(() => {\n      setIsModalOpen(false);\n    }, []);\n\n    const handleToggleEditMode = React.useCallback(() => {\n      setTrophyEditMode((prev) => !prev);\n    }, []);\n\n    const handleSelectSubject = React.useCallback(\n      (subject) => {\n        setCurrentSelectedSubject(subject);\n      },\n      [setCurrentSelectedSubject]\n    );\n\n    const handleSearchChange = React.useCallback((e) => {\n      setSearchQuery(e.target.value);\n    }, []);\n\n    const handleSaveTest = (data) => {\n      handlers.addTest(currentSelectedSubject, data.title, data.mcqs, data.date, data.link);\n    };\n\n    const handleDeleteTest = React.useCallback(\n      (subject, title) => {\n        handlers.deleteTest(subject, title);\n      },\n      [handlers]\n    );\n\n    const handleToggleTestCompletion = React.useCallback(\n      (id) => {\n        handlers.toggleTestCompletion(id);\n      },\n      [handlers]\n    );\n\n    const modalFields = [\n      { name: 'title', label: 'Test Title', placeholder: 'e.g., Mid-term Exam', required: true },\n      {\n        name: 'mcqs',\n        label: 'Number of MCQs',\n        type: 'number',\n        placeholder: 'e.g., 40',\n        required: true,\n      },\n      { name: 'date', label: 'Completion Date', type: 'date', required: true },\n      {\n        name: 'link',\n        label: 'Test Link (Optional)',\n        type: 'url',\n        placeholder: 'https://example.com/test',\n      },\n    ];\n\n    // Global search: if searchQuery, search all subjects\n    const isSearching = searchQuery.trim().length > 0;\n    const filteredTests = isSearching\n      ? Object.entries(testData).flatMap(([subject, tests]) =>\n          tests\n            .filter((test) => test.title.toLowerCase().includes(searchQuery.toLowerCase()))\n            .map((test) => ({ ...test, subject }))\n        )\n      : currentSelectedSubject && testData[currentSelectedSubject]\n        ? testData[currentSelectedSubject].map((test) => ({\n            ...test,\n            subject: currentSelectedSubject,\n          }))\n        : [];\n\n    return (\n      <>\n        <div id=\"page-trophy\" className=\"page px-6 py-8\">\n          <header className=\"flex items-center justify-between mb-2\">\n            <h1 className=\"text-3xl font-bold text-gray-900\">Tests</h1>\n            <button\n              onClick={handleToggleEditMode}\n              className=\"bg-blue-50 text-blue-700 font-semibold text-xs px-4 py-2 rounded-full flex items-center hover:bg-blue-100 transition duration-200\"\n              aria-label={trophyEditMode ? 'Done editing tests' : 'Edit tests'}\n            >\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"16\"\n                height=\"16\"\n                viewBox=\"0 0 24 24\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeWidth=\"2\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                className=\"mr-1\"\n              >\n                <path d=\"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\"></path>\n                <path d=\"M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z\"></path>\n              </svg>\n              {trophyEditMode ? 'Done' : 'Edit'}\n            </button>\n          </header>\n          <p className=\"text-gray-500 mb-6\">Completed Tests & Progress</p>\n\n          <div className=\"mb-6\">\n            <input\n              type=\"text\"\n              placeholder=\"Search tests...\"\n              className=\"w-full px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-50\"\n              value={searchQuery}\n              onChange={handleSearchChange}\n              aria-label=\"Search tests\"\n            />\n          </div>\n\n          {/* Hide subject selector and add button during search */}\n          {!isSearching && (\n            <>\n              <div\n                className=\"flex space-x-3 mb-6 overflow-x-auto hide-scrollbar\"\n                id=\"subject-filters-container\"\n              >\n                {subjects.map((subject) => (\n                  <button\n                    key={subject}\n                    className={`subject-filter flex-shrink-0 text-left p-3 rounded-lg transition-colors duration-200\n                                        ${currentSelectedSubject === subject ? 'bg-blue-600 text-white' : 'bg-gray-100 text-gray-700 hover:bg-gray-200'}`}\n                    onClick={() => handleSelectSubject(subject)}\n                  >\n                    <p className=\"font-bold\">{subject}</p>\n                    <p\n                      className={`text-sm ${currentSelectedSubject === subject ? 'opacity-80' : 'text-gray-500'}`}\n                    >\n                      {testData[subject]?.length || 0} Test\n                      {testData[subject]?.length === 1 ? '' : 's'}\n                    </p>\n                  </button>\n                ))}\n              </div>\n              <button\n                onClick={openAddTestModal}\n                className=\"w-full bg-blue-50 text-blue-700 font-semibold py-2 px-4 rounded-lg flex items-center justify-center hover:bg-blue-100 transition duration-300 mb-6\"\n                disabled={!currentSelectedSubject}\n              >\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  width=\"20\"\n                  height=\"20\"\n                  viewBox=\"0 0 24 24\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  strokeWidth=\"2\"\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  className=\"mr-2\"\n                >\n                  <line x1=\"12\" y1=\"5\" x2=\"12\" y2=\"19\"></line>\n                  <line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\"></line>\n                </svg>\n                {`Add New Test to ${currentSelectedSubject || '...'}`}\n              </button>\n            </>\n          )}\n\n          <div id=\"test-list-container\" className=\"space-y-3\">\n            {filteredTests.length === 0 ? (\n              <p className=\"text-gray-500 text-center py-4\">\n                {isSearching\n                  ? 'No tests found.'\n                  : `No tests available for ${currentSelectedSubject}.`}\n              </p>\n            ) : (\n              filteredTests.map((test) => (\n                <TestCard\n                  key={test.subject + '-' + test.title}\n                  test={test}\n                  subject={test.subject}\n                  isEditMode={trophyEditMode}\n                  onDelete={handleDeleteTest}\n                  handleToggleTestCompletion={handleToggleTestCompletion}\n                />\n              ))\n            )}\n          </div>\n        </div>\n        <AddModal\n          isOpen={isModalOpen}\n          onClose={handleCloseModal}\n          onSave={handleSaveTest}\n          title={`Add New Test to ${currentSelectedSubject}`}\n          fields={modalFields}\n          showNotification={showNotification}\n        />\n      </>\n    );\n  }\n);\n\nexport default TestsCompletedPage;\n","// src/components/AddModal.js\nimport React, { useState, useEffect } from 'react';\nimport { useHandlers } from '../context/HandlerContext';\nimport { AnimatePresence, motion } from 'framer-motion';\n\nconst EMPTY_INITIAL_STATE = {};\n\nconst AddModal = ({\n  isOpen,\n  onClose,\n  onSave,\n  title,\n  fields,\n  initialState = EMPTY_INITIAL_STATE,\n}) => {\n  const handlers = useHandlers();\n  const [formData, setFormData] = useState({});\n\n  useEffect(() => {\n    if (isOpen) {\n      const initialData = fields.reduce((acc, field) => {\n        acc[field.name] = initialState[field.name] || field.defaultValue || '';\n        return acc;\n      }, {});\n      setFormData(initialData);\n    } else {\n      setFormData({});\n    }\n  }, [isOpen, fields, initialState]);\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData((prev) => ({ ...prev, [name]: value }));\n  };\n\n  const handleSaveClick = () => {\n    for (const field of fields) {\n      if (field.required && !formData[field.name]) {\n        if (handlers.showNotification) {\n          handlers.showNotification(`${field.label} is required.`, 'error');\n        } else {\n          console.error(`${field.label} is required.`);\n        }\n        return;\n      }\n    }\n    if (onSave) {\n      onSave(formData);\n    } else if (handlers.addTimetableEntry) {\n      handlers.addTimetableEntry(formData);\n    }\n    onClose();\n  };\n\n  return (\n    <AnimatePresence>\n      {isOpen && (\n        <motion.div\n          className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\"\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n          transition={{ duration: 0.22 }}\n          onClick={onClose}\n        >\n          <div\n            onClick={(e) => e.stopPropagation()}\n            className=\"bg-white rounded-lg shadow-xl p-6 w-full max-w-md mx-auto relative\"\n          >\n            <h2 className=\"text-2xl font-bold mb-4 text-gray-800\">{title}</h2>\n            <div className=\"space-y-4\">\n              {fields.map((field) => (\n                <div key={field.name} className=\"flex flex-col\">\n                  <label\n                    htmlFor={field.name}\n                    className=\"block text-sm font-medium text-gray-700 mb-1\"\n                  >\n                    {field.label}\n                    {field.required && <span className=\"text-red-500\">*</span>}\n                  </label>\n                  {field.type === 'textarea' ? (\n                    <textarea\n                      id={field.name}\n                      name={field.name}\n                      placeholder={field.placeholder || ''}\n                      value={formData[field.name] || ''}\n                      onChange={handleChange}\n                      disabled={field.disabled || false}\n                      rows=\"3\"\n                      className=\"w-full px-4 py-2 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-50 disabled:bg-gray-200\"\n                    />\n                  ) : field.type === 'select' ? (\n                    <select\n                      id={field.name}\n                      name={field.name}\n                      value={formData[field.name] || ''}\n                      onChange={handleChange}\n                      disabled={field.disabled || false}\n                      className=\"w-full px-4 py-2 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-50 disabled:bg-gray-200\"\n                    >\n                      {field.options &&\n                        field.options.map((option) => (\n                          <option key={option.value} value={option.value}>\n                            {option.label}\n                          </option>\n                        ))}\n                    </select>\n                  ) : (\n                    <input\n                      type={field.type || 'text'}\n                      id={field.name}\n                      name={field.name}\n                      placeholder={field.placeholder || ''}\n                      value={formData[field.name] || ''}\n                      onChange={handleChange}\n                      disabled={field.disabled || false}\n                      className=\"w-full px-4 py-2 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-50 disabled:bg-gray-200\"\n                    />\n                  )}\n                </div>\n              ))}\n            </div>\n            <div className=\"mt-6 flex justify-end space-x-3\">\n              <button\n                onClick={onClose}\n                className=\"px-4 py-2 bg-gray-200 text-gray-700 font-bold rounded-lg hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-400 transition duration-300\"\n              >\n                Cancel\n              </button>\n              <button\n                onClick={handleSaveClick}\n                className=\"px-4 py-2 bg-blue-600 text-white font-bold rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition duration-300\"\n              >\n                Save\n              </button>\n            </div>\n          </div>\n        </motion.div>\n      )}\n    </AnimatePresence>\n  );\n};\n\nexport default AddModal;\n"],"names":["React","_ref","test","subject","isEditMode","onDelete","handlers","useHandlers","linkClasses","link","cardClasses","concat","completed","_jsxs","id","title","className","onClick","handleCardClick","startsWith","window","open","console","warn","children","_jsx","motion","button","e","stopPropagation","toggleTestCompletion","whileTap","scale","animate","backgroundColor","borderColor","transition","type","stiffness","damping","svg","initial","rotate","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","mcqs","width","height","x1","y1","x2","y2","points","currentSelectedSubject","setCurrentSelectedSubject","showNotification","testData","useTestData","trophyEditMode","setTrophyEditMode","useState","isModalOpen","setIsModalOpen","searchQuery","setSearchQuery","subjects","useMemo","Object","keys","useEffect","length","includes","openAddTestModal","handleCloseModal","handleToggleEditMode","prev","handleSelectSubject","handleSearchChange","target","value","handleDeleteTest","deleteTest","handleToggleTestCompletion","isSearching","trim","filteredTests","entries","flatMap","_ref2","tests","filter","toLowerCase","map","_objectSpread","_Fragment","placeholder","onChange","_testData$subject","_testData$subject2","disabled","TestCard","AddModal","isOpen","onClose","onSave","data","addTest","date","fields","name","label","required","EMPTY_INITIAL_STATE","initialState","formData","setFormData","initialData","reduce","acc","field","defaultValue","handleChange","AnimatePresence","div","opacity","exit","duration","htmlFor","rows","options","option","handleSaveClick","error","addTimetableEntry"],"sourceRoot":""}