{"version":3,"file":"static/js/244.7c68bcda.chunk.js","mappings":"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","sources":["components/TestCard.js","pages/TestsCompletedPage.js","components/AddModal.js"],"sourcesContent":["// src/components/TestCard.js\r\nimport React from 'react';\r\n\r\nconst TestCard = React.memo(({ test, subject, isEditMode, onDelete, handleToggleTestCompletion }) => {\r\n    const handleCardClick = () => {\r\n        // Allow clicking the card to open a link only if not in edit mode\r\n        if (!isEditMode && test.link && test.link.startsWith('http')) {\r\n            window.open(test.link, '_blank');\r\n        } else if (test.link) {\r\n            // Log a warning for developers if the link is malformed\r\n            console.warn(`Invalid link for ${test.title}: ${test.link}. Must start with http:// or https://`);\r\n        }\r\n    };\r\n\r\n    const handleCheckboxClick = (e) => {\r\n        // Prevent the card's click event from firing when the checkbox is clicked\r\n        e.stopPropagation();\r\n        handleToggleTestCompletion(subject, test.title, !test.completed);\r\n    };\r\n\r\n    // Define base classes for the card for consistency\r\n    const baseCardClasses = 'relative p-4 rounded-lg flex justify-between items-center transition-all duration-300 shadow-sm';\r\n    \r\n    // Define specific classes for the completed state\r\n    const completedClasses = 'bg-green-50';\r\n    \r\n    // Define specific classes for the default (incomplete) state\r\n    const defaultClasses = 'bg-white border border-gray-200';\r\n    \r\n    // Add hover effects only if the card has a link and is not in edit mode\r\n    const linkClasses = test.link && !isEditMode ? 'cursor-pointer hover:shadow-md hover:-translate-y-1' : '';\r\n\r\n    // Combine all classes based on the component's state\r\n    const cardClasses = `${baseCardClasses} ${test.completed ? completedClasses : defaultClasses} ${linkClasses}`;\r\n\r\n    return (\r\n        <div\r\n            id={`trophy-test-item-${subject}-${test.title}`}\r\n            className={cardClasses}\r\n            onClick={handleCardClick}\r\n        >\r\n            <div className=\"flex items-center flex-grow min-w-0\">\r\n                {/* The interactive checkbox for toggling completion status */}\r\n                <button\r\n                    onClick={handleCheckboxClick}\r\n                    className={`flex-shrink-0 w-6 h-6 rounded-full border-2 flex items-center justify-center transition-colors duration-200 ${test.completed ? \"bg-green-500 border-green-500\" : \"border-gray-300 hover:border-green-400\"} mr-4`}\r\n                    aria-label={test.completed ? \"Mark as incomplete\" : \"Mark as complete\"}\r\n                >\r\n                    {test.completed && (\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4 text-white\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={3} d=\"M5 13l4 4L19 7\" />\r\n                        </svg>\r\n                    )}\r\n                </button>\r\n                \r\n                {/* Text content with conditional styling for better readability */}\r\n                <div className=\"flex-1 min-w-0\">\r\n                    <div className=\"flex items-center gap-2\">\r\n                        <h4 className={`font-semibold truncate ${test.completed ? 'text-gray-800' : 'text-orange-600'}`}>{test.title}</h4>\r\n                    </div>\r\n                    <p className={`text-sm mt-1 ${test.completed ? 'text-gray-600' : 'text-gray-600'}`}>{test.mcqs} MCQs</p>\r\n                    <p className={`text-xs mt-1 ${test.completed ? 'text-green-600' : 'text-gray-600'}`}>Added on {test.date}</p>\r\n                </div>\r\n            </div>\r\n            \r\n            {/* Controls for editing and navigation */}\r\n            <div className=\"flex-shrink-0 ml-2\">\r\n                {isEditMode ? (\r\n                    <button\r\n                        className=\"p-1.5 rounded-full text-gray-400 hover:text-red-500 hover:bg-red-100 transition-colors duration-200\"\r\n                        onClick={(e) => { e.stopPropagation(); onDelete(subject, test.title); }}\r\n                        aria-label=\"Delete test\"\r\n                    >\r\n                         <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><path d=\"M3 6h18\"></path><path d=\"M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6\"></path><path d=\"M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2\"></path><line x1=\"10\" y1=\"11\" x2=\"10\" y2=\"17\"></line><line x1=\"14\" y1=\"11\" x2=\"14\" y2=\"17\"></line></svg>\r\n                    </button>\r\n                ) : (\r\n                    test.link && <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"text-gray-400\"><polyline points=\"9 18 15 12 9 6\"></polyline></svg>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default TestCard;","// src/pages/TestsCompletedPage.js\r\nimport React, { useState, useEffect, useMemo } from 'react';\r\nimport TestCard from '../components/TestCard';\r\nimport AddModal from '../components/AddModal'; // Import the new modal\r\n\r\nconst TestsCompletedPage = React.memo(({ testData, currentSelectedSubject, setCurrentSelectedSubject, addTest, deleteTest, handleToggleTestCompletion, showNotification }) => {\r\n    const [trophyEditMode, setTrophyEditMode] = useState(false);\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const [searchQuery, setSearchQuery] = useState('');\r\n\r\n    const subjects = useMemo(() => Object.keys(testData), [testData]);\r\n\r\n    useEffect(() => {\r\n        if (subjects.length > 0 && (!currentSelectedSubject || !subjects.includes(currentSelectedSubject))) {\r\n            setCurrentSelectedSubject(subjects[0]);\r\n        } else if (subjects.length === 0 && currentSelectedSubject !== '') {\r\n            setCurrentSelectedSubject('');\r\n        }\r\n    }, [subjects, currentSelectedSubject, setCurrentSelectedSubject]);\r\n\r\n    const openAddTestModal = () => {\r\n        setIsModalOpen(true);\r\n    };\r\n\r\n    const handleSaveTest = (data) => {\r\n        addTest(currentSelectedSubject, data.title, data.mcqs, data.date, data.link);\r\n    };\r\n\r\n    const modalFields = [\r\n        { name: 'title', label: 'Test Title', placeholder: 'e.g., Mid-term Exam', required: true },\r\n        { name: 'mcqs', label: 'Number of MCQs', type: 'number', placeholder: 'e.g., 40', required: true },\r\n        { name: 'date', label: 'Completion Date', type: 'date', required: true },\r\n        { name: 'link', label: 'Test Link (Optional)', type: 'url', placeholder: 'https://example.com/test' }\r\n    ];\r\n\r\n    const filteredTests = currentSelectedSubject && testData[currentSelectedSubject]\r\n        ? testData[currentSelectedSubject].filter(test =>\r\n            test.title.toLowerCase().includes(searchQuery.toLowerCase())\r\n        )\r\n        : [];\r\n\r\n    return (\r\n        <>\r\n            <div id=\"page-trophy\" className=\"page px-6 py-8\">\r\n                <header className=\"flex items-center justify-between mb-2\">\r\n                    <h1 className=\"text-3xl font-bold text-gray-900\">Tests</h1>\r\n                    <button\r\n                        onClick={() => setTrophyEditMode(!trophyEditMode)}\r\n                        className=\"text-blue-600 hover:text-blue-800 text-sm font-medium flex items-center\"\r\n                        aria-label={trophyEditMode ? 'Done editing tests' : 'Edit tests'}\r\n                    >\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"mr-1\"><path d=\"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\"></path><path d=\"M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z\"></path></svg>\r\n                        {trophyEditMode ? 'Done' : 'Edit'}\r\n                    </button>\r\n                </header>\r\n                <p className=\"text-gray-500 mb-6\">Completed Tests & Progress</p>\r\n\r\n                <div className=\"mb-6\">\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Search tests...\"\r\n                        className=\"w-full px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-50\"\r\n                        value={searchQuery}\r\n                        onChange={(e) => setSearchQuery(e.target.value)}\r\n                        aria-label=\"Search tests\"\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"flex space-x-3 mb-6 overflow-x-auto no-scrollbar\" id=\"subject-filters-container\">\r\n                    {subjects.map(subject => (\r\n                        <button\r\n                            key={subject}\r\n                            className={`subject-filter flex-shrink-0 text-left p-3 rounded-lg transition-colors duration-200 shadow-sm\r\n                                ${currentSelectedSubject === subject ? 'bg-blue-600 text-white' : 'bg-gray-100 text-gray-700 hover:bg-gray-200'}`}\r\n                            onClick={() => setCurrentSelectedSubject(subject)}\r\n                        >\r\n                            <p className=\"font-bold\">{subject}</p>\r\n                            <p className={`text-sm ${currentSelectedSubject === subject ? 'opacity-80' : 'text-gray-500'}`}>\r\n                                {testData[subject]?.length || 0} Test{testData[subject]?.length === 1 ? '' : 's'}\r\n                            </p>\r\n                        </button>\r\n                    ))}\r\n                </div>\r\n                \r\n                <button\r\n                    onClick={openAddTestModal}\r\n                    className=\"w-full bg-blue-50 text-blue-700 font-semibold py-2 px-4 rounded-lg flex items-center justify-center hover:bg-blue-100 transition duration-300 mb-6\"\r\n                    disabled={!currentSelectedSubject}\r\n                >\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"mr-2\"><line x1=\"12\" y1=\"5\" x2=\"12\" y2=\"19\"></line><line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\"></line></svg>\r\n                    {`Add New Test to ${currentSelectedSubject || '...'}`}\r\n                </button>\r\n\r\n                <div id=\"test-list-container\" className=\"space-y-3\">\r\n                    {filteredTests.length === 0 ? (\r\n                        <p className=\"text-gray-500 text-center py-4\">No tests available for {currentSelectedSubject}.</p>\r\n                    ) : (\r\n                        filteredTests.map(test => (\r\n                            <TestCard\r\n                                key={test.title}\r\n                                test={test}\r\n                                subject={currentSelectedSubject}\r\n                                isEditMode={trophyEditMode}\r\n                                onDelete={deleteTest}\r\n                                handleToggleTestCompletion={handleToggleTestCompletion}\r\n                            />\r\n                        ))\r\n                    )}\r\n                </div>\r\n            </div>\r\n            <AddModal\r\n                isOpen={isModalOpen}\r\n                onClose={() => setIsModalOpen(false)}\r\n                onSave={handleSaveTest}\r\n                title={`Add New Test to ${currentSelectedSubject}`}\r\n                fields={modalFields}\r\n                showNotification={showNotification}\r\n            />\r\n        </>\r\n    );\r\n});\r\n\r\nexport default TestsCompletedPage;","// src/components/AddModal.js\r\nimport React, { useState, useEffect } from 'react';\r\n\r\n// By defining the default object outside the component, we ensure it's a stable reference.\r\n// This prevents the useEffect hook from re-running unnecessarily.\r\nconst EMPTY_INITIAL_STATE = {};\r\n\r\nconst AddModal = ({ isOpen, onClose, onSave, title, fields, initialState = EMPTY_INITIAL_STATE, showNotification }) => {\r\n    const [formData, setFormData] = useState({});\r\n\r\n    useEffect(() => {\r\n        // This effect now correctly runs only when the modal is opened,\r\n        // or if the `fields` or `initialState` props genuinely change.\r\n        // Previously, a new `initialState` object was created on every render,\r\n        // causing this effect to fire on every keystroke and reset the form data.\r\n        if (isOpen) {\r\n            const initialData = fields.reduce((acc, field) => {\r\n                acc[field.name] = initialState[field.name] || field.defaultValue || '';\r\n                return acc;\r\n            }, {});\r\n            setFormData(initialData);\r\n        } else {\r\n            // Reset formData when the modal closes to ensure a clean state for next time.\r\n            setFormData({});\r\n        }\r\n    }, [isOpen, fields, initialState]);\r\n\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setFormData(prev => ({ ...prev, [name]: value }));\r\n    };\r\n\r\n    const handleSaveClick = () => {\r\n        // Basic validation to ensure required fields are filled.\r\n        for (const field of fields) {\r\n            if (field.required && !formData[field.name]) {\r\n                if (showNotification) {\r\n                    showNotification(`${field.label} is required.`, 'error');\r\n                } else {\r\n                    console.error(`${field.label} is required.`);\r\n                }\r\n                return;\r\n            }\r\n        }\r\n        onSave(formData);\r\n        onClose(); // Close modal after saving\r\n    };\r\n\r\n    if (!isOpen) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\">\r\n            <div className=\"bg-white rounded-lg shadow-xl p-6 w-full max-w-md mx-auto relative transform transition-all scale-100 opacity-100\">\r\n                <h2 className=\"text-2xl font-bold mb-4 text-gray-800\">{title}</h2>\r\n                <div className=\"space-y-4\">\r\n                    {fields.map(field => (\r\n                        <div key={field.name} className=\"flex flex-col\">\r\n                            <label htmlFor={field.name} className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                                {field.label}{field.required && <span className=\"text-red-500\">*</span>}\r\n                            </label>\r\n                            {field.type === 'textarea' ? (\r\n                                <textarea\r\n                                    id={field.name}\r\n                                    name={field.name}\r\n                                    placeholder={field.placeholder || ''}\r\n                                    value={formData[field.name] || ''}\r\n                                    onChange={handleChange}\r\n                                    // The `disabled` property is correctly read from the field config.\r\n                                    // Since `addModalFields` doesn't set it, this will be undefined, and the input will be enabled.\r\n                                    disabled={field.disabled || false}\r\n                                    rows=\"3\"\r\n                                    className=\"w-full px-4 py-2 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-50 disabled:bg-gray-200\"\r\n                                />\r\n                            ) : field.type === 'select' ? (\r\n                                <select\r\n                                    id={field.name}\r\n                                    name={field.name}\r\n                                    value={formData[field.name] || ''}\r\n                                    onChange={handleChange}\r\n                                    disabled={field.disabled || false}\r\n                                    className=\"w-full px-4 py-2 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-50 disabled:bg-gray-200\"\r\n                                >\r\n                                    {field.options && field.options.map(option => (\r\n                                        <option key={option.value} value={option.value}>\r\n                                            {option.label}\r\n                                        </option>\r\n                                    ))}\r\n                                </select>\r\n                            ) : (\r\n                                <input\r\n                                    type={field.type || 'text'}\r\n                                    id={field.name}\r\n                                    name={field.name}\r\n                                    placeholder={field.placeholder || ''}\r\n                                    value={formData[field.name] || ''}\r\n                                    onChange={handleChange}\r\n                                    disabled={field.disabled || false}\r\n                                    className=\"w-full px-4 py-2 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-50 disabled:bg-gray-200\"\r\n                                />\r\n                            )}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                <div className=\"mt-6 flex justify-end space-x-3\">\r\n                     <button\r\n                        onClick={onClose}\r\n                        className=\"px-4 py-2 bg-gray-200 text-gray-700 font-bold rounded-lg hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-400 transition duration-300\"\r\n                    >\r\n                        Cancel\r\n                    </button>\r\n                    <button\r\n                        onClick={handleSaveClick}\r\n                        className=\"px-4 py-2 bg-blue-600 text-white font-bold rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition duration-300\"\r\n                    >\r\n                        Save\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AddModal;"],"names":["React","_ref","test","subject","isEditMode","onDelete","handleToggleTestCompletion","linkClasses","link","cardClasses","concat","completed","_jsxs","id","title","className","onClick","handleCardClick","startsWith","window","open","console","warn","children","_jsx","e","stopPropagation","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","mcqs","date","width","height","x1","y1","x2","y2","points","testData","currentSelectedSubject","setCurrentSelectedSubject","addTest","deleteTest","showNotification","trophyEditMode","setTrophyEditMode","useState","isModalOpen","setIsModalOpen","searchQuery","setSearchQuery","subjects","useMemo","Object","keys","useEffect","length","includes","filteredTests","filter","toLowerCase","_Fragment","type","placeholder","value","onChange","target","map","_testData$subject","_testData$subject2","openAddTestModal","disabled","TestCard","AddModal","isOpen","onClose","onSave","data","fields","name","label","required","EMPTY_INITIAL_STATE","initialState","formData","setFormData","initialData","reduce","acc","field","defaultValue","handleChange","prev","_objectSpread","htmlFor","rows","options","option","handleSaveClick","error"],"sourceRoot":""}