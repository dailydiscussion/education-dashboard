{"version":3,"file":"static/js/763.d1129366.chunk.js","mappings":"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","sources":["components/AddModal.js","components/ManagedSubjectSection.js","pages/ManageContentPage.js"],"sourcesContent":["// src/components/AddModal.js\nimport React, { useState, useEffect } from 'react';\nimport { useHandlers } from '../context/HandlerContext';\n\n// By defining the default object outside the component, we ensure it's a stable reference.\n// This prevents the useEffect hook from re-running unnecessarily.\nconst EMPTY_INITIAL_STATE = {};\n\nconst AddModal = ({ isOpen, onClose, onSave, title, fields, initialState = EMPTY_INITIAL_STATE }) => {\n    const handlers = useHandlers();\n    const [formData, setFormData] = useState({});\n\n    useEffect(() => {\n        // This effect now correctly runs only when the modal is opened,\n        // or if the `fields` or `initialState` props genuinely change.\n        // Previously, a new `initialState` object was created on every render,\n        // causing this effect to fire on every keystroke and reset the form data.\n        if (isOpen) {\n            const initialData = fields.reduce((acc, field) => {\n                acc[field.name] = initialState[field.name] || field.defaultValue || '';\n                return acc;\n            }, {});\n            setFormData(initialData);\n        } else {\n            // Reset formData when the modal closes to ensure a clean state for next time.\n            setFormData({});\n        }\n    }, [isOpen, fields, initialState]);\n\n\n    const handleChange = (e) => {\n        const { name, value } = e.target;\n        setFormData(prev => ({ ...prev, [name]: value }));\n    };\n\n    const handleSaveClick = () => {\n        // Basic validation to ensure required fields are filled.\n        for (const field of fields) {\n            if (field.required && !formData[field.name]) {\n                if (handlers.showNotification) {\n                    handlers.showNotification(`${field.label} is required.`, 'error');\n                } else {\n                    console.error(`${field.label} is required.`);\n                }\n                return;\n            }\n        }\n        if (onSave) {\n            onSave(formData);\n        } else if (handlers.addTimetableEntry) {\n            handlers.addTimetableEntry(formData);\n        }\n        onClose(); // Close modal after saving\n    };\n\n    if (!isOpen) {\n        return null;\n    }\n\n    return (\n        <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\">\n            <div className=\"bg-white rounded-lg shadow-xl p-6 w-full max-w-md mx-auto relative transform transition-all scale-100 opacity-100\">\n                <h2 className=\"text-2xl font-bold mb-4 text-gray-800\">{title}</h2>\n                <div className=\"space-y-4\">\n                    {fields.map(field => (\n                        <div key={field.name} className=\"flex flex-col\">\n                            <label htmlFor={field.name} className=\"block text-sm font-medium text-gray-700 mb-1\">\n                                {field.label}{field.required && <span className=\"text-red-500\">*</span>}\n                            </label>\n                            {field.type === 'textarea' ? (\n                                <textarea\n                                    id={field.name}\n                                    name={field.name}\n                                    placeholder={field.placeholder || ''}\n                                    value={formData[field.name] || ''}\n                                    onChange={handleChange}\n                                    // The `disabled` property is correctly read from the field config.\n                                    // Since `addModalFields` doesn't set it, this will be undefined, and the input will be enabled.\n                                    disabled={field.disabled || false}\n                                    rows=\"3\"\n                                    className=\"w-full px-4 py-2 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-50 disabled:bg-gray-200\"\n                                />\n                            ) : field.type === 'select' ? (\n                                <select\n                                    id={field.name}\n                                    name={field.name}\n                                    value={formData[field.name] || ''}\n                                    onChange={handleChange}\n                                    disabled={field.disabled || false}\n                                    className=\"w-full px-4 py-2 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-50 disabled:bg-gray-200\"\n                                >\n                                    {field.options && field.options.map(option => (\n                                        <option key={option.value} value={option.value}>\n                                            {option.label}\n                                        </option>\n                                    ))}\n                                </select>\n                            ) : (\n                                <input\n                                    type={field.type || 'text'}\n                                    id={field.name}\n                                    name={field.name}\n                                    placeholder={field.placeholder || ''}\n                                    value={formData[field.name] || ''}\n                                    onChange={handleChange}\n                                    disabled={field.disabled || false}\n                                    className=\"w-full px-4 py-2 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-50 disabled:bg-gray-200\"\n                                />\n                            )}\n                        </div>\n                    ))}\n                </div>\n                <div className=\"mt-6 flex justify-end space-x-3\">\n                     <button\n                        onClick={onClose}\n                        className=\"px-4 py-2 bg-gray-200 text-gray-700 font-bold rounded-lg hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-400 transition duration-300\"\n                    >\n                        Cancel\n                    </button>\n                    <button\n                        onClick={handleSaveClick}\n                        className=\"px-4 py-2 bg-blue-600 text-white font-bold rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition duration-300\"\n                    >\n                        Save\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default AddModal;","// src/components/ManagedSubjectSection.js\r\nimport React from 'react';\r\n\r\nconst ManagedSubjectSection = React.memo(({ subjectName, tests, onDeleteSubject, onDeleteTest, isExpanded, onToggleExpand }) => {\r\n    return (\r\n        <div className=\"bg-white p-3 rounded-lg border border-gray-200 shadow-sm\">\r\n            <div\r\n                className=\"flex justify-between items-center mb-3 cursor-pointer\"\r\n                onClick={() => onToggleExpand(subjectName)}\r\n            >\r\n                <h3 className=\"font-bold text-lg text-gray-800\">{subjectName}</h3>\r\n                <div className=\"flex items-center\">\r\n                    <button\r\n                        onClick={(e) => { e.stopPropagation(); onDeleteSubject(subjectName); }}\r\n                        className=\"p-1.5 rounded-full text-gray-400 hover:text-red-500 transition-colors duration-200 mr-2\"\r\n                        aria-label=\"Delete subject\"\r\n                    >\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><path d=\"M3 6h18\"></path><path d=\"M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6\"></path><path d=\"M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2\"></path><line x1=\"10\" y1=\"11\" x2=\"10\" y2=\"17\"></line><line x1=\"14\" y1=\"11\" x2=\"14\" y2=\"17\"></line></svg>\r\n                    </button>\r\n                    <svg\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                        className={`h-5 w-5 text-gray-500 transform transition-transform duration-200 ${isExpanded ? 'rotate-180' : ''}`}\r\n                        fill=\"none\"\r\n                        viewBox=\"0 0 24 24\"\r\n                        stroke=\"currentColor\"\r\n                    >\r\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\r\n                    </svg>\r\n                </div>\r\n            </div>\r\n            {isExpanded && (\r\n                <div className=\"space-y-2 pt-2 border-t border-gray-100\">\r\n                    {tests.length === 0 ? (\r\n                        <p className=\"text-gray-500 text-sm italic\">No tests in this subject.</p>\r\n                    ) : (\r\n                        tests.map(test => (\r\n                            <div key={test.title} className=\"flex justify-between items-center bg-gray-50 p-3 rounded-md border border-gray-200 text-sm\">\r\n                                <span>{test.title} ({test.mcqs} MCQs, {test.date})</span>\r\n                                <button\r\n                                    onClick={(e) => { e.stopPropagation(); onDeleteTest(subjectName, test.title); }}\r\n                                    className=\"p-1.5 rounded-full text-gray-400 hover:text-red-500 transition-colors duration-200 ml-2\"\r\n                                    aria-label=\"Delete test\"\r\n                                >\r\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><path d=\"M3 6h18\"></path><path d=\"M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6\"></path><path d=\"M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2\"></path><line x1=\"10\" y1=\"11\" x2=\"10\" y2=\"17\"></line><line x1=\"14\" y1=\"11\" x2=\"14\" y2=\"17\"></line></svg>\r\n                                </button>\r\n                            </div>\r\n                        ))\r\n                    )}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default ManagedSubjectSection;","// src/pages/ManageContentPage.js\nimport React, { useState, useCallback, useMemo } from 'react';\nimport { useTestData } from '../context/TestDataContext'; // Only testData is in this context now\nimport ManagedSubjectSection from '../components/ManagedSubjectSection';\nimport { useHandlers } from '../context/HandlerContext';\nimport AddModal from '../components/AddModal'; // Import the new modal\n\nconst ManageContentPage = React.memo(({ onBackToProfile, showNotification }) => {\n    const { testData } = useTestData();\n    const handlers = useHandlers();\n    const [expandedSubjects, setExpandedSubjects] = useState({});\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [modalConfig, setModalConfig] = useState({ title: '', fields: [], onSave: () => {} });\n\n    const subjects = useMemo(() => Object.keys(testData), [testData]);\n\n    const handleToggleExpand = useCallback((subjectName) => {\n        setExpandedSubjects(prev => ({\n            ...prev,\n            [subjectName]: !prev[subjectName]\n        }));\n    }, []);\n\n    const openAddSubjectModal = () => {\n        setModalConfig({\n            title: 'Add New Subject',\n            fields: [\n                { name: 'subjectName', label: 'Subject Name', placeholder: 'e.g., Biochemistry', required: true }\n            ],\n            onSave: (data) => {\n                handlers.addSubject(data.subjectName);\n                setExpandedSubjects(prev => ({ ...prev, [data.subjectName]: true }));\n            }\n        });\n        setIsModalOpen(true);\n    };\n\n    const openAddTestModal = () => {\n        setModalConfig({\n            title: 'Add New Test',\n            fields: [\n                {\n                    name: 'subject',\n                    label: 'Select Subject',\n                    type: 'select',\n                    required: true,\n                    options: subjects.map(s => ({ value: s, label: s })),\n                    defaultValue: subjects[0] || ''\n                },\n                { name: 'title', label: 'Test Title', placeholder: 'e.g., Final Exam', required: true },\n                { name: 'mcqs', label: 'Number of MCQs', type: 'number', placeholder: 'e.g., 50', required: true },\n                { name: 'date', label: 'Date', type: 'date', required: true },\n                { name: 'link', label: 'Test Link (Optional)', type: 'url', placeholder: 'https://example.com/test' }\n            ],\n            onSave: (data) => {\n                handlers.addTest(data.subject, data.title, data.mcqs, data.date, data.link);\n                setExpandedSubjects(prev => ({ ...prev, [data.subject]: true }));\n            }\n        });\n        setIsModalOpen(true);\n    };\n\n    return (\n        // All subject/test handlers now come from context\n        <>\n            <div id=\"page-manage-tests\" className=\"page px-6 py-8\">\n                <header className=\"flex items-center justify-between mb-6\">\n                    <h1 className=\"text-3xl font-bold text-gray-900\">Manage Content</h1>\n                    <button onClick={onBackToProfile} className=\"text-blue-600 hover:text-blue-800 text-sm font-medium\">Done</button>\n                </header>\n\n                <div className=\"space-y-4 mb-6\">\n                    <button\n                        onClick={openAddSubjectModal}\n                        className=\"w-full bg-green-50 text-green-700 font-semibold py-2 px-4 rounded-lg flex items-center justify-center hover:bg-green-100 transition duration-300\"\n                    >\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"mr-2\"><line x1=\"12\" y1=\"5\" x2=\"12\" y2=\"19\"></line><line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\"></line></svg>\n                        Add New Subject\n                    </button>\n\n                    <button\n                        onClick={openAddTestModal}\n                        className=\"w-full bg-blue-50 text-blue-700 font-semibold py-2 px-4 rounded-lg flex items-center justify-center hover:bg-blue-100 transition duration-300\"\n                        disabled={subjects.length === 0}\n                    >\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"mr-2\"><line x1=\"12\" y1=\"5\" x2=\"12\" y2=\"19\"></line><line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\"></line></svg>\n                        Add New Test\n                    </button>\n                </div>\n\n                <h2 className=\"text-xl font-bold text-gray-800 mb-4\">Existing Content</h2>\n                <div id=\"manage-content-list\" className=\"space-y-4\">\n                    {subjects.length === 0 ? (\n                        <p className=\"text-gray-500 text-center py-4\">No subjects available. Add a new subject to get started.</p>\n                    ) : (\n                        subjects.map(subject => (\n                            <ManagedSubjectSection\n                                key={subject}\n                                subjectName={subject}\n                                tests={testData[subject]}\n                                onDeleteSubject={handlers.deleteSubject}\n                                onDeleteTest={handlers.deleteTest}\n                                isExpanded={expandedSubjects[subject]}\n                                onToggleExpand={handleToggleExpand}\n                            />\n                        ))\n                    )}\n                </div>\n            </div>\n\n            <AddModal\n                isOpen={isModalOpen}\n                onClose={() => setIsModalOpen(false)}\n                onSave={modalConfig.onSave}\n                title={modalConfig.title}\n                fields={modalConfig.fields}\n                showNotification={showNotification}\n            />\n        </>\n    );\n});\n\nexport default ManageContentPage;\n"],"names":["EMPTY_INITIAL_STATE","_ref","isOpen","onClose","onSave","title","fields","initialState","handlers","useHandlers","formData","setFormData","useState","useEffect","initialData","reduce","acc","field","name","defaultValue","handleChange","e","value","target","prev","_objectSpread","_jsx","className","children","_jsxs","map","htmlFor","label","required","type","id","placeholder","onChange","disabled","rows","options","option","onClick","handleSaveClick","showNotification","concat","console","error","addTimetableEntry","React","subjectName","tests","onDeleteSubject","onDeleteTest","isExpanded","onToggleExpand","stopPropagation","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","x1","y1","x2","y2","length","test","mcqs","date","onBackToProfile","testData","useTestData","expandedSubjects","setExpandedSubjects","isModalOpen","setIsModalOpen","modalConfig","setModalConfig","subjects","useMemo","Object","keys","handleToggleExpand","useCallback","_Fragment","openAddSubjectModal","data","addSubject","openAddTestModal","s","addTest","subject","link","ManagedSubjectSection","deleteSubject","deleteTest","AddModal"],"sourceRoot":""}