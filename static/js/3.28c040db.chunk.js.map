{"version":3,"file":"static/js/3.28c040db.chunk.js","mappings":"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","sources":["components/TimetableEventCard.js","components/EditTimetableModal.js","pages/TimetablePage.js","components/AddModal.js"],"sourcesContent":["// src/components/TimetableEventCard.js\r\nimport React from 'react';\r\n\r\nconst TimetableEventCard = React.memo(({ events, isEditMode, onDelete, onCheck, onEdit, selectedCalendarDate, onSelectCalendarDate }) => {\r\n    const sortedEvents = React.useMemo(() => {\r\n        return [...events].sort((a, b) => {\r\n            // Sort by time first\r\n            const timeComparison = a.time.localeCompare(b.time);\r\n            if (timeComparison !== 0) {\r\n                return timeComparison;\r\n            }\r\n            // If times are the same, sort by checked status (completed last)\r\n            return (a.checked === b.checked) ? 0 : a.checked ? 1 : -1;\r\n        });\r\n    }, [events]);\r\n\r\n    const formatDateForDisplay = (date) => {\r\n        return date.toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' });\r\n    };\r\n\r\n    const handlePrevDay = () => {\r\n        const newDate = new Date(selectedCalendarDate);\r\n        newDate.setDate(newDate.getDate() - 1);\r\n        onSelectCalendarDate(newDate);\r\n    };\r\n\r\n    const handleNextDay = () => {\r\n        const newDate = new Date(selectedCalendarDate);\r\n        newDate.setDate(newDate.getDate() + 1);\r\n        onSelectCalendarDate(newDate);\r\n    };\r\n\r\n    /**\r\n     * Determines the status of an event (Completed, Missed, or Pending).\r\n     * @param {string} eventDate - The date of the event in 'YYYY-MM-DD' format.\r\n     * @param {string} eventTime - The time of the event in 'HH:MM' format.\r\n     * @param {boolean} isChecked - The checked status of the event.\r\n     * @returns {{text: string, colorClass: string}} An object with status text and Tailwind CSS color class.\r\n     */\r\n    const getEventStatus = (eventDate, eventTime, isChecked) => {\r\n        if (isChecked) {\r\n            return { text: 'Completed', colorClass: 'text-green-600' };\r\n        }\r\n\r\n        const now = new Date();\r\n        // Combine date and time to create a full Date object for comparison\r\n        const eventDateTime = new Date(`${eventDate}T${eventTime}`);\r\n\r\n        if (eventDateTime < now) {\r\n            return { text: 'Missed', colorClass: 'text-red-600' };\r\n        } else {\r\n            return { text: 'Pending', colorClass: 'text-yellow-600' };\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"w-full\">\r\n            {/* Navigation for changing days */}\r\n            <div className=\"flex items-center justify-between px-0 py-6 text-gray-700 font-semibold text-lg\">\r\n                <button onClick={handlePrevDay} className=\"p-2 rounded-full hover:bg-gray-100 transition-colors duration-200\" aria-label=\"Previous day\">\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><polyline points=\"15 18 9 12 15 6\"></polyline></svg>\r\n                </button>\r\n                <span className=\"flex-grow text-center text-lg sm:text-base\">\r\n                    {formatDateForDisplay(selectedCalendarDate)}\r\n                </span>\r\n                <button onClick={handleNextDay} className=\"p-2 rounded-full hover:bg-gray-100 transition-colors duration-200\" aria-label=\"Next day\">\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><polyline points=\"9 18 15 12 9 6\"></polyline></svg>\r\n                </button>\r\n            </div>\r\n\r\n            {/* Display message if no events for the selected date */}\r\n            {sortedEvents.length === 0 ? (\r\n                <p className=\"text-gray-500 text-center py-4\">No events scheduled for this date.</p>\r\n            ) : (\r\n                // Map through sorted events and display each as a card\r\n                sortedEvents.map(item => {\r\n                    // Get the status and its corresponding color for the current event\r\n                    const status = getEventStatus(item.date, item.time, item.checked);\r\n                    return (\r\n                        <div\r\n                            key={item.id}\r\n                            className={`flex justify-between items-center p-4 mb-3 rounded-xl shadow-sm border ${item.checked ? \"bg-green-100 border-green-300\" : \"bg-white border-gray-200\"}`}\r\n                        >\r\n                            <div>\r\n                                <p className=\"text-sm text-gray-500\">{item.time}</p>\r\n                                <p className=\"text-lg font-semibold text-gray-800\">{item.subject}</p>\r\n                                <h4 className=\"text-base text-gray-600\">{item.topic}</h4>\r\n                                <p className={`text-sm font-semibold ${status.colorClass}`}>{status.text}</p>\r\n                            </div>\r\n                            <div className=\"flex items-center\">\r\n                                {/* Conditional rendering based on isEditMode */}\r\n                                {isEditMode ? (\r\n                                    <>\r\n                                        {/* Edit button, visible only in edit mode */}\r\n                                        <button\r\n                                            onClick={() => onEdit(item.id)} // Call onEdit with item.id\r\n                                            className=\"p-1.5 mr-4 rounded-full text-gray-400 hover:text-blue-500 transition-colors duration-200\"\r\n                                            aria-label=\"Edit event\"\r\n                                        >\r\n                                            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><path d=\"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\"></path><path d=\"M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z\"></path></svg>\r\n                                        </button>\r\n                                        {/* Delete button, visible only in edit mode */}\r\n                                        <button\r\n                                            onClick={() => onDelete(item.id)}\r\n                                            className=\"p-1.5 rounded-full text-gray-400 hover:text-red-500 transition-colors duration-200 mr-2\"\r\n                                            aria-label=\"Delete event\"\r\n                                        >\r\n                                            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><path d=\"M3 6h18\"></path><path d=\"M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6\"></path><path d=\"M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2\"></path><line x1=\"10\" y1=\"11\" x2=\"10\" y2=\"17\"></line><line x1=\"14\" y1=\"11\" x2=\"14\" y2=\"17\"></line></svg>\r\n                                        </button>\r\n                                    </>\r\n                                ) : (\r\n                                    // Check/uncheck button for marking completion, visible only NOT in edit mode\r\n                                    <button\r\n                                        onClick={() => onCheck(item.id)}\r\n                                        className={`w-6 h-6 rounded-full border-2 ${item.checked ? \"bg-green-500 border-green-500\" : \"border-gray-300\"}`}\r\n                                        aria-label={item.checked ? \"Mark as incomplete\" : \"Mark as complete\"}\r\n                                    >\r\n                                        {/* Checkmark icon if event is checked */}\r\n                                        {item.checked && (\r\n                                            <svg\r\n                                                xmlns=\"http://www.w3.org/2000/svg\"\r\n                                                className=\"h-4 w-4 text-white m-auto\"\r\n                                                fill=\"none\"\r\n                                                viewBox=\"0 0 24 24\"\r\n                                                stroke=\"currentColor\"\r\n                                            >\r\n                                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={3} d=\"M5 13l4 4L19 7\" />\r\n                                            </svg>\r\n                                        )}\r\n                                    </button>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                })\r\n            )}\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default TimetableEventCard;","// src/components/EditTimetableModal.js\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nconst EditTimetableModal = ({ isOpen, onClose, eventData, onUpdateEvent, showNotification }) => {\r\n    // State to manage form inputs within the modal\r\n    const [subject, setSubject] = useState('');\r\n    const [topic, setTopic] = useState('');\r\n    const [date, setDate] = useState('');\r\n    const [time, setTime] = useState('');\r\n\r\n    // Effect to populate form fields when eventData changes (i.e., when a new event is selected for editing)\r\n    useEffect(() => {\r\n        if (eventData) {\r\n            setSubject(eventData.subject || '');\r\n            setTopic(eventData.topic || '');\r\n            setDate(eventData.date || '');\r\n            setTime(eventData.time || '');\r\n        }\r\n    }, [eventData]);\r\n\r\n    // Handle the update action when the \"Update Event\" button is clicked\r\n    const handleUpdateClick = async () => {\r\n        if (!eventData || !eventData.id) {\r\n            showNotification('No event selected for editing.', 'error');\r\n            return;\r\n        }\r\n        if (!subject || !topic || !date || !time) {\r\n            showNotification('All fields are required.', 'error');\r\n            return;\r\n        }\r\n        // Call the onUpdateEvent prop, which will handle the actual Firestore update\r\n        await onUpdateEvent(eventData.id, subject, topic, date, time);\r\n        onClose(); // Close the modal after updating\r\n    };\r\n\r\n    if (!isOpen) {\r\n        return null; // Don't render anything if the modal is not open\r\n    }\r\n\r\n    return (\r\n        <div className=\"fixed inset-0 bg-gray-600 bg-opacity-75 flex items-center justify-center p-4 z-50\">\r\n            <div className=\"bg-white rounded-lg shadow-xl w-full max-w-md p-6 relative\">\r\n                <h3 className=\"text-xl font-bold text-gray-800 mb-4\">Edit Study Event</h3>\r\n                <div className=\"mb-3\">\r\n                    <label htmlFor=\"edit-modal-subject\" className=\"block text-sm font-medium text-gray-700 mb-1\">Subject</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"edit-modal-subject\"\r\n                        className=\"w-full px-4 py-2 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-50\"\r\n                        placeholder=\"e.g., Anatomy\"\r\n                        value={subject}\r\n                        onChange={(e) => setSubject(e.target.value)}\r\n                    />\r\n                </div>\r\n                <div className=\"mb-3\">\r\n                    <label htmlFor=\"edit-modal-topic\" className=\"block text-sm font-medium text-gray-700 mb-1\">Topic</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"edit-modal-topic\"\r\n                        className=\"w-full px-4 py-2 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-50\"\r\n                        placeholder=\"e.g., Cardiovascular System\"\r\n                        value={topic}\r\n                        onChange={(e) => setTopic(e.target.value)}\r\n                    />\r\n                </div>\r\n                <div className=\"mb-3\">\r\n                    <label htmlFor=\"edit-modal-date\" className=\"block text-sm font-medium text-gray-700 mb-1\">Date</label>\r\n                    <input\r\n                        type=\"date\"\r\n                        id=\"edit-modal-date\"\r\n                        className=\"w-full px-4 py-2 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-50\"\r\n                        value={date}\r\n                        onChange={(e) => setDate(e.target.value)}\r\n                    />\r\n                </div>\r\n                <div className=\"mb-4\">\r\n                    <label htmlFor=\"edit-modal-time\" className=\"block text-sm font-medium text-gray-700 mb-1\">Time</label>\r\n                    <input\r\n                        type=\"time\"\r\n                        id=\"edit-modal-time\"\r\n                        className=\"w-full px-4 py-2 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-50\"\r\n                        value={time}\r\n                        onChange={(e) => setTime(e.target.value)}\r\n                    />\r\n                </div>\r\n                <button\r\n                    onClick={handleUpdateClick}\r\n                    className=\"w-full bg-blue-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition duration-300\"\r\n                >\r\n                    Update Event\r\n                </button>\r\n                <button\r\n                    onClick={onClose}\r\n                    className=\"w-full mt-2 bg-gray-200 text-gray-700 font-bold py-2 px-4 rounded-lg hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-400 transition duration-300\"\r\n                >\r\n                    Cancel\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EditTimetableModal;","// src/pages/TimetablePage.js\r\nimport React, { useState, useCallback, useMemo } from 'react';\r\nimport TimetableEventCard from '../components/TimetableEventCard';\r\nimport EditTimetableModal from '../components/EditTimetableModal';\r\nimport AddModal from '../components/AddModal';\r\nimport { updateTimetableEntry } from '../utils/appFunctions';\r\n\r\n/**\r\n * Helper function to get a 'YYYY-MM-DD' formatted string from a Date object,\r\n * based on the user's local time zone. This prevents UTC conversion issues.\r\n * @param {Date} date - The date object to format.\r\n * @returns {string} The formatted date string.\r\n */\r\nconst getLocalDateString = (date) => {\r\n    const year = date.getFullYear();\r\n    // getMonth() is zero-based, so we add 1. Pad with '0' if needed.\r\n    const month = (date.getMonth() + 1).toString().padStart(2, '0');\r\n    // Pad day with '0' if needed.\r\n    const day = date.getDate().toString().padStart(2, '0');\r\n    return `${year}-${month}-${day}`;\r\n};\r\n\r\nconst TimetablePage = React.memo(({ timetableEntries, addTimetableEntry, deleteTimetableEntry, onCheck, showNotification, userId }) => {\r\n    const [timetableEditMode, setTimetableEditMode] = useState(false);\r\n    const [isAddModalOpen, setIsAddModalOpen] = useState(false);\r\n    const [isEditModalOpen, setIsEditModalOpen] = useState(false);\r\n    const [currentEventToEdit, setCurrentEventToEdit] = useState(null);\r\n\r\n    // FIX: Initialize state with the user's local date, not UTC.\r\n    // This ensures the calendar defaults to the correct day for the user.\r\n    const [selectedDisplayDate, setSelectedDisplayDate] = useState(getLocalDateString(new Date()));\r\n\r\n    const handleSaveEvent = (data) => {\r\n        addTimetableEntry(data.subject, data.topic, data.date, data.time);\r\n    };\r\n\r\n    const handleEditEvent = useCallback((eventId) => {\r\n        const eventToEdit = timetableEntries.find(event => event.id === eventId);\r\n        if (eventToEdit) {\r\n            setCurrentEventToEdit(eventToEdit);\r\n            setIsEditModalOpen(true);\r\n        }\r\n    }, [timetableEntries]);\r\n\r\n    const handleUpdateEvent = useCallback(async (eventId, subject, topic, date, time) => {\r\n        await updateTimetableEntry(userId, showNotification, eventId, subject, topic, date, time);\r\n        setCurrentEventToEdit(null);\r\n        setIsEditModalOpen(false);\r\n    }, [userId, showNotification]);\r\n\r\n    const memoizedSelectedDateObject = useMemo(() => {\r\n        // When creating a Date object from a 'YYYY-MM-DD' string, it's interpreted\r\n        // as UTC midnight. To treat it as local, we need to adjust for the timezone offset.\r\n        const date = new Date(selectedDisplayDate);\r\n        const userTimezoneOffset = date.getTimezoneOffset() * 60000;\r\n        return new Date(date.getTime() + userTimezoneOffset);\r\n    }, [selectedDisplayDate]);\r\n\r\n\r\n    const eventsForSelectedDate = useMemo(() => {\r\n        return timetableEntries.filter(entry => entry.date === selectedDisplayDate);\r\n    }, [timetableEntries, selectedDisplayDate]);\r\n\r\n    const addModalFields = useMemo(() => [\r\n        { name: 'subject', label: 'Subject', placeholder: 'e.g., Anatomy', required: true },\r\n        { name: 'topic', label: 'Topic', placeholder: 'e.g., Cardiovascular System', required: true },\r\n        { name: 'date', label: 'Date', type: 'date', required: true, defaultValue: selectedDisplayDate },\r\n        { name: 'time', label: 'Time', type: 'time', required: true, defaultValue: '09:00' }\r\n    ], [selectedDisplayDate]);\r\n\r\n    const handleSelectCalendarDate = useCallback((date) => {\r\n        // FIX: Use the same local date formatting for consistency and to avoid timezone shifts.\r\n        setSelectedDisplayDate(getLocalDateString(date));\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <div id=\"page-timetable\" className=\"page px-6 py-8\">\r\n                <header className=\"flex items-center justify-between mb-2\">\r\n                    <h1 className=\"text-3xl font-bold text-gray-900\">Timetable</h1>\r\n                    <button\r\n                        onClick={() => setTimetableEditMode(!timetableEditMode)}\r\n                        className=\"text-blue-600 hover:text-blue-800 text-sm font-medium flex items-center\"\r\n                        aria-label={timetableEditMode ? 'Done editing timetable' : 'Edit timetable'}\r\n                    >\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"mr-1\"><path d=\"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\"></path><path d=\"M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z\"></path></svg>\r\n                        {timetableEditMode ? 'Done' : 'Edit'}\r\n                    </button>\r\n                </header>\r\n                <p className=\"text-gray-500 mb-2\">Upcoming Study Schedule</p>\r\n\r\n                <div id=\"timetable-events-list\" className=\"space-y-4 bg-white rounded-lg min-h-[100px]\">\r\n                    <TimetableEventCard\r\n                        events={eventsForSelectedDate}\r\n                        isEditMode={timetableEditMode}\r\n                        onDelete={deleteTimetableEntry}\r\n                        onCheck={onCheck}\r\n                        onEdit={handleEditEvent}\r\n                        selectedCalendarDate={memoizedSelectedDateObject}\r\n                        onSelectCalendarDate={handleSelectCalendarDate}\r\n                    />\r\n                </div>\r\n\r\n                <button\r\n                    onClick={() => setIsAddModalOpen(true)}\r\n                    className=\"w-full bg-blue-50 text-blue-700 font-semibold mt-6 py-2 px-4 rounded-lg flex items-center justify-center hover:bg-blue-100 transition duration-300 mb-6\"\r\n                >\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" className=\"mr-2\"><line x1=\"12\" y1=\"5\" x2=\"12\" y2=\"19\"></line><line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\"></line></svg>\r\n                    Add New Study Event\r\n                </button>\r\n            </div>\r\n\r\n            <AddModal\r\n                isOpen={isAddModalOpen}\r\n                onClose={() => setIsAddModalOpen(false)}\r\n                onSave={handleSaveEvent}\r\n                title=\"Add New Study Event\"\r\n                fields={addModalFields}\r\n                showNotification={showNotification}\r\n            />\r\n\r\n            <EditTimetableModal\r\n                isOpen={isEditModalOpen}\r\n                onClose={() => setIsEditModalOpen(false)}\r\n                eventData={currentEventToEdit}\r\n                onUpdateEvent={handleUpdateEvent}\r\n                showNotification={showNotification}\r\n            />\r\n        </>\r\n    );\r\n});\r\n\r\nexport default TimetablePage;","// src/components/AddModal.js\r\nimport React, { useState, useEffect } from 'react';\r\n\r\n// By defining the default object outside the component, we ensure it's a stable reference.\r\n// This prevents the useEffect hook from re-running unnecessarily.\r\nconst EMPTY_INITIAL_STATE = {};\r\n\r\nconst AddModal = ({ isOpen, onClose, onSave, title, fields, initialState = EMPTY_INITIAL_STATE, showNotification }) => {\r\n    const [formData, setFormData] = useState({});\r\n\r\n    useEffect(() => {\r\n        // This effect now correctly runs only when the modal is opened,\r\n        // or if the `fields` or `initialState` props genuinely change.\r\n        // Previously, a new `initialState` object was created on every render,\r\n        // causing this effect to fire on every keystroke and reset the form data.\r\n        if (isOpen) {\r\n            const initialData = fields.reduce((acc, field) => {\r\n                acc[field.name] = initialState[field.name] || field.defaultValue || '';\r\n                return acc;\r\n            }, {});\r\n            setFormData(initialData);\r\n        } else {\r\n            // Reset formData when the modal closes to ensure a clean state for next time.\r\n            setFormData({});\r\n        }\r\n    }, [isOpen, fields, initialState]);\r\n\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setFormData(prev => ({ ...prev, [name]: value }));\r\n    };\r\n\r\n    const handleSaveClick = () => {\r\n        // Basic validation to ensure required fields are filled.\r\n        for (const field of fields) {\r\n            if (field.required && !formData[field.name]) {\r\n                if (showNotification) {\r\n                    showNotification(`${field.label} is required.`, 'error');\r\n                } else {\r\n                    console.error(`${field.label} is required.`);\r\n                }\r\n                return;\r\n            }\r\n        }\r\n        onSave(formData);\r\n        onClose(); // Close modal after saving\r\n    };\r\n\r\n    if (!isOpen) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\">\r\n            <div className=\"bg-white rounded-lg shadow-xl p-6 w-full max-w-md mx-auto relative transform transition-all scale-100 opacity-100\">\r\n                <h2 className=\"text-2xl font-bold mb-4 text-gray-800\">{title}</h2>\r\n                <div className=\"space-y-4\">\r\n                    {fields.map(field => (\r\n                        <div key={field.name} className=\"flex flex-col\">\r\n                            <label htmlFor={field.name} className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                                {field.label}{field.required && <span className=\"text-red-500\">*</span>}\r\n                            </label>\r\n                            {field.type === 'textarea' ? (\r\n                                <textarea\r\n                                    id={field.name}\r\n                                    name={field.name}\r\n                                    placeholder={field.placeholder || ''}\r\n                                    value={formData[field.name] || ''}\r\n                                    onChange={handleChange}\r\n                                    // The `disabled` property is correctly read from the field config.\r\n                                    // Since `addModalFields` doesn't set it, this will be undefined, and the input will be enabled.\r\n                                    disabled={field.disabled || false}\r\n                                    rows=\"3\"\r\n                                    className=\"w-full px-4 py-2 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-50 disabled:bg-gray-200\"\r\n                                />\r\n                            ) : field.type === 'select' ? (\r\n                                <select\r\n                                    id={field.name}\r\n                                    name={field.name}\r\n                                    value={formData[field.name] || ''}\r\n                                    onChange={handleChange}\r\n                                    disabled={field.disabled || false}\r\n                                    className=\"w-full px-4 py-2 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-50 disabled:bg-gray-200\"\r\n                                >\r\n                                    {field.options && field.options.map(option => (\r\n                                        <option key={option.value} value={option.value}>\r\n                                            {option.label}\r\n                                        </option>\r\n                                    ))}\r\n                                </select>\r\n                            ) : (\r\n                                <input\r\n                                    type={field.type || 'text'}\r\n                                    id={field.name}\r\n                                    name={field.name}\r\n                                    placeholder={field.placeholder || ''}\r\n                                    value={formData[field.name] || ''}\r\n                                    onChange={handleChange}\r\n                                    disabled={field.disabled || false}\r\n                                    className=\"w-full px-4 py-2 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-50 disabled:bg-gray-200\"\r\n                                />\r\n                            )}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                <div className=\"mt-6 flex justify-end space-x-3\">\r\n                     <button\r\n                        onClick={onClose}\r\n                        className=\"px-4 py-2 bg-gray-200 text-gray-700 font-bold rounded-lg hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-400 transition duration-300\"\r\n                    >\r\n                        Cancel\r\n                    </button>\r\n                    <button\r\n                        onClick={handleSaveClick}\r\n                        className=\"px-4 py-2 bg-blue-600 text-white font-bold rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition duration-300\"\r\n                    >\r\n                        Save\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AddModal;"],"names":["React","_ref","events","isEditMode","onDelete","onCheck","onEdit","selectedCalendarDate","onSelectCalendarDate","sortedEvents","sort","a","b","timeComparison","time","localeCompare","checked","_jsxs","className","children","_jsx","onClick","handlePrevDay","newDate","Date","setDate","getDate","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","points","date","toLocaleDateString","weekday","year","month","day","handleNextDay","length","map","item","status","getEventStatus","eventDate","eventTime","isChecked","text","colorClass","now","concat","subject","topic","_Fragment","id","d","x1","y1","x2","y2","isOpen","onClose","eventData","onUpdateEvent","showNotification","setSubject","useState","setTopic","setTime","useEffect","htmlFor","type","placeholder","value","onChange","e","target","async","getLocalDateString","getFullYear","getMonth","toString","padStart","timetableEntries","addTimetableEntry","deleteTimetableEntry","userId","timetableEditMode","setTimetableEditMode","isAddModalOpen","setIsAddModalOpen","isEditModalOpen","setIsEditModalOpen","currentEventToEdit","setCurrentEventToEdit","selectedDisplayDate","setSelectedDisplayDate","handleEditEvent","useCallback","eventId","eventToEdit","find","event","handleUpdateEvent","updateTimetableEntry","memoizedSelectedDateObject","useMemo","userTimezoneOffset","getTimezoneOffset","getTime","eventsForSelectedDate","filter","entry","addModalFields","name","label","required","defaultValue","handleSelectCalendarDate","TimetableEventCard","AddModal","onSave","data","title","fields","EditTimetableModal","EMPTY_INITIAL_STATE","initialState","formData","setFormData","initialData","reduce","acc","field","handleChange","prev","_objectSpread","disabled","rows","options","option","handleSaveClick","console","error"],"sourceRoot":""}