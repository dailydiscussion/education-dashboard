{"version":3,"file":"static/js/3.60305d6f.chunk.js","mappings":"uNAmJA,EA5I2BA,EAAAA,KAAWC,IAAoC,IAAnC,MAAEC,EAAK,WAAEC,EAAU,OAAEC,GAAQH,EAChE,MAAMI,GAAWC,EAAAA,EAAAA,KAgCXC,EAjBiBC,EAACC,EAAWC,EAAWC,KAC1C,GAAIA,EACA,MAAO,CAAEC,KAAM,YAAaC,WAAY,kBAG5C,MAAMC,EAAM,IAAIC,KAIhB,OAFsB,IAAIA,KAAK,GAADC,OAAIP,EAAS,KAAAO,OAAIN,IAE3BI,EACT,CAAEF,KAAM,SAAUC,WAAY,gBAE9B,CAAED,KAAM,UAAWC,WAAY,oBAK/BL,CAAeN,EAAMe,KAAMf,EAAMgB,KAAMhB,EAAMiB,SAEtDC,EAAW,0EAAAJ,OAA6Ed,EAAMiB,QAAU,gCAAkC,4BAEhJ,OACIE,EAAAA,EAAAA,MAAA,OACIC,GAAE,mBAAAN,OAAqBd,EAAMoB,IAC7BC,UAAWH,EAAYI,SAAA,EAEvBH,EAAAA,EAAAA,MAAA,OAAAG,SAAA,EACIC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,wBAAuBC,SAAEtB,EAAMgB,QAC5CO,EAAAA,EAAAA,KAAA,KAAGF,UAAS,uCAAAP,OAAyCd,EAAMiB,QAAU,0BAA4B,IAAKK,SAAEtB,EAAMwB,WAC9GD,EAAAA,EAAAA,KAAA,MAAIF,UAAU,0BAAyBC,SAAEtB,EAAMyB,SAC/CF,EAAAA,EAAAA,KAAA,KAAGF,UAAS,yBAAAP,OAA2BT,EAAOM,YAAaW,SAAEjB,EAAOK,WAExEa,EAAAA,EAAAA,KAAA,OAAKF,UAAU,0BAAyBC,SAEnCrB,GACGkB,EAAAA,EAAAA,MAAAO,EAAAA,SAAA,CAAAJ,SAAA,EAEIC,EAAAA,EAAAA,KAAA,UACII,QAASA,KACLC,QAAQC,IAAI,mBAAoB7B,GAEhC,MAAM8B,EAAU,GAKhB,GAJK9B,EAAMwB,SAAYxB,EAAMwB,QAAQO,QAAQD,EAAQE,KAAK,WACrDhC,EAAMyB,OAAUzB,EAAMyB,MAAMM,QAAQD,EAAQE,KAAK,SACjDhC,EAAMgB,MAAShB,EAAMgB,KAAKe,QAAQD,EAAQE,KAAK,QAC/ChC,EAAMe,MAASf,EAAMe,KAAKgB,QAAQD,EAAQE,KAAK,QAChDF,EAAQG,OAAS,EAEjB,YADAC,MAAM,mBAAqBJ,EAAQK,KAAK,OAI5C,MAAMC,EAAU,IAAIvB,KAAKb,EAAMe,MAC/BqB,EAAQC,QAAQD,EAAQE,UAAY,GACpC,MAAMC,EAAWH,EAAQI,cAAcC,MAAM,EAAG,KAE1C,GAAErB,GAAqBpB,EAAd0C,GAASC,EAAAA,EAAAA,GAAK3C,EAAK4C,GAClCzC,EAAS0C,kBAAkBH,EAAUlB,QAASkB,EAAUjB,MAAOc,EAAUG,EAAU1B,OAEvFK,UAAU,2FACV,aAAW,sBACXyB,MAAM,sBACNC,KAAK,SAAQzB,UAEbH,EAAAA,EAAAA,MAAA,OAAK6B,MAAM,6BAA6BC,MAAM,KAAKC,OAAO,KAAKC,KAAK,OAAOC,QAAQ,YAAYC,OAAO,eAAeC,YAAY,IAAIC,cAAc,QAAQC,eAAe,QAAOlC,SAAA,EAC3MC,EAAAA,EAAAA,KAAA,QAAMkC,EAAE,gBACRlC,EAAAA,EAAAA,KAAA,QAAMkC,EAAE,gBACRlC,EAAAA,EAAAA,KAAA,QAAMkC,EAAE,uCACRlC,EAAAA,EAAAA,KAAA,QAAMkC,EAAE,8CAIclC,EAAAA,EAAAA,KAAA,UACII,QAASA,IAAMzB,EAAOF,EAAMoB,IAC5BC,UAAU,2FACV,aAAW,aAAYC,UAEvBH,EAAAA,EAAAA,MAAA,OAAK6B,MAAM,6BAA6BC,MAAM,KAAKC,OAAO,KAAKE,QAAQ,YAAYD,KAAK,OAAOE,OAAO,eAAeC,YAAY,IAAIC,cAAc,QAAQC,eAAe,QAAOlC,SAAA,EACjLC,EAAAA,EAAAA,KAAA,QAAMkC,EAAE,gEAAoElC,EAAAA,EAAAA,KAAA,QAAMkC,EAAE,kEAGxFlC,EAAAA,EAAAA,KAAA,UACII,QAASA,IAAMxB,EAASuD,qBAAqB1D,EAAMoB,IACnDC,UAAU,0FACV,aAAW,eAAcC,UAEzBH,EAAAA,EAAAA,MAAA,OAAK6B,MAAM,6BAA6BC,MAAM,KAAKC,OAAO,KAAKE,QAAQ,YAAYD,KAAK,OAAOE,OAAO,eAAeC,YAAY,IAAIC,cAAc,QAAQC,eAAe,QAAOlC,SAAA,EAACC,EAAAA,EAAAA,KAAA,QAAMkC,EAAE,aAAiBlC,EAAAA,EAAAA,KAAA,QAAMkC,EAAE,2CAA+ClC,EAAAA,EAAAA,KAAA,QAAMkC,EAAE,wCAA4ClC,EAAAA,EAAAA,KAAA,QAAMoC,GAAG,KAAKC,GAAG,KAAKC,GAAG,KAAKC,GAAG,QAAYvC,EAAAA,EAAAA,KAAA,QAAMoC,GAAG,KAAKC,GAAG,KAAKC,GAAG,KAAKC,GAAG,gBAK5YvC,EAAAA,EAAAA,KAACwC,EAAAA,EAAOC,OAAM,CACVrC,QAASA,IAAMxB,EAAS8D,oBAAoBjE,EAAMoB,IAClDC,UAAS,iEACT,aAAYrB,EAAMiB,QAAU,qBAAuB,mBACnDiD,SAAU,CAAEC,MAAO,KACnBC,QAAS,CACLD,MAAOnE,EAAMiB,QAAU,IAAM,EAC7BoD,gBAAiBrE,EAAMiB,QAAU,UAAY,YAC7CqD,YAAatE,EAAMiB,QAAU,UAAY,WAE7CsD,WAAY,CAAExB,KAAM,SAAUyB,UAAW,IAAKC,QAAS,IAAKnD,SAG3DtB,EAAMiB,UACHM,EAAAA,EAAAA,KAACwC,EAAAA,EAAOW,IAAG,CACPC,QAAS,CAAER,MAAO,EAAGS,QAAS,IAC9BR,QAAS,CAAED,MAAO,EAAGS,OAAQ,GAC7BL,WAAY,CAAExB,KAAM,SAAUyB,UAAW,IAAKC,QAAS,IACvDzB,MAAM,6BACN3B,UAAU,qBACV8B,KAAK,OACLC,QAAQ,YACRC,OAAO,eAAc/B,UAErBC,EAAAA,EAAAA,KAAA,QAAMgC,cAAc,QAAQC,eAAe,QAAQF,YAAa,EAAGG,EAAE,8B,aCrIrG,MAyGA,EAzG2B1D,IAAiE,IAAhE,OAAE8E,EAAM,QAAEC,EAAO,UAAEpC,EAAS,SAAEqC,EAAQ,iBAAEC,GAAkBjF,EAClF,MAAOyB,EAASyD,IAAcC,EAAAA,EAAAA,UAAS,KAChCzD,EAAO0D,IAAYD,EAAAA,EAAAA,UAAS,KAC5BnE,EAAMsB,IAAW6C,EAAAA,EAAAA,UAAS,KAC1BlE,EAAMoE,IAAWF,EAAAA,EAAAA,UAAS,KAEjCG,EAAAA,EAAAA,WAAU,KACF3C,IACAuC,EAAWvC,EAAUlB,SAAW,IAChC2D,EAASzC,EAAUjB,OAAS,IAC5BY,EAAQK,EAAU3B,MAAQ,IAC1BqE,EAAQ1C,EAAU1B,MAAQ,MAE/B,CAAC0B,IAeJ,OACInB,EAAAA,EAAAA,KAAC+D,EAAAA,EAAe,CAAAhE,SACXuD,IACGtD,EAAAA,EAAAA,KAACwC,EAAAA,EAAOwB,IAAG,CACPlE,UAAU,oFACVsD,QAAS,CAAEa,QAAS,GACpBpB,QAAS,CAAEoB,QAAS,GACpBC,KAAM,CAAED,QAAS,GACjBjB,WAAY,CAAEmB,SAAU,KACxB/D,QAASmD,EAAQxD,UAEjBH,EAAAA,EAAAA,MAAA,OACIQ,QAAUgE,GAAMA,EAAEC,kBAClBvE,UAAU,6DAA4DC,SAAA,EAEtEC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,uCAAsCC,SAAC,sBACrDH,EAAAA,EAAAA,MAAA,OAAKE,UAAU,OAAMC,SAAA,EACjBC,EAAAA,EAAAA,KAAA,SAAOsE,QAAQ,qBAAqBxE,UAAU,+CAA8CC,SAAC,aAC7FC,EAAAA,EAAAA,KAAA,SACIwB,KAAK,OACL3B,GAAG,qBACHC,UAAU,oHACVyE,YAAY,gBACZC,MAAOvE,EACPwE,SAAWL,GAAMV,EAAWU,EAAEM,OAAOF,aAG7C5E,EAAAA,EAAAA,MAAA,OAAKE,UAAU,OAAMC,SAAA,EACjBC,EAAAA,EAAAA,KAAA,SAAOsE,QAAQ,mBAAmBxE,UAAU,+CAA8CC,SAAC,WAC3FC,EAAAA,EAAAA,KAAA,SACIwB,KAAK,OACL3B,GAAG,mBACHC,UAAU,oHACVyE,YAAY,8BACZC,MAAOtE,EACPuE,SAAWL,GAAMR,EAASQ,EAAEM,OAAOF,aAG3C5E,EAAAA,EAAAA,MAAA,OAAKE,UAAU,OAAMC,SAAA,EACjBC,EAAAA,EAAAA,KAAA,SAAOsE,QAAQ,kBAAkBxE,UAAU,+CAA8CC,SAAC,UAC1FC,EAAAA,EAAAA,KAAA,SACIwB,KAAK,OACL3B,GAAG,kBACHC,UAAU,oHACV0E,MAAOhF,EACPiF,SAAWL,GAAMtD,EAAQsD,EAAEM,OAAOF,aAG1C5E,EAAAA,EAAAA,MAAA,OAAKE,UAAU,OAAMC,SAAA,EACjBC,EAAAA,EAAAA,KAAA,SAAOsE,QAAQ,kBAAkBxE,UAAU,+CAA8CC,SAAC,UAC1FC,EAAAA,EAAAA,KAAA,SACIwB,KAAK,OACL3B,GAAG,kBACHC,UAAU,oHACV0E,MAAO/E,EACPgF,SAAWL,GAAMP,EAAQO,EAAEM,OAAOF,aAG1CxE,EAAAA,EAAAA,KAAA,UACII,QAxEEuE,UACjBxD,GAAcA,EAAUtB,GAIxBI,GAAYC,GAAUV,GAASC,SAI9B+D,EAASrC,EAAUtB,GAAII,EAASC,EAAOV,EAAMC,GACnD8D,KAJIE,EAAiB,2BAA4B,SAJ7CA,EAAiB,iCAAkC,UAuEnC3D,UAAU,iLAAgLC,SAC7L,kBAGDC,EAAAA,EAAAA,KAAA,UACII,QAASmD,EACTzD,UAAU,yLAAwLC,SACrM,mB,aCrFzB,MAAM6E,EAAsBpF,IACxB,MAAMqF,EAAOrF,EAAKsF,cACZC,GAASvF,EAAKwF,WAAa,GAAGC,WAAWC,SAAS,EAAG,KACrDC,EAAM3F,EAAKuB,UAAUkE,WAAWC,SAAS,EAAG,KAClD,MAAM,GAAN3F,OAAUsF,EAAI,KAAAtF,OAAIwF,EAAK,KAAAxF,OAAI4F,IAI/B,SAASC,EAASC,EAAWC,GACzB,GACID,EAAUE,iBAAiB7E,SAAW4E,EAAUC,iBAAiB7E,QACjE2E,EAAUG,sBAAwBF,EAAUE,oBAE5C,OAAO,EAGX,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAUE,iBAAiB7E,OAAQ+E,IAAK,CACxD,MAAMC,EAAYL,EAAUE,iBAAiBE,GACvCE,EAAYL,EAAUC,iBAAiBE,GAC7C,GACIC,EAAU7F,KAAO8F,EAAU9F,IAC3B6F,EAAUhG,UAAYiG,EAAUjG,SAChCgG,EAAUzF,UAAY0F,EAAU1F,SAChCyF,EAAUxF,QAAUyF,EAAUzF,OAC9BwF,EAAUlG,OAASmG,EAAUnG,MAC7BkG,EAAUjG,OAASkG,EAAUlG,KAE7B,OAAO,CAEf,CACA,OAAO,CACX,CAGA,MAuKA,EAvKsBlB,EAAAA,KAAWC,IAAqD,IAApD,iBAAE+G,EAAgB,iBAAE9B,EAAgB,OAAEmC,GAAQpH,EAC5E,MAAMI,GAAWC,EAAAA,EAAAA,MACVgH,EAAmBC,IAAwBnC,EAAAA,EAAAA,WAAS,IACpDoC,EAAgBC,IAAqBrC,EAAAA,EAAAA,WAAS,IAC9CsC,EAAiBC,IAA2BvC,EAAAA,EAAAA,WAAS,IACrDwC,EAAoBC,IAAyBzC,EAAAA,EAAAA,UAAS,OAEtD6B,EAAqBa,IAA0B1C,EAAAA,EAAAA,UAASiB,EAAmB,IAAItF,OAGhFgH,GAAqBC,EAAAA,EAAAA,aAAajD,IACpC4C,EAAwB5C,GACnBA,GACD8C,EAAsB,OAE3B,IAMGI,GAAkBD,EAAAA,EAAAA,aAAaE,IACjC,MAAMC,EAAcnB,EAAiBoB,KAAKlI,GAASA,EAAMoB,KAAO4G,GAC5DC,IACAN,EAAsBM,GACtBJ,GAAmB,KAExB,CAACf,EAAkBe,IAIhBM,GAAoBL,EAAAA,EAAAA,aAAY5B,MAAO8B,EAASxG,EAASC,EAAOV,EAAMC,WAClEb,EAASiI,qBAAqBJ,EAASxG,EAASC,EAAOV,EAAMC,GACnE6G,GAAmB,IACpB,CAAC1H,EAAU0H,IAERQ,GAA6BC,EAAAA,EAAAA,SAAQ,KACvC,MAAMvH,EAAO,IAAIF,KAAKkG,GAChBwB,EAAgD,IAA3BxH,EAAKyH,oBAChC,OAAO,IAAI3H,KAAKE,EAAK0H,UAAYF,IAClC,CAACxB,IAGE2B,GAAeJ,EAAAA,EAAAA,SAAQ,IAClB,IAAIxB,GACN6B,OAAOC,GAASA,EAAM7H,OAASgG,GAC/B8B,KAAK,CAACC,EAAGC,KACN,MAAMC,EAAiBF,EAAE9H,KAAKiI,cAAcF,EAAE/H,MAC9C,OAAuB,IAAnBgI,EACOA,EAEHF,EAAE7H,UAAY8H,EAAE9H,QAAW,EAAI6H,EAAE7H,QAAU,GAAK,IAEjE,CAAC6F,EAAkBC,IAEhBmC,GAAiBZ,EAAAA,EAAAA,SAAQ,IAAM,CACjC,CAAEa,KAAM,UAAWC,MAAO,UAAWtD,YAAa,gBAAiBuD,UAAU,GAC7E,CAAEF,KAAM,QAASC,MAAO,QAAStD,YAAa,8BAA+BuD,UAAU,GACvF,CAAEF,KAAM,OAAQC,MAAO,OAAQrG,KAAM,OAAQsG,UAAU,EAAMC,aAAcvC,GAC3E,CAAEoC,KAAM,OAAQC,MAAO,OAAQrG,KAAM,OAAQsG,UAAU,EAAMC,aAAc,UAC5E,CAACvC,IAEEwC,GAA2BzB,EAAAA,EAAAA,aAAa/G,IAC1C6G,EAAuBzB,EAAmBpF,KAC3C,IAEGyI,GAAgB1B,EAAAA,EAAAA,aAAY,KAC9B,MAAM2B,EAAU,IAAI5I,KAAKwH,GACzBoB,EAAQpH,QAAQoH,EAAQnH,UAAY,GACpCiH,EAAyBE,IAC1B,CAACpB,EAA4BkB,IAE1BG,GAAgB5B,EAAAA,EAAAA,aAAY,KAC9B,MAAM2B,EAAU,IAAI5I,KAAKwH,GACzBoB,EAAQpH,QAAQoH,EAAQnH,UAAY,GACpCiH,EAAyBE,IAC1B,CAACpB,EAA4BkB,IAEhC,OACIpI,EAAAA,EAAAA,MAAAO,EAAAA,SAAA,CAAAJ,SAAA,EACIH,EAAAA,EAAAA,MAAA,OAAKC,GAAG,iBAAiBC,UAAU,iBAAgBC,SAAA,EAC/CH,EAAAA,EAAAA,MAAA,UAAQE,UAAU,yCAAwCC,SAAA,EACtDC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,mCAAkCC,SAAC,eAC7CH,EAAAA,EAAAA,MAAA,UACAQ,QAASA,IAAM0F,GAAsBD,GACrC/F,UAAU,oIACV,aAAY+F,EAAoB,yBAA2B,iBAAiB9F,SAAA,EAE5EH,EAAAA,EAAAA,MAAA,OACA6B,MAAM,6BACNC,MAAM,KACNC,OAAO,KACPE,QAAQ,YACRD,KAAK,OACLE,OAAO,eACPC,YAAY,IACZC,cAAc,QACdC,eAAe,QACfnC,UAAU,OAAQC,SAAA,EAElBC,EAAAA,EAAAA,KAAA,QAAMkC,EAAE,gEACRlC,EAAAA,EAAAA,KAAA,QAAMkC,EAAE,+DAEP2D,EAAoB,OAAS,cAItC7F,EAAAA,EAAAA,KAAA,KAAGF,UAAU,qBAAoBC,SAAC,6BAElCH,EAAAA,EAAAA,MAAA,UACIQ,QAASA,IAAM4F,GAAkB,GACjClG,UAAU,0JAAyJC,SAAA,EAEnKH,EAAAA,EAAAA,MAAA,OAAK6B,MAAM,6BAA6BC,MAAM,KAAKC,OAAO,KAAKC,KAAK,OAAOE,OAAO,eAAeC,YAAY,IAAIjC,UAAU,OAAMC,SAAA,EAACC,EAAAA,EAAAA,KAAA,QAAMoC,GAAG,KAAKC,GAAG,IAAIC,GAAG,KAAKC,GAAG,QAAYvC,EAAAA,EAAAA,KAAA,QAAMoC,GAAG,IAAIC,GAAG,KAAKC,GAAG,KAAKC,GAAG,UAAkB,0BAIpO3C,EAAAA,EAAAA,MAAA,OAAKE,UAAU,kFAAiFC,SAAA,EAC5FC,EAAAA,EAAAA,KAAA,UAAQI,QAAS6H,EAAenI,UAAU,oEAAoE,aAAW,eAAcC,UACnIC,EAAAA,EAAAA,KAAA,OAAKyB,MAAM,6BAA6BC,MAAM,KAAKC,OAAO,KAAKE,QAAQ,YAAYD,KAAK,OAAOE,OAAO,eAAeC,YAAY,IAAIC,cAAc,QAAQC,eAAe,QAAOlC,UAACC,EAAAA,EAAAA,KAAA,YAAUoI,OAAO,yBAEvMpI,EAAAA,EAAAA,KAAA,QAAMF,UAAU,6CAA4CC,SACvD+G,EAA2BuB,mBAAmB,QAAS,CAAEC,QAAS,OAAQzD,KAAM,UAAWE,MAAO,OAAQI,IAAK,eAEpHnF,EAAAA,EAAAA,KAAA,UAAQI,QAAS+H,EAAerI,UAAU,oEAAoE,aAAW,WAAUC,UAC/HC,EAAAA,EAAAA,KAAA,OAAKyB,MAAM,6BAA6BC,MAAM,KAAKC,OAAO,KAAKE,QAAQ,YAAYD,KAAK,OAAOE,OAAO,eAAeC,YAAY,IAAIC,cAAc,QAAQC,eAAe,QAAOlC,UAACC,EAAAA,EAAAA,KAAA,YAAUoI,OAAO,2BAI3MpI,EAAAA,EAAAA,KAAA,OAAKH,GAAG,wBAAwBC,UAAU,8CAA6CC,SAC1D,IAAxBoH,EAAazG,QACVV,EAAAA,EAAAA,KAAA,KAAGF,UAAU,iCAAgCC,SAAC,8CAE9CC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,YAAWC,SACrBoH,EAAaoB,IAAI9J,IACduB,EAAAA,EAAAA,KAACwI,EAAkB,CAEf/J,MAAOA,EACPC,WAAYmH,EACZ4C,SAAU7J,EAASuD,qBACnBuG,QAAS9J,EAAS8D,oBAClB/D,OAAQ6H,GALH/H,EAAMoB,aAanCG,EAAAA,EAAAA,KAAC2I,EAAAA,EAAQ,CACLrF,OAAQyC,EACRxC,QAASA,IAAMyC,GAAkB,GACjC4C,OAvIaC,IACrBjK,EAAS0C,kBAAkBuH,EAAK5I,QAAS4I,EAAK3I,MAAO2I,EAAKrJ,KAAMqJ,EAAKpJ,OAuI7D8B,MAAM,sBACNuH,OAAQnB,KAGZ3H,EAAAA,EAAAA,KAAC+I,EAAkB,CACfzF,OAAQ2C,EACR1C,QAASA,IAAM+C,GAAmB,GAClCnF,UAAWgF,EACX3C,SAAUoD,QAIvBxB,E,0FChNH,MAAM4D,EAAsB,CAAC,EA8H7B,EA5HiBxK,IAAqF,IAApF,OAAE8E,EAAM,QAAEC,EAAO,OAAEqF,EAAM,MAAErH,EAAK,OAAEuH,EAAM,aAAEG,EAAeD,GAAqBxK,EAC5F,MAAMI,GAAWC,EAAAA,EAAAA,MACVqK,EAAUC,IAAexF,EAAAA,EAAAA,UAAS,CAAC,IAE1CG,EAAAA,EAAAA,WAAU,KACN,GAAIR,EAAQ,CACR,MAAM8F,EAAcN,EAAOO,OAAO,CAACC,EAAKC,KACpCD,EAAIC,EAAM3B,MAAQqB,EAAaM,EAAM3B,OAAS2B,EAAMxB,cAAgB,GAC7DuB,GACR,CAAC,GACJH,EAAYC,EAChB,MACID,EAAY,CAAC,IAElB,CAAC7F,EAAQwF,EAAQG,IAEpB,MAAMO,EAAgBpF,IAClB,MAAM,KAAEwD,EAAI,MAAEpD,GAAUJ,EAAEM,OAC1ByE,EAAYM,IAAIC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUD,GAAI,IAAE,CAAC7B,GAAOpD,MAsB5C,OACIxE,EAAAA,EAAAA,KAAC+D,EAAAA,EAAe,CAAAhE,SACXuD,IACGtD,EAAAA,EAAAA,KAACwC,EAAAA,EAAOwB,IAAG,CACPlE,UAAU,oFACVsD,QAAS,CAAEa,QAAS,GACpBpB,QAAS,CAAEoB,QAAS,GACpBC,KAAM,CAAED,QAAS,GACjBjB,WAAY,CAAEmB,SAAU,KACxB/D,QAASmD,EAAQxD,UAEjBH,EAAAA,EAAAA,MAAA,OACIQ,QAAUgE,GAAMA,EAAEC,kBAClBvE,UAAU,qEAAoEC,SAAA,EAE9EC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,wCAAuCC,SAAEwB,KACvDvB,EAAAA,EAAAA,KAAA,OAAKF,UAAU,YAAWC,SACrB+I,EAAOP,IAAIgB,IACR3J,EAAAA,EAAAA,MAAA,OAAsBE,UAAU,gBAAeC,SAAA,EAC3CH,EAAAA,EAAAA,MAAA,SAAO0E,QAASiF,EAAM3B,KAAM9H,UAAU,+CAA8CC,SAAA,CAC/EwJ,EAAM1B,MAAO0B,EAAMzB,WAAY9H,EAAAA,EAAAA,KAAA,QAAMF,UAAU,eAAcC,SAAC,SAEnD,aAAfwJ,EAAM/H,MACHxB,EAAAA,EAAAA,KAAA,YACIH,GAAI0J,EAAM3B,KACVA,KAAM2B,EAAM3B,KACZrD,YAAagF,EAAMhF,aAAe,GAClCC,MAAO0E,EAASK,EAAM3B,OAAS,GAC/BnD,SAAU+E,EACVG,SAAUJ,EAAMI,WAAY,EAC5BC,KAAK,IACL9J,UAAU,2IAEC,WAAfyJ,EAAM/H,MACNxB,EAAAA,EAAAA,KAAA,UACIH,GAAI0J,EAAM3B,KACVA,KAAM2B,EAAM3B,KACZpD,MAAO0E,EAASK,EAAM3B,OAAS,GAC/BnD,SAAU+E,EACVG,SAAUJ,EAAMI,WAAY,EAC5B7J,UAAU,yIAAwIC,SAEjJwJ,EAAMM,SAAWN,EAAMM,QAAQtB,IAAIuB,IAChC9J,EAAAA,EAAAA,KAAA,UAA2BwE,MAAOsF,EAAOtF,MAAMzE,SAC1C+J,EAAOjC,OADCiC,EAAOtF,WAM5BxE,EAAAA,EAAAA,KAAA,SACIwB,KAAM+H,EAAM/H,MAAQ,OACpB3B,GAAI0J,EAAM3B,KACVA,KAAM2B,EAAM3B,KACZrD,YAAagF,EAAMhF,aAAe,GAClCC,MAAO0E,EAASK,EAAM3B,OAAS,GAC/BnD,SAAU+E,EACVG,SAAUJ,EAAMI,WAAY,EAC5B7J,UAAU,6IAvCZyJ,EAAM3B,UA6CxBhI,EAAAA,EAAAA,MAAA,OAAKE,UAAU,kCAAiCC,SAAA,EAC5CC,EAAAA,EAAAA,KAAA,UACII,QAASmD,EACTzD,UAAU,6KAA4KC,SACzL,YAGDC,EAAAA,EAAAA,KAAA,UACII,QA1FJ2J,KACpB,IAAK,MAAMR,KAAST,EAChB,GAAIS,EAAMzB,WAAaoB,EAASK,EAAM3B,MAMlC,YALIhJ,EAAS6E,iBACT7E,EAAS6E,iBAAiB,GAADlE,OAAIgK,EAAM1B,MAAK,iBAAiB,SAEzDxH,QAAQ2J,MAAM,GAADzK,OAAIgK,EAAM1B,MAAK,mBAKpCe,EACAA,EAAOM,GACAtK,EAAS0C,mBAChB1C,EAAS0C,kBAAkB4H,GAE/B3F,KA2EwBzD,UAAU,0KAAyKC,SACtL,mB","sources":["components/TimetableEventCard.js","components/EditTimetableModal.js","pages/TimetablePage.js","components/AddModal.js"],"sourcesContent":["// src/components/TimetableEventCard.js\nimport React from 'react';\nimport { useHandlers } from '../context/HandlerContext';\nimport { motion } from 'framer-motion';\n\n// IMPORTANT: This component now accepts a single 'event' object as a prop.\n// The list mapping and date navigation are handled in TimetablePage.js.\nconst TimetableEventCard = React.memo(({ event, isEditMode, onEdit }) => {\n    const handlers = useHandlers();\n\n    // Removed sortedEvents useMemo as this component now receives a single event.\n    // Sorting is handled in TimetablePage.js before passing individual events.\n\n    // Removed formatDateForDisplay as date navigation is no longer in this component.\n    // Removed handlePrevDay and handleNextDay as date navigation is no longer in this component.\n\n    /**\n     * Determines the status of an event (Completed, Missed, or Pending).\n     * @param {string} eventDate - The date of the event in 'YYYY-MM-DD' format.\n     * @param {string} eventTime - The time of the event in 'HH:MM' format.\n     * @param {boolean} isChecked - The checked status of the event.\n     * @returns {{text: string, colorClass: string}} An object with status text and Tailwind CSS color class.\n     */\n    const getEventStatus = (eventDate, eventTime, isChecked) => {\n        if (isChecked) {\n            return { text: 'Completed', colorClass: 'text-green-600' };\n        }\n\n        const now = new Date();\n        // Combine date and time to create a full Date object for comparison\n        const eventDateTime = new Date(`${eventDate}T${eventTime}`);\n\n        if (eventDateTime < now) {\n            return { text: 'Missed', colorClass: 'text-red-600' };\n        } else {\n            return { text: 'Pending', colorClass: 'text-yellow-600' };\n        }\n    };\n\n    // Get the status and its corresponding color for the current event\n    const status = getEventStatus(event.date, event.time, event.checked);\n\n    const cardClasses = `flex justify-between items-center p-4 mb-3 rounded-xl shadow-sm border ${event.checked ? \"bg-green-100 border-green-300\" : \"bg-white border-gray-200\"}`;\n\n    return (\n        <div\n            id={`timetable-event-${event.id}`}\n            className={cardClasses}\n        >\n            <div>\n                <p className=\"text-sm text-gray-500\">{event.time}</p>\n                <p className={`text-lg font-semibold text-gray-800 ${event.checked ? 'line-through opacity-70' : ''}`}>{event.subject}</p>\n                <h4 className=\"text-base text-gray-600\">{event.topic}</h4>\n                <p className={`text-sm font-semibold ${status.colorClass}`}>{status.text}</p>\n            </div>\n            <div className=\"flex items-center gap-1\">\n                {/* Conditional rendering based on isEditMode */}\n                {isEditMode ? (\n                    <>\n                        {/* Repeat button, visible only in edit mode */}\n                        <button\n                            onClick={() => {\n                                console.log('Event to repeat:', event);\n                                // Improved validation for required fields\n                                const missing = [];\n                                if (!event.subject || !event.subject.trim()) missing.push('subject');\n                                if (!event.topic || !event.topic.trim()) missing.push('topic');\n                                if (!event.time || !event.time.trim()) missing.push('time');\n                                if (!event.date || !event.date.trim()) missing.push('date');\n                                if (missing.length > 0) {\n                                    alert('Missing fields: ' + missing.join(', '));\n                                    return;\n                                }\n                                // Calculate next day's date\n                                const dateObj = new Date(event.date);\n                                dateObj.setDate(dateObj.getDate() + 1);\n                                const nextDate = dateObj.toISOString().slice(0, 10);\n                                // Prepare new event object (do not copy checked or id)\n                                const { id, ...eventData } = event;\n                                handlers.addTimetableEntry(eventData.subject, eventData.topic, nextDate, eventData.time);\n                            }}\n                            className=\"p-1.5 mr-4 rounded-full text-gray-400 hover:text-blue-500 transition-colors duration-200\"\n                            aria-label=\"Repeat for next day\"\n                            title=\"Repeat for next day\"\n                            type=\"button\"\n                        >\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n  <path d=\"M17 1v6h-6\"/>\n  <path d=\"M7 23v-6h6\"/>\n  <path d=\"M3.51 9a9 9 0 0 1 14.13-3.36L17 7\"/>\n  <path d=\"M20.49 15A9 9 0 0 1 6.36 18.36L7 17\"/>\n</svg>\n                        </button>\n                        {/* Edit button, visible only in edit mode */}\n                        <button\n                            onClick={() => onEdit(event.id)} // Call onEdit with event.id\n                            className=\"p-1.5 mr-4 rounded-full text-gray-400 hover:text-blue-500 transition-colors duration-200\"\n                            aria-label=\"Edit event\"\n                        >\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                            <path d=\"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\"></path><path d=\"M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z\"></path></svg>\n                        </button>\n                        {/* Delete button, visible only in edit mode */}\n                        <button\n                            onClick={() => handlers.deleteTimetableEntry(event.id)}\n                            className=\"p-1.5 rounded-full text-gray-400 hover:text-red-500 transition-colors duration-200 mr-2\"\n                            aria-label=\"Delete event\"\n                        >\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><path d=\"M3 6h18\"></path><path d=\"M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6\"></path><path d=\"M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2\"></path><line x1=\"10\" y1=\"11\" x2=\"10\" y2=\"17\"></line><line x1=\"14\" y1=\"11\" x2=\"14\" y2=\"17\"></line></svg>\n                        </button>\n                    </>\n                ) : (\n                    // Check/uncheck button for marking completion, visible only NOT in edit mode\n                    <motion.button\n                        onClick={() => handlers.checkTimetableEntry(event.id)}\n                        className={`w-6 h-6 rounded-full border-2 flex items-center justify-center`}\n                        aria-label={event.checked ? \"Mark as incomplete\" : \"Mark as complete\"}\n                        whileTap={{ scale: 0.85 }}\n                        animate={{\n                            scale: event.checked ? 1.1 : 1,\n                            backgroundColor: event.checked ? '#22c55e' : '#ffffff00',\n                            borderColor: event.checked ? '#22c55e' : '#d1d5db'\n                        }}\n                        transition={{ type: 'spring', stiffness: 400, damping: 15 }}\n                    >\n                        {/* Checkmark icon if event is checked */}\n                        {event.checked && (\n                            <motion.svg\n                                initial={{ scale: 0, rotate: -90 }}\n                                animate={{ scale: 1, rotate: 0 }}\n                                transition={{ type: 'spring', stiffness: 500, damping: 20 }}\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                                className=\"h-4 w-4 text-white\"\n                                fill=\"none\"\n                                viewBox=\"0 0 24 24\"\n                                stroke=\"currentColor\"\n                            >\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={3} d=\"M5 13l4 4L19 7\" />\n                            </motion.svg>\n                        )}\n                    </motion.button>\n                )}\n            </div>\n        </div>\n    );\n});\n\nexport default TimetableEventCard;","// src/components/EditTimetableModal.js\nimport React, { useState, useEffect } from 'react';\nimport { AnimatePresence, motion } from 'framer-motion';\n\nconst EditTimetableModal = ({ isOpen, onClose, eventData, onUpdate, showNotification }) => {\n    const [subject, setSubject] = useState('');\n    const [topic, setTopic] = useState('');\n    const [date, setDate] = useState('');\n    const [time, setTime] = useState('');\n\n    useEffect(() => {\n        if (eventData) {\n            setSubject(eventData.subject || '');\n            setTopic(eventData.topic || '');\n            setDate(eventData.date || '');\n            setTime(eventData.time || '');\n        }\n    }, [eventData]);\n\n    const handleUpdateClick = async () => {\n        if (!eventData || !eventData.id) {\n            showNotification('No event selected for editing.', 'error');\n            return;\n        }\n        if (!subject || !topic || !date || !time) {\n            showNotification('All fields are required.', 'error');\n            return;\n        }\n        await onUpdate(eventData.id, subject, topic, date, time);\n        onClose();\n    };\n\n    return (\n        <AnimatePresence>\n            {isOpen && (\n                <motion.div\n                    className=\"fixed inset-0 bg-gray-600 bg-opacity-75 flex items-center justify-center p-4 z-50\"\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    exit={{ opacity: 0 }}\n                    transition={{ duration: 0.22 }}\n                    onClick={onClose}\n                >\n                    <div\n                        onClick={(e) => e.stopPropagation()}\n                        className=\"bg-white rounded-lg shadow-xl w-full max-w-md p-6 relative\"\n                    >\n                        <h3 className=\"text-xl font-bold text-gray-800 mb-4\">Edit Study Event</h3>\n                        <div className=\"mb-3\">\n                            <label htmlFor=\"edit-modal-subject\" className=\"block text-sm font-medium text-gray-700 mb-1\">Subject</label>\n                            <input\n                                type=\"text\"\n                                id=\"edit-modal-subject\"\n                                className=\"w-full px-4 py-2 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-50\"\n                                placeholder=\"e.g., Anatomy\"\n                                value={subject}\n                                onChange={(e) => setSubject(e.target.value)}\n                            />\n                        </div>\n                        <div className=\"mb-3\">\n                            <label htmlFor=\"edit-modal-topic\" className=\"block text-sm font-medium text-gray-700 mb-1\">Topic</label>\n                            <input\n                                type=\"text\"\n                                id=\"edit-modal-topic\"\n                                className=\"w-full px-4 py-2 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-50\"\n                                placeholder=\"e.g., Cardiovascular System\"\n                                value={topic}\n                                onChange={(e) => setTopic(e.target.value)}\n                            />\n                        </div>\n                        <div className=\"mb-3\">\n                            <label htmlFor=\"edit-modal-date\" className=\"block text-sm font-medium text-gray-700 mb-1\">Date</label>\n                            <input\n                                type=\"date\"\n                                id=\"edit-modal-date\"\n                                className=\"w-full px-4 py-2 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-50\"\n                                value={date}\n                                onChange={(e) => setDate(e.target.value)}\n                            />\n                        </div>\n                        <div className=\"mb-4\">\n                            <label htmlFor=\"edit-modal-time\" className=\"block text-sm font-medium text-gray-700 mb-1\">Time</label>\n                            <input\n                                type=\"time\"\n                                id=\"edit-modal-time\"\n                                className=\"w-full px-4 py-2 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-50\"\n                                value={time}\n                                onChange={(e) => setTime(e.target.value)}\n                            />\n                        </div>\n                        <button\n                            onClick={handleUpdateClick}\n                            className=\"w-full bg-blue-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition duration-300\"\n                        >\n                            Update Event\n                        </button>\n                        <button\n                            onClick={onClose}\n                            className=\"w-full mt-2 bg-gray-200 text-gray-700 font-bold py-2 px-4 rounded-lg hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-400 transition duration-300\"\n                        >\n                            Cancel\n                        </button>\n                    </div>\n                </motion.div>\n            )}\n        </AnimatePresence>\n    );\n};\n\nexport default EditTimetableModal;","// src/pages/TimetablePage.js\nimport React, { useState, useMemo, useCallback } from 'react';\nimport TimetableEventCard from '../components/TimetableEventCard';\nimport { useHandlers } from '../context/HandlerContext';\nimport EditTimetableModal from '../components/EditTimetableModal';\nimport AddModal from '../components/AddModal';\n\n\n/**\n * Helper function to get a 'YYYY-MM-DD' formatted string from a Date object,\n * based on the user's local time zone. This prevents UTC conversion issues.\n * @param {Date} date - The date object to format.\n * @returns {string} The formatted date string.\n */\nconst getLocalDateString = (date) => {\n    const year = date.getFullYear();\n    const month = (date.getMonth() + 1).toString().padStart(2, '0');\n    const day = date.getDate().toString().padStart(2, '0');\n    return `${year}-${month}-${day}`;\n};\n\n// Custom areEqual function for React.memo\nfunction areEqual(prevProps, nextProps) {\n    if (\n        prevProps.timetableEntries.length !== nextProps.timetableEntries.length ||\n        prevProps.selectedDisplayDate !== nextProps.selectedDisplayDate\n    ) {\n        return false;\n    }\n    // Compare each event by id and checked (add more fields if needed)\n    for (let i = 0; i < prevProps.timetableEntries.length; i++) {\n        const prevEvent = prevProps.timetableEntries[i];\n        const nextEvent = nextProps.timetableEntries[i];\n        if (\n            prevEvent.id !== nextEvent.id ||\n            prevEvent.checked !== nextEvent.checked ||\n            prevEvent.subject !== nextEvent.subject ||\n            prevEvent.topic !== nextEvent.topic ||\n            prevEvent.date !== nextEvent.date ||\n            prevEvent.time !== nextEvent.time\n        ) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Memoize TimetablePage to prevent unnecessary re-renders\nconst TimetablePage = React.memo(({ timetableEntries, showNotification, userId }) => {\n    const handlers = useHandlers();\n    const [timetableEditMode, setTimetableEditMode] = useState(false);\n    const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n    const [isEditModalOpen, setIsEditModalFromState] = useState(false); // Renamed to avoid confusion\n    const [currentEventToEdit, setCurrentEventToEdit] = useState(null);\n\n    const [selectedDisplayDate, setSelectedDisplayDate] = useState(getLocalDateString(new Date()));\n\n    // Helper to control modal state consistently\n    const setIsEditModalOpen = useCallback((isOpen) => {\n        setIsEditModalFromState(isOpen);\n        if (!isOpen) {\n            setCurrentEventToEdit(null); // Clear event data when modal closes\n        }\n    }, []);\n\n    const handleSaveEvent = (data) => {\n        handlers.addTimetableEntry(data.subject, data.topic, data.date, data.time);\n    };\n\n    const handleEditEvent = useCallback((eventId) => {\n        const eventToEdit = timetableEntries.find(event => event.id === eventId);\n        if (eventToEdit) {\n            setCurrentEventToEdit(eventToEdit);\n            setIsEditModalOpen(true);\n        }\n    }, [timetableEntries, setIsEditModalOpen]);\n\n    // This handleUpdateEvent now correctly calls the updateTimetableEntry prop from App.js\n    // which already has userId and showNotification in its closure.\n    const handleUpdateEvent = useCallback(async (eventId, subject, topic, date, time) => {\n        await handlers.updateTimetableEntry(eventId, subject, topic, date, time);\n        setIsEditModalOpen(false); // Close modal using the consistent helper\n    }, [handlers, setIsEditModalOpen]);\n\n    const memoizedSelectedDateObject = useMemo(() => {\n        const date = new Date(selectedDisplayDate);\n        const userTimezoneOffset = date.getTimezoneOffset() * 60000;\n        return new Date(date.getTime() + userTimezoneOffset);\n    }, [selectedDisplayDate]);\n\n    // Memoize todayEntries (events for the selected date)\n    const todayEntries = useMemo(() => {\n        return [...timetableEntries]\n            .filter(entry => entry.date === selectedDisplayDate)\n            .sort((a, b) => {\n                const timeComparison = a.time.localeCompare(b.time);\n                if (timeComparison !== 0) {\n                    return timeComparison;\n                }\n                return (a.checked === b.checked) ? 0 : a.checked ? 1 : -1;\n            });\n    }, [timetableEntries, selectedDisplayDate]);\n\n    const addModalFields = useMemo(() => [\n        { name: 'subject', label: 'Subject', placeholder: 'e.g., Anatomy', required: true },\n        { name: 'topic', label: 'Topic', placeholder: 'e.g., Cardiovascular System', required: true },\n        { name: 'date', label: 'Date', type: 'date', required: true, defaultValue: selectedDisplayDate },\n        { name: 'time', label: 'Time', type: 'time', required: true, defaultValue: '09:00' }\n    ], [selectedDisplayDate]);\n\n    const handleSelectCalendarDate = useCallback((date) => {\n        setSelectedDisplayDate(getLocalDateString(date));\n    }, []);\n\n    const handlePrevDay = useCallback(() => {\n        const newDate = new Date(memoizedSelectedDateObject);\n        newDate.setDate(newDate.getDate() - 1);\n        handleSelectCalendarDate(newDate);\n    }, [memoizedSelectedDateObject, handleSelectCalendarDate]);\n\n    const handleNextDay = useCallback(() => {\n        const newDate = new Date(memoizedSelectedDateObject);\n        newDate.setDate(newDate.getDate() + 1);\n        handleSelectCalendarDate(newDate);\n    }, [memoizedSelectedDateObject, handleSelectCalendarDate]);\n\n    return (\n        <>\n            <div id=\"page-timetable\" className=\"page px-6 py-8\">\n                <header className=\"flex items-center justify-between mb-2\">\n                    <h1 className=\"text-3xl font-bold text-gray-900\">Timetable</h1>\n                        <button\n                        onClick={() => setTimetableEditMode(!timetableEditMode)}\n                        className=\"bg-blue-50 text-blue-700 font-semibold text-xs px-4 py-2 rounded-full flex items-center hover:bg-blue-100 transition duration-200\"\n                        aria-label={timetableEditMode ? 'Done editing timetable' : 'Edit timetable'}\n                        >\n                        <svg\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        width=\"16\"\n                        height=\"16\"\n                        viewBox=\"0 0 24 24\"\n                        fill=\"none\"\n                        stroke=\"currentColor\"\n                        strokeWidth=\"2\"\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        className=\"mr-1\"  // <-- this adds margin-right (adjust as needed)\n                        >\n                        <path d=\"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\"></path>\n                        <path d=\"M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z\"></path>\n                        </svg>\n                        {timetableEditMode ? 'Done' : 'Edit'}\n                        </button>\n\n                </header>\n                <p className=\"text-gray-500 mb-2\">Upcoming Study Schedule</p>\n\n                <button\n                    onClick={() => setIsAddModalOpen(true)}\n                    className=\"w-full bg-blue-50 text-blue-700 font-semibold mt-6 py-2 px-4 rounded-lg flex items-center justify-center hover:bg-blue-100 transition duration-300 mb-2\"\n                >\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" className=\"mr-2\"><line x1=\"12\" y1=\"5\" x2=\"12\" y2=\"19\"></line><line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\"></line></svg>\n                    Add New Study Event\n                </button>\n\n                <div className=\"flex items-center justify-between px-0 py-6 text-gray-700 font-semibold text-lg\">\n                    <button onClick={handlePrevDay} className=\"p-2 rounded-full hover:bg-gray-100 transition-colors duration-200\" aria-label=\"Previous day\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><polyline points=\"15 18 9 12 15 6\"></polyline></svg>\n                    </button>\n                    <span className=\"flex-grow text-center text-lg sm:text-base\">\n                        {memoizedSelectedDateObject.toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })}\n                    </span>\n                    <button onClick={handleNextDay} className=\"p-2 rounded-full hover:bg-gray-100 transition-colors duration-200\" aria-label=\"Next day\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><polyline points=\"9 18 15 12 9 6\"></polyline></svg>\n                    </button>\n                </div>\n\n                <div id=\"timetable-events-list\" className=\"space-y-4 bg-white rounded-lg min-h-[100px]\">\n                    {todayEntries.length === 0 ? (\n                        <p className=\"text-gray-500 text-center py-4\">Add a new study event to your timetable.</p>\n                    ) : (\n                        <div className=\"space-y-4\">\n                            {todayEntries.map(event => (\n                                <TimetableEventCard\n                                    key={event.id}\n                                    event={event}\n                                    isEditMode={timetableEditMode}\n                                    onDelete={handlers.deleteTimetableEntry}\n                                    onCheck={handlers.checkTimetableEntry}\n                                    onEdit={handleEditEvent}\n                                />\n                            ))}\n                        </div>\n                    )}\n                </div>\n            </div>\n\n            <AddModal\n                isOpen={isAddModalOpen}\n                onClose={() => setIsAddModalOpen(false)}\n                onSave={handleSaveEvent}\n                title=\"Add New Study Event\"\n                fields={addModalFields}\n            />\n\n            <EditTimetableModal\n                isOpen={isEditModalOpen}\n                onClose={() => setIsEditModalOpen(false)}\n                eventData={currentEventToEdit}\n                onUpdate={handleUpdateEvent}\n            />\n        </>\n    );\n}, areEqual);\n\nexport default TimetablePage;","// src/components/AddModal.js\nimport React, { useState, useEffect } from 'react';\nimport { useHandlers } from '../context/HandlerContext';\nimport { AnimatePresence, motion } from 'framer-motion';\n\nconst EMPTY_INITIAL_STATE = {};\n\nconst AddModal = ({ isOpen, onClose, onSave, title, fields, initialState = EMPTY_INITIAL_STATE }) => {\n    const handlers = useHandlers();\n    const [formData, setFormData] = useState({});\n\n    useEffect(() => {\n        if (isOpen) {\n            const initialData = fields.reduce((acc, field) => {\n                acc[field.name] = initialState[field.name] || field.defaultValue || '';\n                return acc;\n            }, {});\n            setFormData(initialData);\n        } else {\n            setFormData({});\n        }\n    }, [isOpen, fields, initialState]);\n\n    const handleChange = (e) => {\n        const { name, value } = e.target;\n        setFormData(prev => ({ ...prev, [name]: value }));\n    };\n\n    const handleSaveClick = () => {\n        for (const field of fields) {\n            if (field.required && !formData[field.name]) {\n                if (handlers.showNotification) {\n                    handlers.showNotification(`${field.label} is required.`, 'error');\n                } else {\n                    console.error(`${field.label} is required.`);\n                }\n                return;\n            }\n        }\n        if (onSave) {\n            onSave(formData);\n        } else if (handlers.addTimetableEntry) {\n            handlers.addTimetableEntry(formData);\n        }\n        onClose();\n    };\n\n    return (\n        <AnimatePresence>\n            {isOpen && (\n                <motion.div\n                    className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\"\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    exit={{ opacity: 0 }}\n                    transition={{ duration: 0.22 }}\n                    onClick={onClose}\n                >\n                    <div\n                        onClick={(e) => e.stopPropagation()}\n                        className=\"bg-white rounded-lg shadow-xl p-6 w-full max-w-md mx-auto relative\"\n                    >\n                        <h2 className=\"text-2xl font-bold mb-4 text-gray-800\">{title}</h2>\n                        <div className=\"space-y-4\">\n                            {fields.map(field => (\n                                <div key={field.name} className=\"flex flex-col\">\n                                    <label htmlFor={field.name} className=\"block text-sm font-medium text-gray-700 mb-1\">\n                                        {field.label}{field.required && <span className=\"text-red-500\">*</span>}\n                                    </label>\n                                    {field.type === 'textarea' ? (\n                                        <textarea\n                                            id={field.name}\n                                            name={field.name}\n                                            placeholder={field.placeholder || ''}\n                                            value={formData[field.name] || ''}\n                                            onChange={handleChange}\n                                            disabled={field.disabled || false}\n                                            rows=\"3\"\n                                            className=\"w-full px-4 py-2 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-50 disabled:bg-gray-200\"\n                                        />\n                                    ) : field.type === 'select' ? (\n                                        <select\n                                            id={field.name}\n                                            name={field.name}\n                                            value={formData[field.name] || ''}\n                                            onChange={handleChange}\n                                            disabled={field.disabled || false}\n                                            className=\"w-full px-4 py-2 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-50 disabled:bg-gray-200\"\n                                        >\n                                            {field.options && field.options.map(option => (\n                                                <option key={option.value} value={option.value}>\n                                                    {option.label}\n                                                </option>\n                                            ))}\n                                        </select>\n                                    ) : (\n                                        <input\n                                            type={field.type || 'text'}\n                                            id={field.name}\n                                            name={field.name}\n                                            placeholder={field.placeholder || ''}\n                                            value={formData[field.name] || ''}\n                                            onChange={handleChange}\n                                            disabled={field.disabled || false}\n                                            className=\"w-full px-4 py-2 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-50 disabled:bg-gray-200\"\n                                        />\n                                    )}\n                                </div>\n                            ))}\n                        </div>\n                        <div className=\"mt-6 flex justify-end space-x-3\">\n                            <button\n                                onClick={onClose}\n                                className=\"px-4 py-2 bg-gray-200 text-gray-700 font-bold rounded-lg hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-400 transition duration-300\"\n                            >\n                                Cancel\n                            </button>\n                            <button\n                                onClick={handleSaveClick}\n                                className=\"px-4 py-2 bg-blue-600 text-white font-bold rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition duration-300\"\n                            >\n                                Save\n                            </button>\n                        </div>\n                    </div>\n                </motion.div>\n            )}\n        </AnimatePresence>\n    );\n};\n\nexport default AddModal;"],"names":["React","_ref","event","isEditMode","onEdit","handlers","useHandlers","status","getEventStatus","eventDate","eventTime","isChecked","text","colorClass","now","Date","concat","date","time","checked","cardClasses","_jsxs","id","className","children","_jsx","subject","topic","_Fragment","onClick","console","log","missing","trim","push","length","alert","join","dateObj","setDate","getDate","nextDate","toISOString","slice","eventData","_objectWithoutProperties","_excluded","addTimetableEntry","title","type","xmlns","width","height","fill","viewBox","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","deleteTimetableEntry","x1","y1","x2","y2","motion","button","checkTimetableEntry","whileTap","scale","animate","backgroundColor","borderColor","transition","stiffness","damping","svg","initial","rotate","isOpen","onClose","onUpdate","showNotification","setSubject","useState","setTopic","setTime","useEffect","AnimatePresence","div","opacity","exit","duration","e","stopPropagation","htmlFor","placeholder","value","onChange","target","async","getLocalDateString","year","getFullYear","month","getMonth","toString","padStart","day","areEqual","prevProps","nextProps","timetableEntries","selectedDisplayDate","i","prevEvent","nextEvent","userId","timetableEditMode","setTimetableEditMode","isAddModalOpen","setIsAddModalOpen","isEditModalOpen","setIsEditModalFromState","currentEventToEdit","setCurrentEventToEdit","setSelectedDisplayDate","setIsEditModalOpen","useCallback","handleEditEvent","eventId","eventToEdit","find","handleUpdateEvent","updateTimetableEntry","memoizedSelectedDateObject","useMemo","userTimezoneOffset","getTimezoneOffset","getTime","todayEntries","filter","entry","sort","a","b","timeComparison","localeCompare","addModalFields","name","label","required","defaultValue","handleSelectCalendarDate","handlePrevDay","newDate","handleNextDay","points","toLocaleDateString","weekday","map","TimetableEventCard","onDelete","onCheck","AddModal","onSave","data","fields","EditTimetableModal","EMPTY_INITIAL_STATE","initialState","formData","setFormData","initialData","reduce","acc","field","handleChange","prev","_objectSpread","disabled","rows","options","option","handleSaveClick","error"],"sourceRoot":""}