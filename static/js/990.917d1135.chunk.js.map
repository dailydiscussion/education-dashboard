{"version":3,"file":"static/js/990.917d1135.chunk.js","mappings":"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","sources":["components/Greeting.js","components/FocusItemCard.js","components/CircularProgressBar.js","components/WeeklyTaskSummary.js","components/AvailableTestCard.js","components/EditFocusModal.js","pages/DashboardPage.js"],"sourcesContent":["// src/components/Greeting.js\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nconst Greeting = React.memo(({ userName }) => {\r\n    const [greetingText, setGreetingText] = useState('');\r\n    const [greetingEmoji, setGreetingEmoji] = useState('');\r\n\r\n    useEffect(() => {\r\n        const updateGreeting = () => {\r\n            const hour = new Date().getHours();\r\n            let text = '';\r\n            let emoji = '';\r\n\r\n            if (hour >= 5 && hour < 12) {\r\n                text = 'Good morning';\r\n                emoji = '☀️';\r\n            } else if (hour >= 12 && hour < 17) {\r\n                text = 'Good afternoon';\r\n                emoji = '👋';\r\n            } else if (hour >= 17 && hour < 22) {\r\n                text = 'Good evening';\r\n                emoji = '🌙';\r\n            } else {\r\n                text = 'Time to sleep';\r\n                emoji = '😴';\r\n            }\r\n            setGreetingText(text);\r\n            setGreetingEmoji(emoji);\r\n        };\r\n\r\n        updateGreeting();\r\n        const intervalId = setInterval(updateGreeting, 60 * 1000);\r\n        return () => clearInterval(intervalId);\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <p className=\"text-base font-light text-gray-500 flex items-center\">\r\n                {greetingText}<span className=\"ml-1 text-base\">{greetingEmoji}</span>\r\n            </p>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default Greeting;","// src/components/FocusItemCard.js\r\nimport React from 'react';\r\nimport { useSortable } from '@dnd-kit/sortable';\r\nimport { CSS } from '@dnd-kit/utilities';\r\n\r\nconst FocusItemCard = React.memo(({ item, onRemove, handleToggleTestCompletion, handleOpenFocusTest, ...props }) => {\r\n    const {\r\n        attributes,\r\n        listeners,\r\n        setNodeRef,\r\n        transform,\r\n        transition,\r\n        isDragging,\r\n    } = useSortable({ id: item.id });\r\n\r\n    const style = {\r\n        transform: CSS.Transform.toString(transform),\r\n        transition,\r\n        opacity: isDragging ? 0.7 : 1,\r\n        background: isDragging ? '#f0f0f0' : undefined,\r\n    };\r\n\r\n    const handleCheckboxClick = (e) => {\r\n        e.stopPropagation();\r\n        handleToggleTestCompletion(item.subject, item.title, !item.completed);\r\n    };\r\n\r\n    const handleRemoveClick = (e) => {\r\n        e.stopPropagation();\r\n        onRemove(item.id);\r\n    };\r\n\r\n    const handleTestClick = (e) => {\r\n        e.stopPropagation();\r\n        handleOpenFocusTest(item.id);\r\n    };\r\n\r\n    // Define a color palette for subject borders\r\n    const subjectColor = (subject) => {\r\n        if (!subject) return '#E5E7EB'; // default gray color\r\n        let hash = 0;\r\n        for (let i = 0; i < subject.length; i++) {\r\n            hash = subject.charCodeAt(i) + ((hash << 5) - hash);\r\n        }\r\n        const color = `hsl(${hash % 360}, 70%, 60%)`;\r\n        return color;\r\n    };\r\n\r\n    const borderColor = item.completed ? '#10B981' : subjectColor(item.subject);\r\n\r\n    // Card classes inspired by a clean, timetable-like appearance\r\n    const cardClasses = `\r\n        flex items-center w-full p-4 rounded-lg border-l-4 transition-all duration-200 ease-in-out\r\n        ${item.completed ? 'bg-green-100' : 'bg-gray-50'} hover:shadow-lg cursor-pointer\r\n    `;\r\n    \r\n    const titleClasses = `\r\n        font-bold text-gray-800 text-md\r\n        ${item.completed ? 'line-through text-gray-400' : ''}\r\n    `;\r\n\r\n    // Copilot: Add a console.log here to inspect the value of `item.testUrl` for debugging purposes. Also, add a comment reminding to check the data source for valid URLs.\r\n    console.log('FocusItemCard item.testUrl:', item.testUrl); // Check that this is a valid URL (should start with http/https)\r\n\r\n    return (\r\n        <div\r\n            ref={setNodeRef}\r\n            style={style}\r\n            className={cardClasses.replace('border-l-4', '')}\r\n        >\r\n            <div className=\"flex items-center w-full\">\r\n                {/* Checkbox on the left */}\r\n                <div className=\"flex items-center justify-center mr-4 flex-shrink-0\">\r\n                    <button\r\n                        onClick={handleCheckboxClick}\r\n                        className={`w-6 h-6 rounded-full border-2 ${item.completed ? \"bg-green-500 border-green-500\" : \"border-gray-300 hover:border-blue-500\"} flex-shrink-0 flex items-center justify-center transition-colors duration-200`}\r\n                        aria-label={item.completed ? \"Mark as incomplete\" : \"Mark as complete\"}\r\n                    >\r\n                        {item.completed && (\r\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4 text-white\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={3} d=\"M5 13l4 4L19 7\" />\r\n                            </svg>\r\n                        )}\r\n                    </button>\r\n                </div>\r\n\r\n                {/* Main Content as a link */}\r\n                {item.link ? (\r\n                    <a\r\n                        href={item.link}\r\n                        target=\"_blank\"\r\n                        rel=\"noopener noreferrer\"\r\n                        className=\"flex-grow min-w-0 px-2 py-1 block focus:outline-none\"\r\n                        tabIndex={0}\r\n                        aria-label={`Open test for ${item.title}`}\r\n                        style={{ textDecoration: \"none\" }}\r\n                    >\r\n                        <h3 className={titleClasses} title={item.title}>{item.title}</h3>\r\n                        <p className=\"text-sm text-gray-500 truncate\">{item.subject}</p>\r\n                        <div className=\"flex items-center mt-2 text-xs space-x-4\">\r\n                            {item.mcqs > 0 && (\r\n                                <span className=\"text-gray-600 flex items-center\">\r\n                                    {item.mcqs} MCQs\r\n                                </span>\r\n                            )}\r\n                        </div>\r\n                    </a>\r\n                ) : (\r\n                    <div className=\"flex-grow min-w-0 px-2 py-1\">\r\n                        <h3 className={titleClasses} title={item.title}>{item.title}</h3>\r\n                        <p className=\"text-sm text-gray-500 truncate\">{item.subject}</p>\r\n                        <div className=\"flex items-center mt-2 text-xs space-x-4\">\r\n                            {item.mcqs > 0 && (\r\n                                <span className=\"text-gray-600 flex items-center\">\r\n                                    {item.mcqs} MCQs\r\n                                </span>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                )}\r\n\r\n                {/* Action buttons on the right, always visible */}\r\n                <div className=\"flex flex-col items-center space-y-1 ml-2 flex-shrink-0\">\r\n                    <button\r\n                        className=\"p-1.5 rounded-full text-gray-400 hover:text-red-600 hover:bg-gray-100\"\r\n                        onClick={handleRemoveClick}\r\n                        aria-label=\"Remove from focus\"\r\n                    >\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line><line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line></svg>\r\n                    </button>\r\n                </div>\r\n\r\n                <span\r\n                    {...attributes}\r\n                    {...listeners}\r\n                    className=\"drag-handle flex items-center justify-center rounded-md ml-2 flex-shrink-0\"\r\n                    style={{ cursor: 'grab', width: 36, height: 36, touchAction: 'none', background: 'none' }}\r\n                    aria-label=\"Drag to reorder\"\r\n                    tabIndex={0}\r\n                >\r\n                    {/* SVG grip icon */}\r\n                    <svg width=\"20\" height=\"20\" viewBox=\"0 0 16 16\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"#6B7280\">\r\n                        <path d=\"M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z\"/>\r\n                    </svg>\r\n                </span>\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default FocusItemCard;","// src/components/CircularProgressBar.js\r\nimport React from 'react';\r\n\r\nconst CircularProgressBar = React.memo(({ percentage }) => {\r\n    const radius = 15.9155;\r\n    const circumference = 2 * Math.PI * radius;\r\n    const offset = circumference - (percentage / 100) * circumference;\r\n\r\n    return (\r\n        <div className=\"relative w-20 h-20\">\r\n            <svg className=\"w-full h-full\" viewBox=\"0 0 36 36\">\r\n                <path className=\"text-green-200\" d=\"M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831\" fill=\"none\" strokeWidth=\"3\" stroke=\"currentColor\" />\r\n                <path\r\n                    className=\"progress-ring__circle text-green-500\"\r\n                    d=\"M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831\"\r\n                    fill=\"none\"\r\n                    strokeWidth=\"3\"\r\n                    strokeLinecap=\"round\"\r\n                    stroke=\"currentColor\"\r\n                    style={{ strokeDasharray: `${circumference} ${circumference}`, strokeDashoffset: offset }}\r\n                />\r\n            </svg>\r\n            <div className=\"absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 text-xl font-bold text-green-600\">{Math.round(percentage)}%</div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default CircularProgressBar;","// src/components/WeeklyTaskSummary.js\r\nimport React from 'react';\r\n\r\n/**\r\n * A single bar representing a day's progress, showing completed and missed tasks.\r\n */\r\nconst DayBar = ({ day, planned, completed, missed, isToday }) => {\r\n    const completedHeight = planned > 0 ? (completed / planned) * 100 : 0;\r\n    const missedHeight = planned > 0 ? (missed / planned) * 100 : 0;\r\n\r\n    return (\r\n        <div className=\"flex flex-col items-center space-y-2\">\r\n            <div className=\"relative\">\r\n                <div className=\"absolute bottom-full mb-2 w-max px-2 py-1 text-xs text-white bg-gray-800 rounded-md opacity-0 group-hover:opacity-100 transition-opacity duration-300\">\r\n                    {completed}/{planned} Done, {missed} Missed\r\n                </div>\r\n                {/* Bar container */}\r\n                <div className=\"group h-28 w-6 bg-gray-200 rounded-full flex flex-col justify-end overflow-hidden\">\r\n                    {/* Missed portion of the bar */}\r\n                    <div\r\n                        className=\"bg-red-400 transition-all duration-500\"\r\n                        style={{ height: `${missedHeight}%` }}\r\n                    ></div>\r\n                    {/* Completed portion of the bar */}\r\n                    <div\r\n                        className=\"bg-cyan-400 transition-all duration-500\"\r\n                        style={{ height: `${completedHeight}%` }}\r\n                    ></div>\r\n                </div>\r\n            </div>\r\n            {/* Day label */}\r\n            <p className={`text-sm font-semibold ${isToday ? 'text-cyan-500' : 'text-gray-500'}`}>\r\n                {day}\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\n/**\r\n * The main component that displays the weekly summary chart.\r\n */\r\nconst WeeklyTaskSummary = React.memo(({ weeklyData }) => {\r\n    const totalCompleted = weeklyData.reduce((sum, day) => sum + day.completed, 0);\r\n    const totalMissed = weeklyData.reduce((sum, day) => sum + day.missed, 0);\r\n\r\n    return (\r\n        <div className=\"bg-white p-6 rounded-2xl shadow-sm mb-6\">\r\n            <div className=\"flex justify-between items-start mb-4\">\r\n                <div>\r\n                    <h3 className=\"text-gray-500 text-sm\">Overall</h3>\r\n                    <p className=\"text-3xl font-bold text-gray-800\">{totalCompleted} <span className=\"text-lg font-medium text-gray-600\">Completed</span></p>\r\n                    <p className=\"text-red-500 text-lg font-bold\">{totalMissed} <span className=\"font-medium\">Missed</span></p>\r\n                </div>\r\n                {/* Updated Legend */}\r\n                <div className=\"flex flex-col items-end space-y-1 text-sm\">\r\n                    <div className=\"flex items-center\">\r\n                        <span className=\"w-3 h-3 rounded-full bg-gray-200 mr-2\"></span>\r\n                        <span>Planned</span>\r\n                    </div>\r\n                    <div className=\"flex items-center\">\r\n                        <span className=\"w-3 h-3 rounded-full bg-cyan-400 mr-2\"></span>\r\n                        <span>Completed</span>\r\n                    </div>\r\n                    <div className=\"flex items-center\">\r\n                        <span className=\"w-3 h-3 rounded-full bg-red-400 mr-2\"></span>\r\n                        <span>Missed</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"flex justify-around\">\r\n                {weeklyData.map(data => (\r\n                    <DayBar\r\n                        key={data.day}\r\n                        day={data.day}\r\n                        planned={data.planned}\r\n                        completed={data.completed}\r\n                        missed={data.missed}\r\n                        isToday={data.isToday}\r\n                    />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default WeeklyTaskSummary;","// src/components/AvailableTestCard.js\r\nimport React from 'react';\r\n\r\nconst AvailableTestCard = ({ test, subject, isAdded, onAdd, onRemove, handleToggleTestCompletion }) => {\r\n\r\n    const handleAddClick = (e) => {\r\n        e.stopPropagation();\r\n        onAdd(test, subject);\r\n    };\r\n\r\n    const handleRemoveClick = (e) => {\r\n        e.stopPropagation();\r\n        // Find the matching item in today's focus to get its specific ID for removal\r\n        const itemToRemove = { id: test.id };\r\n        if (itemToRemove) {\r\n            onRemove(itemToRemove.id);\r\n        }\r\n    };\r\n    \r\n    const handleCheckboxClick = (e) => {\r\n        e.stopPropagation();\r\n        handleToggleTestCompletion(subject, test.title, !test.completed);\r\n    };\r\n\r\n    const cardClasses = `\r\n        flex items-center justify-between p-3 rounded-xl border transition-all duration-300\r\n        ${test.completed \r\n            ? 'bg-green-50 border-green-200' \r\n            : 'bg-white border-gray-200 hover:shadow-md'\r\n        }\r\n    `;\r\n\r\n    const titleClasses = `\r\n        font-semibold\r\n        ${test.completed \r\n            ? 'line-through text-gray-500' \r\n            : 'text-gray-800'\r\n        }\r\n    `;\r\n    \r\n    const subjectClasses = `\r\n        text-sm\r\n        ${test.completed \r\n            ? 'text-gray-400' \r\n            : 'text-gray-500'\r\n        }\r\n    `;\r\n\r\n    return (\r\n        <div id={`available-test-${test.id}`} className={cardClasses}>\r\n            <div className=\"flex items-center flex-grow mr-2\">\r\n                <button\r\n                    onClick={handleCheckboxClick}\r\n                    className={`w-6 h-6 rounded-md border-2 ${test.completed ? \"bg-green-500 border-green-500\" : \"border-gray-300\"} mr-3 flex-shrink-0 flex items-center justify-center transition-colors`}\r\n                    aria-label={test.completed ? \"Mark as incomplete\" : \"Mark as complete\"}\r\n                >\r\n                    {test.completed && (\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4 text-white\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={3} d=\"M5 13l4 4L19 7\" />\r\n                        </svg>\r\n                    )}\r\n                </button>\r\n                <div className=\"truncate\">\r\n                    <h4 className={titleClasses}>{test.title}</h4>\r\n                    <p className={subjectClasses}>{subject}</p>\r\n                </div>\r\n            </div>\r\n            \r\n            <button\r\n                onClick={isAdded ? handleRemoveClick : handleAddClick}\r\n                className={`flex-shrink-0 px-4 py-1.5 text-sm font-semibold rounded-lg transition-colors duration-200\r\n                    ${isAdded \r\n                        ? 'bg-red-100 text-red-700 hover:bg-red-200' \r\n                        : 'bg-blue-100 text-blue-700 hover:bg-blue-200'\r\n                    }`\r\n                }\r\n            >\r\n                {isAdded ? 'Remove' : 'Add'}\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AvailableTestCard;","// src/components/EditFocusModal.js\r\nimport React, { useState, useMemo, useEffect } from 'react';\r\nimport AvailableTestCard from './AvailableTestCard';\r\n\r\nconst EditFocusModal = ({ isOpen, onClose, testData, todayFocusItems, addFocusItem, removeFocusItem, handleToggleTestCompletion }) => {\r\n    const [searchQuery, setSearchQuery] = useState('');\r\n    const [selectedAvailableSubject, setSelectedAvailableSubject] = useState('');\r\n\r\n    // Reset filters when modal opens\r\n    useEffect(() => {\r\n        if (isOpen) {\r\n            setSearchQuery('');\r\n            setSelectedAvailableSubject('');\r\n        }\r\n    }, [isOpen]);\r\n\r\n    // Memoize allTests calculation to prevent unnecessary re-renders\r\n    const allTests = useMemo(() => {\r\n        return Object.keys(testData).flatMap(subject =>\r\n            testData[subject].map(test => ({ ...test, subject, id: `${subject}-${test.title}` }))\r\n        );\r\n    }, [testData]);\r\n\r\n    // Memoize filteredAllTests calculation\r\n    const filteredAllTests = useMemo(() => {\r\n        return allTests.filter(test => {\r\n            const matchesSubject = selectedAvailableSubject === '' || test.subject === selectedAvailableSubject;\r\n            const matchesSearch = test.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n                test.subject.toLowerCase().includes(searchQuery.toLowerCase());\r\n            return matchesSubject && matchesSearch;\r\n        });\r\n    }, [allTests, selectedAvailableSubject, searchQuery]);\r\n\r\n    const subjects = Object.keys(testData);\r\n\r\n    if (!isOpen) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\">\r\n            <div className=\"bg-white rounded-2xl shadow-xl p-6 w-full max-w-md mx-auto relative transform transition-all scale-100 opacity-100 flex flex-col\" style={{maxHeight: '85vh'}}>\r\n                <div className=\"flex justify-between items-center mb-4 pb-4 border-b border-gray-200\">\r\n                    <h2 className=\"text-2xl font-bold text-gray-800\">Add to Today's Focus</h2>\r\n                    <button\r\n                        onClick={onClose}\r\n                        className=\"p-2 rounded-full text-gray-500 hover:bg-gray-200 transition-colors\"\r\n                        aria-label=\"Close modal\"\r\n                    >\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line><line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line></svg>\r\n                    </button>\r\n                </div>\r\n\r\n                <div className=\"mb-4\">\r\n                    <label htmlFor=\"select-available-subject\" className=\"block text-sm font-medium text-gray-700 mb-1\">Filter by Subject:</label>\r\n                    <select\r\n                        id=\"select-available-subject\"\r\n                        className=\"w-full px-4 py-2 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-50\"\r\n                        value={selectedAvailableSubject}\r\n                        onChange={(e) => setSelectedAvailableSubject(e.target.value)}\r\n                    >\r\n                        <option value=\"\">All Subjects</option>\r\n                        {subjects.map(subject => (\r\n                            <option key={subject} value={subject}>{subject}</option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n\r\n                <div className=\"mb-4\">\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Search available tests...\"\r\n                        className=\"w-full px-4 py-2 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-50\"\r\n                        value={searchQuery}\r\n                        onChange={(e) => setSearchQuery(e.target.value)}\r\n                        aria-label=\"Search available tests\"\r\n                    />\r\n                </div>\r\n\r\n                <div id=\"available-tests-list\" className=\"space-y-3 pr-2 -mr-2 overflow-y-auto flex-grow\">\r\n                    {filteredAllTests.length === 0 ? (\r\n                        <p className=\"text-gray-500 text-center py-4\">No tests available matching your filters.</p>\r\n                    ) : (\r\n                        filteredAllTests.map(test => {\r\n                            const isAdded = todayFocusItems.some(item => item.id === test.id || (item.subject === test.subject && item.title === test.title));\r\n                            return (\r\n                                <AvailableTestCard\r\n                                    key={test.id}\r\n                                    test={test}\r\n                                    subject={test.subject}\r\n                                    isAdded={isAdded}\r\n                                    onAdd={addFocusItem}\r\n                                    onRemove={removeFocusItem}\r\n                                    handleToggleTestCompletion={handleToggleTestCompletion}\r\n                                />\r\n                            );\r\n                        })\r\n                    )}\r\n                </div>\r\n                 <div className=\"mt-6 flex justify-end pt-4 border-t border-gray-200\">\r\n                    <button\r\n                        onClick={onClose}\r\n                        className=\"px-6 py-2 bg-blue-600 text-white font-bold rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition duration-300\"\r\n                    >\r\n                        Done\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EditFocusModal;","// src/pages/DashboardPage.js\r\nimport React, { useState, useMemo, useEffect, useCallback } from 'react';\r\nimport Greeting from '../components/Greeting';\r\nimport FocusItemCard from '../components/FocusItemCard';\r\nimport LoadingSpinner from '../components/LoadingSpinner';\r\nimport CircularProgressBar from '../components/CircularProgressBar';\r\nimport WeeklyTaskSummary from '../components/WeeklyTaskSummary';\r\nimport EditFocusModal from '../components/EditFocusModal';\r\nimport {\r\n  DndContext,\r\n  closestCenter,\r\n  KeyboardSensor,\r\n  PointerSensor,\r\n  TouchSensor,\r\n  useSensor,\r\n  useSensors,\r\n} from '@dnd-kit/core';\r\nimport {\r\n  arrayMove,\r\n  SortableContext,\r\n  verticalListSortingStrategy,\r\n} from '@dnd-kit/sortable';\r\n\r\nconst DashboardPage = React.memo(({\r\n    testData,\r\n    timetableEntries,\r\n    todayFocusItems,\r\n    addFocusItem,\r\n    removeFocusItem,\r\n    reorderFocusItems,\r\n    onNavigate,\r\n    userName,\r\n    handleToggleTestCompletion,\r\n    isLoadingTodayFocus,\r\n    currentTimetableSubject,\r\n    setCurrentTimetableSubject,\r\n    setCurrentSelectedSubject,\r\n    navigateToTrophyPage,\r\n}) => {\r\n    const [isEditFocusModalOpen, setIsEditFocusModalOpen] = useState(false);\r\n\r\n    // Copilot: Memoize focusItems so it only recalculates when todayFocusItems changes\r\n    const focusItems = useMemo(\r\n        () => todayFocusItems.map((item, index) => ({ ...item, order: item.order !== undefined ? item.order : index })),\r\n        [todayFocusItems]\r\n    );\r\n\r\n    // Copilot: Memoize subjects array from testData\r\n    const subjects = useMemo(() => Object.keys(testData), [testData]);\r\n\r\n    // Copilot: Memoize completedCount and totalCount for currentTimetableSubject\r\n    const completedCount = useMemo(() => (\r\n        testData[currentTimetableSubject]\r\n            ? testData[currentTimetableSubject].filter(test => test.completed).length\r\n            : 0\r\n    ), [testData, currentTimetableSubject]);\r\n\r\n    const totalCount = useMemo(() => (\r\n        testData[currentTimetableSubject]\r\n            ? testData[currentTimetableSubject].length\r\n            : 0\r\n    ), [testData, currentTimetableSubject]);\r\n\r\n    // Copilot: Memoize progressPercentage calculation\r\n    const progressPercentage = useMemo(() => {\r\n        const subjectTests = testData[currentTimetableSubject] || [];\r\n        const totalTests = subjectTests.length;\r\n        const completedTests = subjectTests.filter(test => test.completed).length;\r\n        return totalTests > 0 ? (completedTests / totalTests) * 100 : 0;\r\n    }, [testData, currentTimetableSubject]);\r\n\r\n    // Copilot: Memoize weeklyTaskData calculation\r\n    const weeklyTaskData = useMemo(() => {\r\n        if (!timetableEntries) return [];\r\n        const days = ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'];\r\n        const weeklySummary = [];\r\n        const today = new Date();\r\n        const todayDateString = today.toLocaleDateString('en-CA');\r\n        const startOfWeek = new Date(today);\r\n        startOfWeek.setHours(0, 0, 0, 0);\r\n        startOfWeek.setDate(today.getDate() - today.getDay());\r\n\r\n        for (let i = 0; i < 7; i++) {\r\n            const currentDay = new Date(startOfWeek);\r\n            currentDay.setDate(startOfWeek.getDate() + i);\r\n            const dateString = currentDay.toLocaleDateString('en-CA');\r\n            const tasksForDay = timetableEntries.filter(entry => entry.date === dateString);\r\n            let completed = 0;\r\n            let missed = 0;\r\n            const now = new Date();\r\n            tasksForDay.forEach(task => {\r\n                if (task.checked) {\r\n                    completed++;\r\n                } else {\r\n                    const eventDateTime = new Date(`${task.date}T${task.time}`);\r\n                    if (eventDateTime < now) missed++;\r\n                }\r\n            });\r\n            weeklySummary.push({ day: days[currentDay.getDay()], planned: tasksForDay.length, completed, missed, isToday: dateString === todayDateString });\r\n        }\r\n        return weeklySummary;\r\n    }, [timetableEntries]);\r\n\r\n    const sensors = useSensors(\r\n        useSensor(PointerSensor, { activationConstraint: { distance: 5 } }),\r\n        useSensor(TouchSensor, { activationConstraint: { delay: 100, tolerance: 5 } }),\r\n        useSensor(KeyboardSensor)\r\n    );\r\n\r\n    const handleDragEnd = (event) => {\r\n        const { active, over } = event;\r\n        if (active.id !== over.id) {\r\n            const oldIndex = todayFocusItems.findIndex(item => item.id === active.id);\r\n            const newIndex = todayFocusItems.findIndex(item => item.id === over.id);\r\n            const newItems = arrayMove(todayFocusItems, oldIndex, newIndex);\r\n            reorderFocusItems(newItems);\r\n        }\r\n    };\r\n\r\n    const handleCheck = useCallback((id) => {\r\n        handleToggleTestCompletion(id);\r\n    }, [handleToggleTestCompletion]);\r\n\r\n    return (\r\n        <>\r\n            <div id=\"page-dashboard\" className=\"page px-6 py-8\">\r\n                \r\n                <div\r\n                    className=\"flex items-center gap-4 mb-8 cursor-pointer transition-colors duration-300\"\r\n                    onClick={() => onNavigate('profile')}\r\n                >\r\n                    <img src=\"https://placehold.co/80x80/E2E8F0/4A5568?text=NK\" alt=\"User Avatar\" className=\"w-16 h-16 rounded-full\" />\r\n                    <div>\r\n                        <h2 className=\"text-2xl text-gray-600\">Hello <span className=\"font-bold text-gray-800\">Nikhil !</span></h2>\r\n                        <Greeting userName={userName || 'User'} />\r\n                    </div>\r\n                </div>\r\n\r\n                <header className=\"flex items-center justify-between mb-2\">\r\n                    <h1 className=\"text-xl font-bold text-gray-900\">Weekly Performance</h1>\r\n                </header>\r\n                <p className=\"text-gray-500 mb-6\">Your progress for this week...</p>\r\n                <div className=\"mb-10\">\r\n                    <WeeklyTaskSummary weeklyData={weeklyTaskData} />\r\n                </div>\r\n\r\n                <header className=\"flex items-center justify-between \">\r\n                    <h2 className=\"text-xl font-bold text-gray-900\">Subject Progress</h2>\r\n                </header>\r\n                <p className=\"text-gray-500 mb-6\">Track completed tests for a specific subject.</p>\r\n                <div className=\"mb-6\">\r\n                    <label htmlFor=\"select-timetable-subject\" className=\"block text-sm font-medium text-gray-700 mb-3\">Select Subject:</label>\r\n                    <select\r\n                        id=\"select-timetable-subject\"\r\n                        className=\"w-full px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                        value={currentTimetableSubject}\r\n                        onChange={(e) => {\r\n                            const newSubject = e.target.value;\r\n                            setCurrentTimetableSubject(newSubject);\r\n                            setCurrentSelectedSubject(newSubject);\r\n                            localStorage.setItem('currentTimetableSubject', newSubject);\r\n                        }}\r\n                        disabled={subjects.length === 0}\r\n                    >\r\n                        {subjects.length === 0 && <option value=\"\">No Subjects Available</option>}\r\n                        {subjects.map(subject => <option key={subject} value={subject}>{subject}</option>)}\r\n                    </select>\r\n                </div>\r\n                <div id=\"timetable-progress-card\" onClick={() => navigateToTrophyPage(currentTimetableSubject)} className=\"rounded-xl border p-5 flex items-center justify-between mb-10 cursor-pointer transition-colors duration-300 shadow-sm\">\r\n                    <CircularProgressBar percentage={progressPercentage} />\r\n                    <div className=\"flex-1 ml-4\">\r\n                        <p className=\"text-sm text-gray-500\">Subject</p>\r\n                        <p id=\"timetable-progress-subject\" className=\"text-xl font-bold text-gray-800\">{currentTimetableSubject || 'Select Subject'}</p>\r\n                        <p className=\"text-sm text-gray-500 mt-1\">Tests Completed</p>\r\n                        <p className=\"text-lg font-bold text-gray-800\">{completedCount}/{totalCount}</p>\r\n                    </div>\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><polyline points=\"9 18 15 12 9 6\"></polyline></svg>\r\n                </div>\r\n                \r\n                <header className=\"flex items-center justify-between mb-2\">\r\n                    <h2 className=\"text-xl font-bold text-gray-900\">Today's Focus</h2>\r\n                    <button onClick={() => setIsEditFocusModalOpen(true)} className=\"text-blue-600 hover:text-blue-800 text-sm font-medium flex items-center\">\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"mr-1\"><path d=\"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\"></path><path d=\"M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z\"></path></svg>\r\n                        Edit Focus\r\n                    </button>\r\n                </header>\r\n                <p className=\"text-gray-500 mb-6\">Your tests for today...</p>\r\n                <div id=\"today-focus-container\" className=\"flex flex-col space-y-4 pb-4\">\r\n                    {isLoadingTodayFocus ? (\r\n                        <LoadingSpinner />\r\n                    ) : (\r\n                        focusItems.length === 0 ? (\r\n                            <p className=\"text-gray-500 text-center w-full\">No focus items for today. Click \"Edit Focus\" to add some.</p>\r\n                        ) : (\r\n                            <DndContext\r\n                                sensors={sensors}\r\n                                collisionDetection={closestCenter}\r\n                                onDragEnd={handleDragEnd}\r\n                            >\r\n                                <SortableContext\r\n                                    items={todayFocusItems.map(item => item.id)}\r\n                                    strategy={verticalListSortingStrategy}\r\n                                >\r\n                                    {todayFocusItems.map(item => (\r\n                                        <FocusItemCard key={item.id} item={item} onRemove={removeFocusItem} handleToggleTestCompletion={handleToggleTestCompletion} onCheck={handleCheck} isFirst={focusItems.indexOf(item) === 0} isLast={focusItems.indexOf(item) === focusItems.length - 1} />\r\n                                    ))}\r\n                                </SortableContext>\r\n                            </DndContext>\r\n                        )\r\n                    )}\r\n                </div>\r\n            </div>\r\n\r\n            <EditFocusModal\r\n                isOpen={isEditFocusModalOpen}\r\n                onClose={() => setIsEditFocusModalOpen(false)}\r\n                testData={testData}\r\n                todayFocusItems={todayFocusItems}\r\n                addFocusItem={addFocusItem}\r\n                removeFocusItem={removeFocusItem}\r\n            />\r\n        </>\r\n    );\r\n});\r\n\r\nexport default DashboardPage;"],"names":["React","_ref","userName","greetingText","setGreetingText","useState","greetingEmoji","setGreetingEmoji","useEffect","updateGreeting","hour","Date","getHours","text","emoji","intervalId","setInterval","clearInterval","_jsx","children","_jsxs","className","item","onRemove","handleToggleTestCompletion","handleOpenFocusTest","_objectWithoutProperties","_excluded","attributes","listeners","setNodeRef","transform","transition","isDragging","useSortable","id","style","CSS","Transform","toString","opacity","background","undefined","cardClasses","completed","subject","hash","i","length","charCodeAt","concat","subjectColor","titleClasses","console","log","testUrl","ref","replace","onClick","e","stopPropagation","title","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","link","href","target","rel","tabIndex","textDecoration","mcqs","width","height","x1","y1","x2","y2","_objectSpread","cursor","touchAction","percentage","circumference","Math","PI","offset","strokeDasharray","strokeDashoffset","round","DayBar","day","planned","missed","isToday","completedHeight","missedHeight","_ref2","weeklyData","totalCompleted","reduce","sum","totalMissed","map","data","test","isAdded","onAdd","subjectClasses","itemToRemove","isOpen","onClose","testData","todayFocusItems","addFocusItem","removeFocusItem","searchQuery","setSearchQuery","selectedAvailableSubject","setSelectedAvailableSubject","allTests","useMemo","Object","keys","flatMap","filteredAllTests","filter","matchesSubject","matchesSearch","toLowerCase","includes","subjects","maxHeight","htmlFor","value","onChange","type","placeholder","some","AvailableTestCard","timetableEntries","reorderFocusItems","onNavigate","isLoadingTodayFocus","currentTimetableSubject","setCurrentTimetableSubject","setCurrentSelectedSubject","navigateToTrophyPage","isEditFocusModalOpen","setIsEditFocusModalOpen","focusItems","index","order","completedCount","totalCount","progressPercentage","subjectTests","totalTests","completedTests","weeklyTaskData","days","weeklySummary","today","todayDateString","toLocaleDateString","startOfWeek","setHours","setDate","getDate","getDay","currentDay","dateString","tasksForDay","entry","date","now","forEach","task","checked","time","push","sensors","useSensors","useSensor","PointerSensor","activationConstraint","distance","TouchSensor","delay","tolerance","KeyboardSensor","handleCheck","useCallback","_Fragment","src","alt","Greeting","WeeklyTaskSummary","newSubject","localStorage","setItem","disabled","CircularProgressBar","points","LoadingSpinner","DndContext","collisionDetection","closestCenter","onDragEnd","event","active","over","oldIndex","findIndex","newIndex","newItems","arrayMove","SortableContext","items","strategy","verticalListSortingStrategy","FocusItemCard","onCheck","isFirst","indexOf","isLast","EditFocusModal"],"sourceRoot":""}