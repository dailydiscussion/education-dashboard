{"version":3,"file":"static/js/648.18c985d1.chunk.js","mappings":"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","sources":["../node_modules/@dnd-kit/utilities/src/hooks/useCombinedRefs.ts","../node_modules/@dnd-kit/utilities/src/execution-context/canUseDOM.ts","../node_modules/@dnd-kit/utilities/src/type-guards/isWindow.ts","../node_modules/@dnd-kit/utilities/src/type-guards/isNode.ts","../node_modules/@dnd-kit/utilities/src/execution-context/getWindow.ts","../node_modules/@dnd-kit/utilities/src/type-guards/isDocument.ts","../node_modules/@dnd-kit/utilities/src/type-guards/isHTMLElement.ts","../node_modules/@dnd-kit/utilities/src/type-guards/isSVGElement.ts","../node_modules/@dnd-kit/utilities/src/execution-context/getOwnerDocument.ts","../node_modules/@dnd-kit/utilities/src/hooks/useIsomorphicLayoutEffect.ts","../node_modules/@dnd-kit/utilities/src/hooks/useEvent.ts","../node_modules/@dnd-kit/utilities/src/hooks/useInterval.ts","../node_modules/@dnd-kit/utilities/src/hooks/useLatestValue.ts","../node_modules/@dnd-kit/utilities/src/hooks/useLazyMemo.ts","../node_modules/@dnd-kit/utilities/src/hooks/useNodeRef.ts","../node_modules/@dnd-kit/utilities/src/hooks/usePrevious.ts","../node_modules/@dnd-kit/utilities/src/hooks/useUniqueId.ts","../node_modules/@dnd-kit/utilities/src/adjustment.ts","../node_modules/@dnd-kit/utilities/src/event/isKeyboardEvent.ts","../node_modules/@dnd-kit/utilities/src/coordinates/getEventCoordinates.ts","../node_modules/@dnd-kit/utilities/src/event/isTouchEvent.ts","../node_modules/@dnd-kit/utilities/src/event/hasViewportRelativeCoordinates.ts","../node_modules/@dnd-kit/utilities/src/css.ts","../node_modules/@dnd-kit/utilities/src/focus/findFirstFocusableNode.ts","../node_modules/@dnd-kit/sortable/src/utilities/arrayMove.ts","../node_modules/@dnd-kit/sortable/src/utilities/getSortedRects.ts","../node_modules/@dnd-kit/sortable/src/utilities/isValidIndex.ts","../node_modules/@dnd-kit/sortable/src/strategies/rectSorting.ts","../node_modules/@dnd-kit/sortable/src/strategies/verticalListSorting.ts","../node_modules/@dnd-kit/sortable/src/components/SortableContext.tsx","../node_modules/@dnd-kit/sortable/src/utilities/itemsEqual.ts","../node_modules/@dnd-kit/sortable/src/utilities/normalizeDisabled.ts","../node_modules/@dnd-kit/sortable/src/hooks/defaults.ts","../node_modules/@dnd-kit/sortable/src/hooks/useSortable.ts","../node_modules/@dnd-kit/sortable/src/hooks/utilities/useDerivedTransform.ts","../node_modules/@dnd-kit/sortable/src/sensors/keyboard/sortableKeyboardCoordinates.ts","../node_modules/@dnd-kit/accessibility/src/components/HiddenText/HiddenText.tsx","../node_modules/@dnd-kit/accessibility/src/components/LiveRegion/LiveRegion.tsx","../node_modules/@dnd-kit/core/src/components/DndMonitor/context.ts","../node_modules/@dnd-kit/core/src/components/Accessibility/defaults.ts","../node_modules/@dnd-kit/core/src/components/Accessibility/Accessibility.tsx","../node_modules/@dnd-kit/accessibility/src/hooks/useAnnouncement.ts","../node_modules/@dnd-kit/core/src/components/DndMonitor/useDndMonitor.ts","../node_modules/@dnd-kit/core/src/store/actions.ts","../node_modules/@dnd-kit/core/src/utilities/other/noop.ts","../node_modules/@dnd-kit/core/src/sensors/useSensor.ts","../node_modules/@dnd-kit/core/src/sensors/useSensors.ts","../node_modules/@dnd-kit/core/src/utilities/coordinates/constants.ts","../node_modules/@dnd-kit/core/src/utilities/coordinates/distanceBetweenPoints.ts","../node_modules/@dnd-kit/core/src/utilities/algorithms/helpers.ts","../node_modules/@dnd-kit/core/src/utilities/algorithms/closestCenter.ts","../node_modules/@dnd-kit/core/src/utilities/algorithms/rectIntersection.ts","../node_modules/@dnd-kit/core/src/utilities/rect/getRectDelta.ts","../node_modules/@dnd-kit/core/src/utilities/rect/rectAdjustment.ts","../node_modules/@dnd-kit/core/src/utilities/transform/parseTransform.ts","../node_modules/@dnd-kit/core/src/utilities/rect/getRect.ts","../node_modules/@dnd-kit/core/src/utilities/transform/inverseTransform.ts","../node_modules/@dnd-kit/core/src/utilities/scroll/getScrollableAncestors.ts","../node_modules/@dnd-kit/core/src/utilities/scroll/isScrollable.ts","../node_modules/@dnd-kit/core/src/utilities/scroll/isFixed.ts","../node_modules/@dnd-kit/core/src/utilities/scroll/getScrollableElement.ts","../node_modules/@dnd-kit/core/src/utilities/scroll/getScrollCoordinates.ts","../node_modules/@dnd-kit/core/src/types/direction.ts","../node_modules/@dnd-kit/core/src/utilities/scroll/documentScrollingElement.ts","../node_modules/@dnd-kit/core/src/utilities/scroll/getScrollPosition.ts","../node_modules/@dnd-kit/core/src/utilities/scroll/getScrollDirectionAndSpeed.ts","../node_modules/@dnd-kit/core/src/utilities/scroll/getScrollElementRect.ts","../node_modules/@dnd-kit/core/src/utilities/scroll/getScrollOffsets.ts","../node_modules/@dnd-kit/core/src/utilities/scroll/scrollIntoViewIfNeeded.ts","../node_modules/@dnd-kit/core/src/utilities/rect/Rect.ts","../node_modules/@dnd-kit/core/src/sensors/utilities/Listeners.ts","../node_modules/@dnd-kit/core/src/sensors/utilities/hasExceededDistance.ts","../node_modules/@dnd-kit/core/src/sensors/events.ts","../node_modules/@dnd-kit/core/src/sensors/keyboard/types.ts","../node_modules/@dnd-kit/core/src/sensors/keyboard/defaults.ts","../node_modules/@dnd-kit/core/src/sensors/keyboard/KeyboardSensor.ts","../node_modules/@dnd-kit/core/src/sensors/pointer/AbstractPointerSensor.ts","../node_modules/@dnd-kit/core/src/sensors/utilities/getEventListenerTarget.ts","../node_modules/@dnd-kit/core/src/sensors/pointer/PointerSensor.ts","../node_modules/@dnd-kit/core/src/sensors/mouse/MouseSensor.ts","../node_modules/@dnd-kit/core/src/sensors/touch/TouchSensor.ts","../node_modules/@dnd-kit/core/src/hooks/utilities/useAutoScroller.ts","../node_modules/@dnd-kit/core/src/hooks/utilities/useDroppableMeasuring.ts","../node_modules/@dnd-kit/core/src/hooks/utilities/useInitialValue.ts","../node_modules/@dnd-kit/core/src/hooks/utilities/useResizeObserver.ts","../node_modules/@dnd-kit/core/src/hooks/utilities/useRect.ts","../node_modules/@dnd-kit/core/src/hooks/utilities/useMutationObserver.ts","../node_modules/@dnd-kit/core/src/hooks/utilities/useScrollableAncestors.ts","../node_modules/@dnd-kit/core/src/hooks/utilities/useScrollOffsetsDelta.ts","../node_modules/@dnd-kit/core/src/hooks/utilities/useWindowRect.ts","../node_modules/@dnd-kit/core/src/utilities/rect/getWindowClientRect.ts","../node_modules/@dnd-kit/core/src/hooks/utilities/useRects.ts","../node_modules/@dnd-kit/core/src/utilities/nodes/getMeasurableNode.ts","../node_modules/@dnd-kit/core/src/components/DndContext/defaults.ts","../node_modules/@dnd-kit/core/src/store/constructors.ts","../node_modules/@dnd-kit/core/src/store/context.ts","../node_modules/@dnd-kit/core/src/store/reducer.ts","../node_modules/@dnd-kit/core/src/components/Accessibility/components/RestoreFocus.tsx","../node_modules/@dnd-kit/core/src/modifiers/applyModifiers.ts","../node_modules/@dnd-kit/core/src/components/DndContext/DndContext.tsx","../node_modules/@dnd-kit/core/src/components/DndMonitor/useDndMonitorProvider.tsx","../node_modules/@dnd-kit/core/src/components/DndContext/hooks/useMeasuringConfiguration.ts","../node_modules/@dnd-kit/core/src/hooks/utilities/useCachedNode.ts","../node_modules/@dnd-kit/core/src/hooks/utilities/useInitialRect.ts","../node_modules/@dnd-kit/core/src/components/DndContext/hooks/useLayoutShiftScrollCompensation.ts","../node_modules/@dnd-kit/core/src/hooks/utilities/useDragOverlayMeasuring.ts","../node_modules/@dnd-kit/core/src/hooks/utilities/useRectDelta.ts","../node_modules/@dnd-kit/core/src/hooks/utilities/useScrollOffsets.ts","../node_modules/@dnd-kit/core/src/utilities/rect/adjustScale.ts","../node_modules/@dnd-kit/core/src/hooks/utilities/useCombineActivators.ts","../node_modules/@dnd-kit/core/src/hooks/utilities/useSensorSetup.ts","../node_modules/@dnd-kit/core/src/hooks/useDraggable.ts","../node_modules/@dnd-kit/core/src/hooks/utilities/useSyntheticListeners.ts","../node_modules/@dnd-kit/core/src/hooks/useDndContext.ts","../node_modules/@dnd-kit/core/src/hooks/useDroppable.ts"],"sourcesContent":["import {useMemo} from 'react';\n\nexport function useCombinedRefs<T>(\n  ...refs: ((node: T) => void)[]\n): (node: T) => void {\n  return useMemo(\n    () => (node: T) => {\n      refs.forEach((ref) => ref(node));\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    refs\n  );\n}\n","// https://github.com/facebook/react/blob/master/packages/shared/ExecutionEnvironment.js\nexport const canUseDOM =\n  typeof window !== 'undefined' &&\n  typeof window.document !== 'undefined' &&\n  typeof window.document.createElement !== 'undefined';\n","export function isWindow(element: Object): element is typeof window {\n  const elementString = Object.prototype.toString.call(element);\n  return (\n    elementString === '[object Window]' ||\n    // In Electron context the Window object serializes to [object global]\n    elementString === '[object global]'\n  );\n}\n","export function isNode(node: Object): node is Node {\n  return 'nodeType' in node;\n}\n","import {isWindow} from '../type-guards/isWindow';\nimport {isNode} from '../type-guards/isNode';\n\nexport function getWindow(target: Event['target']): typeof window {\n  if (!target) {\n    return window;\n  }\n\n  if (isWindow(target)) {\n    return target;\n  }\n\n  if (!isNode(target)) {\n    return window;\n  }\n\n  return target.ownerDocument?.defaultView ?? window;\n}\n","import {getWindow} from '../execution-context/getWindow';\n\nexport function isDocument(node: Node): node is Document {\n  const {Document} = getWindow(node);\n\n  return node instanceof Document;\n}\n","import {getWindow} from '../execution-context/getWindow';\n\nimport {isWindow} from './isWindow';\n\nexport function isHTMLElement(node: Node | Window): node is HTMLElement {\n  if (isWindow(node)) {\n    return false;\n  }\n\n  return node instanceof getWindow(node).HTMLElement;\n}\n","import {getWindow} from '../execution-context/getWindow';\n\nexport function isSVGElement(node: Node): node is SVGElement {\n  return node instanceof getWindow(node).SVGElement;\n}\n","import {\n  isWindow,\n  isHTMLElement,\n  isDocument,\n  isNode,\n  isSVGElement,\n} from '../type-guards';\n\nexport function getOwnerDocument(target: Event['target']): Document {\n  if (!target) {\n    return document;\n  }\n\n  if (isWindow(target)) {\n    return target.document;\n  }\n\n  if (!isNode(target)) {\n    return document;\n  }\n\n  if (isDocument(target)) {\n    return target;\n  }\n\n  if (isHTMLElement(target) || isSVGElement(target)) {\n    return target.ownerDocument;\n  }\n\n  return document;\n}\n","import {useEffect, useLayoutEffect} from 'react';\n\nimport {canUseDOM} from '../execution-context';\n\n/**\n * A hook that resolves to useEffect on the server and useLayoutEffect on the client\n * @param callback {function} Callback function that is invoked when the dependencies of the hook change\n */\nexport const useIsomorphicLayoutEffect = canUseDOM\n  ? useLayoutEffect\n  : useEffect;\n","import {useCallback, useRef} from 'react';\n\nimport {useIsomorphicLayoutEffect} from './useIsomorphicLayoutEffect';\n\nexport function useEvent<T extends Function>(handler: T | undefined) {\n  const handlerRef = useRef<T | undefined>(handler);\n\n  useIsomorphicLayoutEffect(() => {\n    handlerRef.current = handler;\n  });\n\n  return useCallback(function (...args: any) {\n    return handlerRef.current?.(...args);\n  }, []);\n}\n","import {useCallback, useRef} from 'react';\n\nexport function useInterval() {\n  const intervalRef = useRef<number | null>(null);\n\n  const set = useCallback((listener: Function, duration: number) => {\n    intervalRef.current = setInterval(listener, duration);\n  }, []);\n\n  const clear = useCallback(() => {\n    if (intervalRef.current !== null) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n  }, []);\n\n  return [set, clear] as const;\n}\n","import {useRef} from 'react';\nimport type {DependencyList} from 'react';\n\nimport {useIsomorphicLayoutEffect} from './useIsomorphicLayoutEffect';\n\nexport function useLatestValue<T extends any>(\n  value: T,\n  dependencies: DependencyList = [value]\n) {\n  const valueRef = useRef<T>(value);\n\n  useIsomorphicLayoutEffect(() => {\n    if (valueRef.current !== value) {\n      valueRef.current = value;\n    }\n  }, dependencies);\n\n  return valueRef;\n}\n","import {useMemo, useRef} from 'react';\n\nexport function useLazyMemo<T>(\n  callback: (prevValue: T | undefined) => T,\n  dependencies: any[]\n) {\n  const valueRef = useRef<T>();\n\n  return useMemo(\n    () => {\n      const newValue = callback(valueRef.current);\n      valueRef.current = newValue;\n\n      return newValue;\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [...dependencies]\n  );\n}\n","import {useRef, useCallback} from 'react';\n\nimport {useEvent} from './useEvent';\n\nexport function useNodeRef(\n  onChange?: (\n    newElement: HTMLElement | null,\n    previousElement: HTMLElement | null\n  ) => void\n) {\n  const onChangeHandler = useEvent(onChange);\n  const node = useRef<HTMLElement | null>(null);\n  const setNodeRef = useCallback(\n    (element: HTMLElement | null) => {\n      if (element !== node.current) {\n        onChangeHandler?.(element, node.current);\n      }\n\n      node.current = element;\n    },\n    //eslint-disable-next-line\n    []\n  );\n\n  return [node, setNodeRef] as const;\n}\n","import {useRef, useEffect} from 'react';\n\nexport function usePrevious<T>(value: T) {\n  const ref = useRef<T>();\n\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n\n  return ref.current;\n}\n","import {useMemo} from 'react';\n\nlet ids: Record<string, number> = {};\n\nexport function useUniqueId(prefix: string, value?: string) {\n  return useMemo(() => {\n    if (value) {\n      return value;\n    }\n\n    const id = ids[prefix] == null ? 0 : ids[prefix] + 1;\n    ids[prefix] = id;\n\n    return `${prefix}-${id}`;\n  }, [prefix, value]);\n}\n","function createAdjustmentFn(modifier: number) {\n  return <T extends Record<U, number>, U extends string>(\n    object: T,\n    ...adjustments: Partial<T>[]\n  ): T => {\n    return adjustments.reduce<T>(\n      (accumulator, adjustment) => {\n        const entries = Object.entries(adjustment) as [U, number][];\n\n        for (const [key, valueAdjustment] of entries) {\n          const value = accumulator[key];\n\n          if (value != null) {\n            accumulator[key] = (value + modifier * valueAdjustment) as T[U];\n          }\n        }\n\n        return accumulator;\n      },\n      {\n        ...object,\n      }\n    );\n  };\n}\n\nexport const add = createAdjustmentFn(1);\nexport const subtract = createAdjustmentFn(-1);\n","import {getWindow} from '../execution-context';\n\nexport function isKeyboardEvent(\n  event: Event | undefined | null\n): event is KeyboardEvent {\n  if (!event) {\n    return false;\n  }\n\n  const {KeyboardEvent} = getWindow(event.target);\n\n  return KeyboardEvent && event instanceof KeyboardEvent;\n}\n","import type {Coordinates} from './types';\nimport {isTouchEvent, hasViewportRelativeCoordinates} from '../event';\n\n/**\n * Returns the normalized x and y coordinates for mouse and touch events.\n */\nexport function getEventCoordinates(event: Event): Coordinates | null {\n  if (isTouchEvent(event)) {\n    if (event.touches && event.touches.length) {\n      const {clientX: x, clientY: y} = event.touches[0];\n\n      return {\n        x,\n        y,\n      };\n    } else if (event.changedTouches && event.changedTouches.length) {\n      const {clientX: x, clientY: y} = event.changedTouches[0];\n\n      return {\n        x,\n        y,\n      };\n    }\n  }\n\n  if (hasViewportRelativeCoordinates(event)) {\n    return {\n      x: event.clientX,\n      y: event.clientY,\n    };\n  }\n\n  return null;\n}\n","import {getWindow} from '../execution-context';\n\nexport function isTouchEvent(\n  event: Event | undefined | null\n): event is TouchEvent {\n  if (!event) {\n    return false;\n  }\n\n  const {TouchEvent} = getWindow(event.target);\n\n  return TouchEvent && event instanceof TouchEvent;\n}\n","export function hasViewportRelativeCoordinates(\n  event: Event\n): event is Event & Pick<PointerEvent, 'clientX' | 'clientY'> {\n  return 'clientX' in event && 'clientY' in event;\n}\n","export type Transform = {\n  x: number;\n  y: number;\n  scaleX: number;\n  scaleY: number;\n};\n\nexport interface Transition {\n  property: string;\n  easing: string;\n  duration: number;\n}\n\nexport const CSS = Object.freeze({\n  Translate: {\n    toString(transform: Transform | null) {\n      if (!transform) {\n        return;\n      }\n\n      const {x, y} = transform;\n\n      return `translate3d(${x ? Math.round(x) : 0}px, ${\n        y ? Math.round(y) : 0\n      }px, 0)`;\n    },\n  },\n  Scale: {\n    toString(transform: Transform | null) {\n      if (!transform) {\n        return;\n      }\n\n      const {scaleX, scaleY} = transform;\n\n      return `scaleX(${scaleX}) scaleY(${scaleY})`;\n    },\n  },\n  Transform: {\n    toString(transform: Transform | null) {\n      if (!transform) {\n        return;\n      }\n\n      return [\n        CSS.Translate.toString(transform),\n        CSS.Scale.toString(transform),\n      ].join(' ');\n    },\n  },\n  Transition: {\n    toString({property, duration, easing}: Transition) {\n      return `${property} ${duration}ms ${easing}`;\n    },\n  },\n});\n","const SELECTOR =\n  'a,frame,iframe,input:not([type=hidden]):not(:disabled),select:not(:disabled),textarea:not(:disabled),button:not(:disabled),*[tabindex]';\n\nexport function findFirstFocusableNode(\n  element: HTMLElement\n): HTMLElement | null {\n  if (element.matches(SELECTOR)) {\n    return element;\n  }\n\n  return element.querySelector(SELECTOR);\n}\n","/**\n * Move an array item to a different position. Returns a new array with the item moved to the new position.\n */\nexport function arrayMove<T>(array: T[], from: number, to: number): T[] {\n  const newArray = array.slice();\n  newArray.splice(\n    to < 0 ? newArray.length + to : to,\n    0,\n    newArray.splice(from, 1)[0]\n  );\n\n  return newArray;\n}\n","import type {\n  ClientRect,\n  UniqueIdentifier,\n  UseDndContextReturnValue,\n} from '@dnd-kit/core';\n\nexport function getSortedRects(\n  items: UniqueIdentifier[],\n  rects: UseDndContextReturnValue['droppableRects']\n) {\n  return items.reduce<ClientRect[]>((accumulator, id, index) => {\n    const rect = rects.get(id);\n\n    if (rect) {\n      accumulator[index] = rect;\n    }\n\n    return accumulator;\n  }, Array(items.length));\n}\n","export function isValidIndex(index: number | null): index is number {\n  return index !== null && index >= 0;\n}\n","import {arrayMove} from '../utilities';\nimport type {SortingStrategy} from '../types';\n\nexport const rectSortingStrategy: SortingStrategy = ({\n  rects,\n  activeIndex,\n  overIndex,\n  index,\n}) => {\n  const newRects = arrayMove(rects, overIndex, activeIndex);\n\n  const oldRect = rects[index];\n  const newRect = newRects[index];\n\n  if (!newRect || !oldRect) {\n    return null;\n  }\n\n  return {\n    x: newRect.left - oldRect.left,\n    y: newRect.top - oldRect.top,\n    scaleX: newRect.width / oldRect.width,\n    scaleY: newRect.height / oldRect.height,\n  };\n};\n","import type {ClientRect} from '@dnd-kit/core';\nimport type {SortingStrategy} from '../types';\n\n// To-do: We should be calculating scale transformation\nconst defaultScale = {\n  scaleX: 1,\n  scaleY: 1,\n};\n\nexport const verticalListSortingStrategy: SortingStrategy = ({\n  activeIndex,\n  activeNodeRect: fallbackActiveRect,\n  index,\n  rects,\n  overIndex,\n}) => {\n  const activeNodeRect = rects[activeIndex] ?? fallbackActiveRect;\n\n  if (!activeNodeRect) {\n    return null;\n  }\n\n  if (index === activeIndex) {\n    const overIndexRect = rects[overIndex];\n\n    if (!overIndexRect) {\n      return null;\n    }\n\n    return {\n      x: 0,\n      y:\n        activeIndex < overIndex\n          ? overIndexRect.top +\n            overIndexRect.height -\n            (activeNodeRect.top + activeNodeRect.height)\n          : overIndexRect.top - activeNodeRect.top,\n      ...defaultScale,\n    };\n  }\n\n  const itemGap = getItemGap(rects, index, activeIndex);\n\n  if (index > activeIndex && index <= overIndex) {\n    return {\n      x: 0,\n      y: -activeNodeRect.height - itemGap,\n      ...defaultScale,\n    };\n  }\n\n  if (index < activeIndex && index >= overIndex) {\n    return {\n      x: 0,\n      y: activeNodeRect.height + itemGap,\n      ...defaultScale,\n    };\n  }\n\n  return {\n    x: 0,\n    y: 0,\n    ...defaultScale,\n  };\n};\n\nfunction getItemGap(\n  clientRects: ClientRect[],\n  index: number,\n  activeIndex: number\n) {\n  const currentRect: ClientRect | undefined = clientRects[index];\n  const previousRect: ClientRect | undefined = clientRects[index - 1];\n  const nextRect: ClientRect | undefined = clientRects[index + 1];\n\n  if (!currentRect) {\n    return 0;\n  }\n\n  if (activeIndex < index) {\n    return previousRect\n      ? currentRect.top - (previousRect.top + previousRect.height)\n      : nextRect\n      ? nextRect.top - (currentRect.top + currentRect.height)\n      : 0;\n  }\n\n  return nextRect\n    ? nextRect.top - (currentRect.top + currentRect.height)\n    : previousRect\n    ? currentRect.top - (previousRect.top + previousRect.height)\n    : 0;\n}\n","import React, {useEffect, useMemo, useRef} from 'react';\nimport {useDndContext, ClientRect, UniqueIdentifier} from '@dnd-kit/core';\nimport {useIsomorphicLayoutEffect, useUniqueId} from '@dnd-kit/utilities';\n\nimport type {Disabled, SortingStrategy} from '../types';\nimport {getSortedRects, itemsEqual, normalizeDisabled} from '../utilities';\nimport {rectSortingStrategy} from '../strategies';\n\nexport interface Props {\n  children: React.ReactNode;\n  items: (UniqueIdentifier | {id: UniqueIdentifier})[];\n  strategy?: SortingStrategy;\n  id?: string;\n  disabled?: boolean | Disabled;\n}\n\nconst ID_PREFIX = 'Sortable';\n\ninterface ContextDescriptor {\n  activeIndex: number;\n  containerId: string;\n  disabled: Disabled;\n  disableTransforms: boolean;\n  items: UniqueIdentifier[];\n  overIndex: number;\n  useDragOverlay: boolean;\n  sortedRects: ClientRect[];\n  strategy: SortingStrategy;\n}\n\nexport const Context = React.createContext<ContextDescriptor>({\n  activeIndex: -1,\n  containerId: ID_PREFIX,\n  disableTransforms: false,\n  items: [],\n  overIndex: -1,\n  useDragOverlay: false,\n  sortedRects: [],\n  strategy: rectSortingStrategy,\n  disabled: {\n    draggable: false,\n    droppable: false,\n  },\n});\n\nexport function SortableContext({\n  children,\n  id,\n  items: userDefinedItems,\n  strategy = rectSortingStrategy,\n  disabled: disabledProp = false,\n}: Props) {\n  const {\n    active,\n    dragOverlay,\n    droppableRects,\n    over,\n    measureDroppableContainers,\n  } = useDndContext();\n  const containerId = useUniqueId(ID_PREFIX, id);\n  const useDragOverlay = Boolean(dragOverlay.rect !== null);\n  const items = useMemo<UniqueIdentifier[]>(\n    () =>\n      userDefinedItems.map((item) =>\n        typeof item === 'object' && 'id' in item ? item.id : item\n      ),\n    [userDefinedItems]\n  );\n  const isDragging = active != null;\n  const activeIndex = active ? items.indexOf(active.id) : -1;\n  const overIndex = over ? items.indexOf(over.id) : -1;\n  const previousItemsRef = useRef(items);\n  const itemsHaveChanged = !itemsEqual(items, previousItemsRef.current);\n  const disableTransforms =\n    (overIndex !== -1 && activeIndex === -1) || itemsHaveChanged;\n  const disabled = normalizeDisabled(disabledProp);\n\n  useIsomorphicLayoutEffect(() => {\n    if (itemsHaveChanged && isDragging) {\n      measureDroppableContainers(items);\n    }\n  }, [itemsHaveChanged, items, isDragging, measureDroppableContainers]);\n\n  useEffect(() => {\n    previousItemsRef.current = items;\n  }, [items]);\n\n  const contextValue = useMemo(\n    (): ContextDescriptor => ({\n      activeIndex,\n      containerId,\n      disabled,\n      disableTransforms,\n      items,\n      overIndex,\n      useDragOverlay,\n      sortedRects: getSortedRects(items, droppableRects),\n      strategy,\n    }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      activeIndex,\n      containerId,\n      disabled.draggable,\n      disabled.droppable,\n      disableTransforms,\n      items,\n      overIndex,\n      droppableRects,\n      useDragOverlay,\n      strategy,\n    ]\n  );\n\n  return <Context.Provider value={contextValue}>{children}</Context.Provider>;\n}\n","import type {UniqueIdentifier} from '@dnd-kit/core';\n\nexport function itemsEqual(a: UniqueIdentifier[], b: UniqueIdentifier[]) {\n  if (a === b) {\n    return true;\n  }\n\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","import type {Disabled} from '../types';\n\nexport function normalizeDisabled(disabled: boolean | Disabled): Disabled {\n  if (typeof disabled === 'boolean') {\n    return {\n      draggable: disabled,\n      droppable: disabled,\n    };\n  }\n\n  return disabled;\n}\n","import {CSS} from '@dnd-kit/utilities';\n\nimport {arrayMove} from '../utilities';\n\nimport type {\n  AnimateLayoutChanges,\n  NewIndexGetter,\n  SortableTransition,\n} from './types';\n\nexport const defaultNewIndexGetter: NewIndexGetter = ({\n  id,\n  items,\n  activeIndex,\n  overIndex,\n}) => arrayMove(items, activeIndex, overIndex).indexOf(id);\n\nexport const defaultAnimateLayoutChanges: AnimateLayoutChanges = ({\n  containerId,\n  isSorting,\n  wasDragging,\n  index,\n  items,\n  newIndex,\n  previousItems,\n  previousContainerId,\n  transition,\n}) => {\n  if (!transition || !wasDragging) {\n    return false;\n  }\n\n  if (previousItems !== items && index === newIndex) {\n    return false;\n  }\n\n  if (isSorting) {\n    return true;\n  }\n\n  return newIndex !== index && containerId === previousContainerId;\n};\n\nexport const defaultTransition: SortableTransition = {\n  duration: 200,\n  easing: 'ease',\n};\n\nexport const transitionProperty = 'transform';\n\nexport const disabledTransition = CSS.Transition.toString({\n  property: transitionProperty,\n  duration: 0,\n  easing: 'linear',\n});\n\nexport const defaultAttributes = {\n  roleDescription: 'sortable',\n};\n","import {useContext, useEffect, useMemo, useRef} from 'react';\nimport {\n  useDraggable,\n  useDroppable,\n  UseDraggableArguments,\n  UseDroppableArguments,\n} from '@dnd-kit/core';\nimport type {Data} from '@dnd-kit/core';\nimport {CSS, isKeyboardEvent, useCombinedRefs} from '@dnd-kit/utilities';\n\nimport {Context} from '../components';\nimport type {Disabled, SortableData, SortingStrategy} from '../types';\nimport {isValidIndex} from '../utilities';\nimport {\n  defaultAnimateLayoutChanges,\n  defaultAttributes,\n  defaultNewIndexGetter,\n  defaultTransition,\n  disabledTransition,\n  transitionProperty,\n} from './defaults';\nimport type {\n  AnimateLayoutChanges,\n  NewIndexGetter,\n  SortableTransition,\n} from './types';\nimport {useDerivedTransform} from './utilities';\n\nexport interface Arguments\n  extends Omit<UseDraggableArguments, 'disabled'>,\n    Pick<UseDroppableArguments, 'resizeObserverConfig'> {\n  animateLayoutChanges?: AnimateLayoutChanges;\n  disabled?: boolean | Disabled;\n  getNewIndex?: NewIndexGetter;\n  strategy?: SortingStrategy;\n  transition?: SortableTransition | null;\n}\n\nexport function useSortable({\n  animateLayoutChanges = defaultAnimateLayoutChanges,\n  attributes: userDefinedAttributes,\n  disabled: localDisabled,\n  data: customData,\n  getNewIndex = defaultNewIndexGetter,\n  id,\n  strategy: localStrategy,\n  resizeObserverConfig,\n  transition = defaultTransition,\n}: Arguments) {\n  const {\n    items,\n    containerId,\n    activeIndex,\n    disabled: globalDisabled,\n    disableTransforms,\n    sortedRects,\n    overIndex,\n    useDragOverlay,\n    strategy: globalStrategy,\n  } = useContext(Context);\n  const disabled: Disabled = normalizeLocalDisabled(\n    localDisabled,\n    globalDisabled\n  );\n  const index = items.indexOf(id);\n  const data = useMemo<SortableData & Data>(\n    () => ({sortable: {containerId, index, items}, ...customData}),\n    [containerId, customData, index, items]\n  );\n  const itemsAfterCurrentSortable = useMemo(\n    () => items.slice(items.indexOf(id)),\n    [items, id]\n  );\n  const {\n    rect,\n    node,\n    isOver,\n    setNodeRef: setDroppableNodeRef,\n  } = useDroppable({\n    id,\n    data,\n    disabled: disabled.droppable,\n    resizeObserverConfig: {\n      updateMeasurementsFor: itemsAfterCurrentSortable,\n      ...resizeObserverConfig,\n    },\n  });\n  const {\n    active,\n    activatorEvent,\n    activeNodeRect,\n    attributes,\n    setNodeRef: setDraggableNodeRef,\n    listeners,\n    isDragging,\n    over,\n    setActivatorNodeRef,\n    transform,\n  } = useDraggable({\n    id,\n    data,\n    attributes: {\n      ...defaultAttributes,\n      ...userDefinedAttributes,\n    },\n    disabled: disabled.draggable,\n  });\n  const setNodeRef = useCombinedRefs(setDroppableNodeRef, setDraggableNodeRef);\n  const isSorting = Boolean(active);\n  const displaceItem =\n    isSorting &&\n    !disableTransforms &&\n    isValidIndex(activeIndex) &&\n    isValidIndex(overIndex);\n  const shouldDisplaceDragSource = !useDragOverlay && isDragging;\n  const dragSourceDisplacement =\n    shouldDisplaceDragSource && displaceItem ? transform : null;\n  const strategy = localStrategy ?? globalStrategy;\n  const finalTransform = displaceItem\n    ? dragSourceDisplacement ??\n      strategy({\n        rects: sortedRects,\n        activeNodeRect,\n        activeIndex,\n        overIndex,\n        index,\n      })\n    : null;\n  const newIndex =\n    isValidIndex(activeIndex) && isValidIndex(overIndex)\n      ? getNewIndex({id, items, activeIndex, overIndex})\n      : index;\n  const activeId = active?.id;\n  const previous = useRef({\n    activeId,\n    items,\n    newIndex,\n    containerId,\n  });\n  const itemsHaveChanged = items !== previous.current.items;\n  const shouldAnimateLayoutChanges = animateLayoutChanges({\n    active,\n    containerId,\n    isDragging,\n    isSorting,\n    id,\n    index,\n    items,\n    newIndex: previous.current.newIndex,\n    previousItems: previous.current.items,\n    previousContainerId: previous.current.containerId,\n    transition,\n    wasDragging: previous.current.activeId != null,\n  });\n\n  const derivedTransform = useDerivedTransform({\n    disabled: !shouldAnimateLayoutChanges,\n    index,\n    node,\n    rect,\n  });\n\n  useEffect(() => {\n    if (isSorting && previous.current.newIndex !== newIndex) {\n      previous.current.newIndex = newIndex;\n    }\n\n    if (containerId !== previous.current.containerId) {\n      previous.current.containerId = containerId;\n    }\n\n    if (items !== previous.current.items) {\n      previous.current.items = items;\n    }\n  }, [isSorting, newIndex, containerId, items]);\n\n  useEffect(() => {\n    if (activeId === previous.current.activeId) {\n      return;\n    }\n\n    if (activeId != null && previous.current.activeId == null) {\n      previous.current.activeId = activeId;\n      return;\n    }\n\n    const timeoutId = setTimeout(() => {\n      previous.current.activeId = activeId;\n    }, 50);\n\n    return () => clearTimeout(timeoutId);\n  }, [activeId]);\n\n  return {\n    active,\n    activeIndex,\n    attributes,\n    data,\n    rect,\n    index,\n    newIndex,\n    items,\n    isOver,\n    isSorting,\n    isDragging,\n    listeners,\n    node,\n    overIndex,\n    over,\n    setNodeRef,\n    setActivatorNodeRef,\n    setDroppableNodeRef,\n    setDraggableNodeRef,\n    transform: derivedTransform ?? finalTransform,\n    transition: getTransition(),\n  };\n\n  function getTransition() {\n    if (\n      // Temporarily disable transitions for a single frame to set up derived transforms\n      derivedTransform ||\n      // Or to prevent items jumping to back to their \"new\" position when items change\n      (itemsHaveChanged && previous.current.newIndex === index)\n    ) {\n      return disabledTransition;\n    }\n\n    if (\n      (shouldDisplaceDragSource && !isKeyboardEvent(activatorEvent)) ||\n      !transition\n    ) {\n      return undefined;\n    }\n\n    if (isSorting || shouldAnimateLayoutChanges) {\n      return CSS.Transition.toString({\n        ...transition,\n        property: transitionProperty,\n      });\n    }\n\n    return undefined;\n  }\n}\n\nfunction normalizeLocalDisabled(\n  localDisabled: Arguments['disabled'],\n  globalDisabled: Disabled\n) {\n  if (typeof localDisabled === 'boolean') {\n    return {\n      draggable: localDisabled,\n      // Backwards compatibility\n      droppable: false,\n    };\n  }\n\n  return {\n    draggable: localDisabled?.draggable ?? globalDisabled.draggable,\n    droppable: localDisabled?.droppable ?? globalDisabled.droppable,\n  };\n}\n","import {useEffect, useRef, useState} from 'react';\nimport {getClientRect, ClientRect} from '@dnd-kit/core';\nimport {Transform, useIsomorphicLayoutEffect} from '@dnd-kit/utilities';\n\ninterface Arguments {\n  rect: React.MutableRefObject<ClientRect | null>;\n  disabled: boolean;\n  index: number;\n  node: React.MutableRefObject<HTMLElement | null>;\n}\n\n/*\n * When the index of an item changes while sorting,\n * we need to temporarily disable the transforms\n */\nexport function useDerivedTransform({disabled, index, node, rect}: Arguments) {\n  const [derivedTransform, setDerivedtransform] = useState<Transform | null>(\n    null\n  );\n  const previousIndex = useRef(index);\n\n  useIsomorphicLayoutEffect(() => {\n    if (!disabled && index !== previousIndex.current && node.current) {\n      const initial = rect.current;\n\n      if (initial) {\n        const current = getClientRect(node.current, {\n          ignoreTransform: true,\n        });\n\n        const delta = {\n          x: initial.left - current.left,\n          y: initial.top - current.top,\n          scaleX: initial.width / current.width,\n          scaleY: initial.height / current.height,\n        };\n\n        if (delta.x || delta.y) {\n          setDerivedtransform(delta);\n        }\n      }\n    }\n\n    if (index !== previousIndex.current) {\n      previousIndex.current = index;\n    }\n  }, [disabled, index, node, rect]);\n\n  useEffect(() => {\n    if (derivedTransform) {\n      setDerivedtransform(null);\n    }\n  }, [derivedTransform]);\n\n  return derivedTransform;\n}\n","import {\n  closestCorners,\n  getScrollableAncestors,\n  getFirstCollision,\n  KeyboardCode,\n  DroppableContainer,\n  KeyboardCoordinateGetter,\n} from '@dnd-kit/core';\nimport {subtract} from '@dnd-kit/utilities';\n\nimport {hasSortableData} from '../../types';\n\nconst directions: string[] = [\n  KeyboardCode.Down,\n  KeyboardCode.Right,\n  KeyboardCode.Up,\n  KeyboardCode.Left,\n];\n\nexport const sortableKeyboardCoordinates: KeyboardCoordinateGetter = (\n  event,\n  {\n    context: {\n      active,\n      collisionRect,\n      droppableRects,\n      droppableContainers,\n      over,\n      scrollableAncestors,\n    },\n  }\n) => {\n  if (directions.includes(event.code)) {\n    event.preventDefault();\n\n    if (!active || !collisionRect) {\n      return;\n    }\n\n    const filteredContainers: DroppableContainer[] = [];\n\n    droppableContainers.getEnabled().forEach((entry) => {\n      if (!entry || entry?.disabled) {\n        return;\n      }\n\n      const rect = droppableRects.get(entry.id);\n\n      if (!rect) {\n        return;\n      }\n\n      switch (event.code) {\n        case KeyboardCode.Down:\n          if (collisionRect.top < rect.top) {\n            filteredContainers.push(entry);\n          }\n          break;\n        case KeyboardCode.Up:\n          if (collisionRect.top > rect.top) {\n            filteredContainers.push(entry);\n          }\n          break;\n        case KeyboardCode.Left:\n          if (collisionRect.left > rect.left) {\n            filteredContainers.push(entry);\n          }\n          break;\n        case KeyboardCode.Right:\n          if (collisionRect.left < rect.left) {\n            filteredContainers.push(entry);\n          }\n          break;\n      }\n    });\n\n    const collisions = closestCorners({\n      active,\n      collisionRect: collisionRect,\n      droppableRects,\n      droppableContainers: filteredContainers,\n      pointerCoordinates: null,\n    });\n    let closestId = getFirstCollision(collisions, 'id');\n\n    if (closestId === over?.id && collisions.length > 1) {\n      closestId = collisions[1].id;\n    }\n\n    if (closestId != null) {\n      const activeDroppable = droppableContainers.get(active.id);\n      const newDroppable = droppableContainers.get(closestId);\n      const newRect = newDroppable ? droppableRects.get(newDroppable.id) : null;\n      const newNode = newDroppable?.node.current;\n\n      if (newNode && newRect && activeDroppable && newDroppable) {\n        const newScrollAncestors = getScrollableAncestors(newNode);\n        const hasDifferentScrollAncestors = newScrollAncestors.some(\n          (element, index) => scrollableAncestors[index] !== element\n        );\n        const hasSameContainer = isSameContainer(activeDroppable, newDroppable);\n        const isAfterActive = isAfter(activeDroppable, newDroppable);\n        const offset =\n          hasDifferentScrollAncestors || !hasSameContainer\n            ? {\n                x: 0,\n                y: 0,\n              }\n            : {\n                x: isAfterActive ? collisionRect.width - newRect.width : 0,\n                y: isAfterActive ? collisionRect.height - newRect.height : 0,\n              };\n        const rectCoordinates = {\n          x: newRect.left,\n          y: newRect.top,\n        };\n\n        const newCoordinates =\n          offset.x && offset.y\n            ? rectCoordinates\n            : subtract(rectCoordinates, offset);\n\n        return newCoordinates;\n      }\n    }\n  }\n\n  return undefined;\n};\n\nfunction isSameContainer(a: DroppableContainer, b: DroppableContainer) {\n  if (!hasSortableData(a) || !hasSortableData(b)) {\n    return false;\n  }\n\n  return (\n    a.data.current.sortable.containerId === b.data.current.sortable.containerId\n  );\n}\n\nfunction isAfter(a: DroppableContainer, b: DroppableContainer) {\n  if (!hasSortableData(a) || !hasSortableData(b)) {\n    return false;\n  }\n\n  if (!isSameContainer(a, b)) {\n    return false;\n  }\n\n  return a.data.current.sortable.index < b.data.current.sortable.index;\n}\n","import React from 'react';\n\ninterface Props {\n  id: string;\n  value: string;\n}\n\nconst hiddenStyles: React.CSSProperties = {\n  display: 'none',\n};\n\nexport function HiddenText({id, value}: Props) {\n  return (\n    <div id={id} style={hiddenStyles}>\n      {value}\n    </div>\n  );\n}\n","import React from 'react';\n\nexport interface Props {\n  id: string;\n  announcement: string;\n  ariaLiveType?: \"polite\" | \"assertive\" | \"off\";\n}\n\nexport function LiveRegion({id, announcement, ariaLiveType = \"assertive\"}: Props) {\n  // Hide element visually but keep it readable by screen readers\n  const visuallyHidden: React.CSSProperties = {\n    position: 'fixed',\n    top: 0,\n    left: 0,\n    width: 1,\n    height: 1,\n    margin: -1,\n    border: 0,\n    padding: 0,\n    overflow: 'hidden',\n    clip: 'rect(0 0 0 0)',\n    clipPath: 'inset(100%)',\n    whiteSpace: 'nowrap',\n  };\n  \n  return (\n    <div\n      id={id}\n      style={visuallyHidden}\n      role=\"status\"\n      aria-live={ariaLiveType}\n      aria-atomic\n    >\n      {announcement}\n    </div>\n  );\n}\n","import {createContext} from 'react';\n\nimport type {RegisterListener} from './types';\n\nexport const DndMonitorContext = createContext<RegisterListener | null>(null);\n","import type {Announcements, ScreenReaderInstructions} from './types';\n\nexport const defaultScreenReaderInstructions: ScreenReaderInstructions = {\n  draggable: `\n    To pick up a draggable item, press the space bar.\n    While dragging, use the arrow keys to move the item.\n    Press space again to drop the item in its new position, or press escape to cancel.\n  `,\n};\n\nexport const defaultAnnouncements: Announcements = {\n  onDragStart({active}) {\n    return `Picked up draggable item ${active.id}.`;\n  },\n  onDragOver({active, over}) {\n    if (over) {\n      return `Draggable item ${active.id} was moved over droppable area ${over.id}.`;\n    }\n\n    return `Draggable item ${active.id} is no longer over a droppable area.`;\n  },\n  onDragEnd({active, over}) {\n    if (over) {\n      return `Draggable item ${active.id} was dropped over droppable area ${over.id}`;\n    }\n\n    return `Draggable item ${active.id} was dropped.`;\n  },\n  onDragCancel({active}) {\n    return `Dragging was cancelled. Draggable item ${active.id} was dropped.`;\n  },\n};\n","import React, {useEffect, useMemo, useState} from 'react';\nimport {createPortal} from 'react-dom';\nimport {useUniqueId} from '@dnd-kit/utilities';\nimport {HiddenText, LiveRegion, useAnnouncement} from '@dnd-kit/accessibility';\n\nimport {DndMonitorListener, useDndMonitor} from '../DndMonitor';\n\nimport type {Announcements, ScreenReaderInstructions} from './types';\nimport {\n  defaultAnnouncements,\n  defaultScreenReaderInstructions,\n} from './defaults';\n\ninterface Props {\n  announcements?: Announcements;\n  container?: Element;\n  screenReaderInstructions?: ScreenReaderInstructions;\n  hiddenTextDescribedById: string;\n}\n\nexport function Accessibility({\n  announcements = defaultAnnouncements,\n  container,\n  hiddenTextDescribedById,\n  screenReaderInstructions = defaultScreenReaderInstructions,\n}: Props) {\n  const {announce, announcement} = useAnnouncement();\n  const liveRegionId = useUniqueId(`DndLiveRegion`);\n  const [mounted, setMounted] = useState(false);\n\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  useDndMonitor(\n    useMemo<DndMonitorListener>(\n      () => ({\n        onDragStart({active}) {\n          announce(announcements.onDragStart({active}));\n        },\n        onDragMove({active, over}) {\n          if (announcements.onDragMove) {\n            announce(announcements.onDragMove({active, over}));\n          }\n        },\n        onDragOver({active, over}) {\n          announce(announcements.onDragOver({active, over}));\n        },\n        onDragEnd({active, over}) {\n          announce(announcements.onDragEnd({active, over}));\n        },\n        onDragCancel({active, over}) {\n          announce(announcements.onDragCancel({active, over}));\n        },\n      }),\n      [announce, announcements]\n    )\n  );\n\n  if (!mounted) {\n    return null;\n  }\n\n  const markup = (\n    <>\n      <HiddenText\n        id={hiddenTextDescribedById}\n        value={screenReaderInstructions.draggable}\n      />\n      <LiveRegion id={liveRegionId} announcement={announcement} />\n    </>\n  );\n\n  return container ? createPortal(markup, container) : markup;\n}\n","import {useCallback, useState} from 'react';\n\nexport function useAnnouncement() {\n  const [announcement, setAnnouncement] = useState('');\n  const announce = useCallback((value: string | undefined) => {\n    if (value != null) {\n      setAnnouncement(value);\n    }\n  }, []);\n\n  return {announce, announcement} as const;\n}\n","import {useContext, useEffect} from 'react';\n\nimport {DndMonitorContext} from './context';\nimport type {DndMonitorListener} from './types';\n\nexport function useDndMonitor(listener: DndMonitorListener) {\n  const registerListener = useContext(DndMonitorContext);\n\n  useEffect(() => {\n    if (!registerListener) {\n      throw new Error(\n        'useDndMonitor must be used within a children of <DndContext>'\n      );\n    }\n\n    const unsubscribe = registerListener(listener);\n\n    return unsubscribe;\n  }, [listener, registerListener]);\n}\n","import type {Coordinates, UniqueIdentifier} from '../types';\nimport type {DroppableContainer} from './types';\n\nexport enum Action {\n  DragStart = 'dragStart',\n  DragMove = 'dragMove',\n  DragEnd = 'dragEnd',\n  DragCancel = 'dragCancel',\n  DragOver = 'dragOver',\n  RegisterDroppable = 'registerDroppable',\n  SetDroppableDisabled = 'setDroppableDisabled',\n  UnregisterDroppable = 'unregisterDroppable',\n}\n\nexport type Actions =\n  | {\n      type: Action.DragStart;\n      active: UniqueIdentifier;\n      initialCoordinates: Coordinates;\n    }\n  | {type: Action.DragMove; coordinates: Coordinates}\n  | {type: Action.DragEnd}\n  | {type: Action.DragCancel}\n  | {\n      type: Action.RegisterDroppable;\n      element: DroppableContainer;\n    }\n  | {\n      type: Action.SetDroppableDisabled;\n      id: UniqueIdentifier;\n      key: UniqueIdentifier;\n      disabled: boolean;\n    }\n  | {\n      type: Action.UnregisterDroppable;\n      id: UniqueIdentifier;\n      key: UniqueIdentifier;\n    };\n","export function noop(..._args: any) {}\n","import {useMemo} from 'react';\n\nimport type {Sensor, SensorDescriptor, SensorOptions} from './types';\n\nexport function useSensor<T extends SensorOptions>(\n  sensor: Sensor<T>,\n  options?: T\n): SensorDescriptor<T> {\n  return useMemo(\n    () => ({\n      sensor,\n      options: options ?? ({} as T),\n    }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [sensor, options]\n  );\n}\n","import {useMemo} from 'react';\n\nimport type {SensorDescriptor, SensorOptions} from './types';\n\nexport function useSensors(\n  ...sensors: (SensorDescriptor<any> | undefined | null)[]\n): SensorDescriptor<SensorOptions>[] {\n  return useMemo(\n    () =>\n      [...sensors].filter(\n        (sensor): sensor is SensorDescriptor<any> => sensor != null\n      ),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [...sensors]\n  );\n}\n","import type {Coordinates} from '../../types';\n\nexport const defaultCoordinates: Coordinates = Object.freeze({\n  x: 0,\n  y: 0,\n});\n","import type {Coordinates} from '../../types';\n\n/**\n * Returns the distance between two points\n */\nexport function distanceBetween(p1: Coordinates, p2: Coordinates) {\n  return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));\n}\n","/* eslint-disable no-redeclare */\nimport type {ClientRect} from '../../types';\n\nimport type {Collision, CollisionDescriptor} from './types';\n\n/**\n * Sort collisions from smallest to greatest value\n */\nexport function sortCollisionsAsc(\n  {data: {value: a}}: CollisionDescriptor,\n  {data: {value: b}}: CollisionDescriptor\n) {\n  return a - b;\n}\n\n/**\n * Sort collisions from greatest to smallest value\n */\nexport function sortCollisionsDesc(\n  {data: {value: a}}: CollisionDescriptor,\n  {data: {value: b}}: CollisionDescriptor\n) {\n  return b - a;\n}\n\n/**\n * Returns the coordinates of the corners of a given rectangle:\n * [TopLeft {x, y}, TopRight {x, y}, BottomLeft {x, y}, BottomRight {x, y}]\n */\nexport function cornersOfRectangle({left, top, height, width}: ClientRect) {\n  return [\n    {\n      x: left,\n      y: top,\n    },\n    {\n      x: left + width,\n      y: top,\n    },\n    {\n      x: left,\n      y: top + height,\n    },\n    {\n      x: left + width,\n      y: top + height,\n    },\n  ];\n}\n\n/**\n * Returns the first collision, or null if there isn't one.\n * If a property is specified, returns the specified property of the first collision.\n */\nexport function getFirstCollision(\n  collisions: Collision[] | null | undefined\n): Collision | null;\nexport function getFirstCollision<T extends keyof Collision>(\n  collisions: Collision[] | null | undefined,\n  property: T\n): Collision[T] | null;\nexport function getFirstCollision(\n  collisions: Collision[] | null | undefined,\n  property?: keyof Collision\n) {\n  if (!collisions || collisions.length === 0) {\n    return null;\n  }\n\n  const [firstCollision] = collisions;\n\n  return property ? firstCollision[property] : firstCollision;\n}\n","import {distanceBetween} from '../coordinates';\nimport type {Coordinates, ClientRect} from '../../types';\n\nimport type {CollisionDescriptor, CollisionDetection} from './types';\nimport {sortCollisionsAsc} from './helpers';\n\n/**\n * Returns the coordinates of the center of a given ClientRect\n */\nfunction centerOfRectangle(\n  rect: ClientRect,\n  left = rect.left,\n  top = rect.top\n): Coordinates {\n  return {\n    x: left + rect.width * 0.5,\n    y: top + rect.height * 0.5,\n  };\n}\n\n/**\n * Returns the closest rectangles from an array of rectangles to the center of a given\n * rectangle.\n */\nexport const closestCenter: CollisionDetection = ({\n  collisionRect,\n  droppableRects,\n  droppableContainers,\n}) => {\n  const centerRect = centerOfRectangle(\n    collisionRect,\n    collisionRect.left,\n    collisionRect.top\n  );\n  const collisions: CollisionDescriptor[] = [];\n\n  for (const droppableContainer of droppableContainers) {\n    const {id} = droppableContainer;\n    const rect = droppableRects.get(id);\n\n    if (rect) {\n      const distBetween = distanceBetween(centerOfRectangle(rect), centerRect);\n\n      collisions.push({id, data: {droppableContainer, value: distBetween}});\n    }\n  }\n\n  return collisions.sort(sortCollisionsAsc);\n};\n","import type {ClientRect} from '../../types';\n\nimport type {CollisionDescriptor, CollisionDetection} from './types';\nimport {sortCollisionsDesc} from './helpers';\n\n/**\n * Returns the intersecting rectangle area between two rectangles\n */\nexport function getIntersectionRatio(\n  entry: ClientRect,\n  target: ClientRect\n): number {\n  const top = Math.max(target.top, entry.top);\n  const left = Math.max(target.left, entry.left);\n  const right = Math.min(target.left + target.width, entry.left + entry.width);\n  const bottom = Math.min(target.top + target.height, entry.top + entry.height);\n  const width = right - left;\n  const height = bottom - top;\n\n  if (left < right && top < bottom) {\n    const targetArea = target.width * target.height;\n    const entryArea = entry.width * entry.height;\n    const intersectionArea = width * height;\n    const intersectionRatio =\n      intersectionArea / (targetArea + entryArea - intersectionArea);\n\n    return Number(intersectionRatio.toFixed(4));\n  }\n\n  // Rectangles do not overlap, or overlap has an area of zero (edge/corner overlap)\n  return 0;\n}\n\n/**\n * Returns the rectangles that has the greatest intersection area with a given\n * rectangle in an array of rectangles.\n */\nexport const rectIntersection: CollisionDetection = ({\n  collisionRect,\n  droppableRects,\n  droppableContainers,\n}) => {\n  const collisions: CollisionDescriptor[] = [];\n\n  for (const droppableContainer of droppableContainers) {\n    const {id} = droppableContainer;\n    const rect = droppableRects.get(id);\n\n    if (rect) {\n      const intersectionRatio = getIntersectionRatio(rect, collisionRect);\n\n      if (intersectionRatio > 0) {\n        collisions.push({\n          id,\n          data: {droppableContainer, value: intersectionRatio},\n        });\n      }\n    }\n  }\n\n  return collisions.sort(sortCollisionsDesc);\n};\n","import type {Coordinates, ClientRect} from '../../types';\nimport {defaultCoordinates} from '../coordinates';\n\nexport function getRectDelta(\n  rect1: ClientRect | null,\n  rect2: ClientRect | null\n): Coordinates {\n  return rect1 && rect2\n    ? {\n        x: rect1.left - rect2.left,\n        y: rect1.top - rect2.top,\n      }\n    : defaultCoordinates;\n}\n","import type {Coordinates, ClientRect} from '../../types';\n\nexport function createRectAdjustmentFn(modifier: number) {\n  return function adjustClientRect(\n    rect: ClientRect,\n    ...adjustments: Coordinates[]\n  ): ClientRect {\n    return adjustments.reduce<ClientRect>(\n      (acc, adjustment) => ({\n        ...acc,\n        top: acc.top + modifier * adjustment.y,\n        bottom: acc.bottom + modifier * adjustment.y,\n        left: acc.left + modifier * adjustment.x,\n        right: acc.right + modifier * adjustment.x,\n      }),\n      {...rect}\n    );\n  };\n}\n\nexport const getAdjustedRect = createRectAdjustmentFn(1);\n","import type {Transform} from '@dnd-kit/utilities';\n\nexport function parseTransform(transform: string): Transform | null {\n  if (transform.startsWith('matrix3d(')) {\n    const transformArray = transform.slice(9, -1).split(/, /);\n\n    return {\n      x: +transformArray[12],\n      y: +transformArray[13],\n      scaleX: +transformArray[0],\n      scaleY: +transformArray[5],\n    };\n  } else if (transform.startsWith('matrix(')) {\n    const transformArray = transform.slice(7, -1).split(/, /);\n\n    return {\n      x: +transformArray[4],\n      y: +transformArray[5],\n      scaleX: +transformArray[0],\n      scaleY: +transformArray[3],\n    };\n  }\n\n  return null;\n}\n","import {getWindow} from '@dnd-kit/utilities';\n\nimport type {ClientRect} from '../../types';\nimport {inverseTransform} from '../transform';\n\ninterface Options {\n  ignoreTransform?: boolean;\n}\n\nconst defaultOptions: Options = {ignoreTransform: false};\n\n/**\n * Returns the bounding client rect of an element relative to the viewport.\n */\nexport function getClientRect(\n  element: Element,\n  options: Options = defaultOptions\n) {\n  let rect: ClientRect = element.getBoundingClientRect();\n\n  if (options.ignoreTransform) {\n    const {transform, transformOrigin} =\n      getWindow(element).getComputedStyle(element);\n\n    if (transform) {\n      rect = inverseTransform(rect, transform, transformOrigin);\n    }\n  }\n\n  const {top, left, width, height, bottom, right} = rect;\n\n  return {\n    top,\n    left,\n    width,\n    height,\n    bottom,\n    right,\n  };\n}\n\n/**\n * Returns the bounding client rect of an element relative to the viewport.\n *\n * @remarks\n * The ClientRect returned by this method does not take into account transforms\n * applied to the element it measures.\n *\n */\nexport function getTransformAgnosticClientRect(element: Element): ClientRect {\n  return getClientRect(element, {ignoreTransform: true});\n}\n","import type {ClientRect} from '../../types';\n\nimport {parseTransform} from './parseTransform';\n\nexport function inverseTransform(\n  rect: ClientRect,\n  transform: string,\n  transformOrigin: string\n): ClientRect {\n  const parsedTransform = parseTransform(transform);\n\n  if (!parsedTransform) {\n    return rect;\n  }\n\n  const {scaleX, scaleY, x: translateX, y: translateY} = parsedTransform;\n\n  const x = rect.left - translateX - (1 - scaleX) * parseFloat(transformOrigin);\n  const y =\n    rect.top -\n    translateY -\n    (1 - scaleY) *\n      parseFloat(transformOrigin.slice(transformOrigin.indexOf(' ') + 1));\n  const w = scaleX ? rect.width / scaleX : rect.width;\n  const h = scaleY ? rect.height / scaleY : rect.height;\n\n  return {\n    width: w,\n    height: h,\n    top: y,\n    right: x + w,\n    bottom: y + h,\n    left: x,\n  };\n}\n","import {\n  getWindow,\n  isDocument,\n  isHTMLElement,\n  isSVGElement,\n} from '@dnd-kit/utilities';\n\nimport {isFixed} from './isFixed';\nimport {isScrollable} from './isScrollable';\n\nexport function getScrollableAncestors(\n  element: Node | null,\n  limit?: number\n): Element[] {\n  const scrollParents: Element[] = [];\n\n  function findScrollableAncestors(node: Node | null): Element[] {\n    if (limit != null && scrollParents.length >= limit) {\n      return scrollParents;\n    }\n\n    if (!node) {\n      return scrollParents;\n    }\n\n    if (\n      isDocument(node) &&\n      node.scrollingElement != null &&\n      !scrollParents.includes(node.scrollingElement)\n    ) {\n      scrollParents.push(node.scrollingElement);\n\n      return scrollParents;\n    }\n\n    if (!isHTMLElement(node) || isSVGElement(node)) {\n      return scrollParents;\n    }\n\n    if (scrollParents.includes(node)) {\n      return scrollParents;\n    }\n\n    const computedStyle = getWindow(element).getComputedStyle(node);\n\n    if (node !== element) {\n      if (isScrollable(node, computedStyle)) {\n        scrollParents.push(node);\n      }\n    }\n\n    if (isFixed(node, computedStyle)) {\n      return scrollParents;\n    }\n\n    return findScrollableAncestors(node.parentNode);\n  }\n\n  if (!element) {\n    return scrollParents;\n  }\n\n  return findScrollableAncestors(element);\n}\n\nexport function getFirstScrollableAncestor(node: Node | null): Element | null {\n  const [firstScrollableAncestor] = getScrollableAncestors(node, 1);\n\n  return firstScrollableAncestor ?? null;\n}\n","import {getWindow} from '@dnd-kit/utilities';\n\nexport function isScrollable(\n  element: HTMLElement,\n  computedStyle: CSSStyleDeclaration = getWindow(element).getComputedStyle(\n    element\n  )\n): boolean {\n  const overflowRegex = /(auto|scroll|overlay)/;\n  const properties = ['overflow', 'overflowX', 'overflowY'];\n\n  return properties.some((property) => {\n    const value = computedStyle[property as keyof CSSStyleDeclaration];\n\n    return typeof value === 'string' ? overflowRegex.test(value) : false;\n  });\n}\n","import {getWindow} from '@dnd-kit/utilities';\n\nexport function isFixed(\n  node: HTMLElement,\n  computedStyle: CSSStyleDeclaration = getWindow(node).getComputedStyle(node)\n): boolean {\n  return computedStyle.position === 'fixed';\n}\n","import {\n  canUseDOM,\n  isHTMLElement,\n  isDocument,\n  getOwnerDocument,\n  isNode,\n  isWindow,\n} from '@dnd-kit/utilities';\n\nexport function getScrollableElement(element: EventTarget | null) {\n  if (!canUseDOM || !element) {\n    return null;\n  }\n\n  if (isWindow(element)) {\n    return element;\n  }\n\n  if (!isNode(element)) {\n    return null;\n  }\n\n  if (\n    isDocument(element) ||\n    element === getOwnerDocument(element).scrollingElement\n  ) {\n    return window;\n  }\n\n  if (isHTMLElement(element)) {\n    return element;\n  }\n\n  return null;\n}\n","import {isWindow} from '@dnd-kit/utilities';\n\nimport type {Coordinates} from '../../types';\n\nexport function getScrollXCoordinate(element: Element | typeof window): number {\n  if (isWindow(element)) {\n    return element.scrollX;\n  }\n\n  return element.scrollLeft;\n}\n\nexport function getScrollYCoordinate(element: Element | typeof window): number {\n  if (isWindow(element)) {\n    return element.scrollY;\n  }\n\n  return element.scrollTop;\n}\n\nexport function getScrollCoordinates(\n  element: Element | typeof window\n): Coordinates {\n  return {\n    x: getScrollXCoordinate(element),\n    y: getScrollYCoordinate(element),\n  };\n}\n","export enum Direction {\n  Forward = 1,\n  Backward = -1,\n}\n","import {canUseDOM} from '@dnd-kit/utilities';\n\nexport function isDocumentScrollingElement(element: Element | null) {\n  if (!canUseDOM || !element) {\n    return false;\n  }\n\n  return element === document.scrollingElement;\n}\n","import {isDocumentScrollingElement} from './documentScrollingElement';\n\nexport function getScrollPosition(scrollingContainer: Element) {\n  const minScroll = {\n    x: 0,\n    y: 0,\n  };\n  const dimensions = isDocumentScrollingElement(scrollingContainer)\n    ? {\n        height: window.innerHeight,\n        width: window.innerWidth,\n      }\n    : {\n        height: scrollingContainer.clientHeight,\n        width: scrollingContainer.clientWidth,\n      };\n  const maxScroll = {\n    x: scrollingContainer.scrollWidth - dimensions.width,\n    y: scrollingContainer.scrollHeight - dimensions.height,\n  };\n\n  const isTop = scrollingContainer.scrollTop <= minScroll.y;\n  const isLeft = scrollingContainer.scrollLeft <= minScroll.x;\n  const isBottom = scrollingContainer.scrollTop >= maxScroll.y;\n  const isRight = scrollingContainer.scrollLeft >= maxScroll.x;\n\n  return {\n    isTop,\n    isLeft,\n    isBottom,\n    isRight,\n    maxScroll,\n    minScroll,\n  };\n}\n","import {Direction, ClientRect} from '../../types';\nimport {getScrollPosition} from './getScrollPosition';\n\ninterface PositionalCoordinates\n  extends Pick<ClientRect, 'top' | 'left' | 'right' | 'bottom'> {}\n\nconst defaultThreshold = {\n  x: 0.2,\n  y: 0.2,\n};\n\nexport function getScrollDirectionAndSpeed(\n  scrollContainer: Element,\n  scrollContainerRect: ClientRect,\n  {top, left, right, bottom}: PositionalCoordinates,\n  acceleration = 10,\n  thresholdPercentage = defaultThreshold\n) {\n  const {isTop, isBottom, isLeft, isRight} = getScrollPosition(scrollContainer);\n\n  const direction = {\n    x: 0,\n    y: 0,\n  };\n  const speed = {\n    x: 0,\n    y: 0,\n  };\n  const threshold = {\n    height: scrollContainerRect.height * thresholdPercentage.y,\n    width: scrollContainerRect.width * thresholdPercentage.x,\n  };\n\n  if (!isTop && top <= scrollContainerRect.top + threshold.height) {\n    // Scroll Up\n    direction.y = Direction.Backward;\n    speed.y =\n      acceleration *\n      Math.abs(\n        (scrollContainerRect.top + threshold.height - top) / threshold.height\n      );\n  } else if (\n    !isBottom &&\n    bottom >= scrollContainerRect.bottom - threshold.height\n  ) {\n    // Scroll Down\n    direction.y = Direction.Forward;\n    speed.y =\n      acceleration *\n      Math.abs(\n        (scrollContainerRect.bottom - threshold.height - bottom) /\n          threshold.height\n      );\n  }\n\n  if (!isRight && right >= scrollContainerRect.right - threshold.width) {\n    // Scroll Right\n    direction.x = Direction.Forward;\n    speed.x =\n      acceleration *\n      Math.abs(\n        (scrollContainerRect.right - threshold.width - right) / threshold.width\n      );\n  } else if (!isLeft && left <= scrollContainerRect.left + threshold.width) {\n    // Scroll Left\n    direction.x = Direction.Backward;\n    speed.x =\n      acceleration *\n      Math.abs(\n        (scrollContainerRect.left + threshold.width - left) / threshold.width\n      );\n  }\n\n  return {\n    direction,\n    speed,\n  };\n}\n","export function getScrollElementRect(element: Element) {\n  if (element === document.scrollingElement) {\n    const {innerWidth, innerHeight} = window;\n\n    return {\n      top: 0,\n      left: 0,\n      right: innerWidth,\n      bottom: innerHeight,\n      width: innerWidth,\n      height: innerHeight,\n    };\n  }\n\n  const {top, left, right, bottom} = element.getBoundingClientRect();\n\n  return {\n    top,\n    left,\n    right,\n    bottom,\n    width: element.clientWidth,\n    height: element.clientHeight,\n  };\n}\n","import {add} from '@dnd-kit/utilities';\n\nimport type {Coordinates} from '../../types';\nimport {\n  getScrollCoordinates,\n  getScrollXCoordinate,\n  getScrollYCoordinate,\n} from './getScrollCoordinates';\nimport {defaultCoordinates} from '../coordinates';\n\nexport function getScrollOffsets(scrollableAncestors: Element[]): Coordinates {\n  return scrollableAncestors.reduce<Coordinates>((acc, node) => {\n    return add(acc, getScrollCoordinates(node));\n  }, defaultCoordinates);\n}\n\nexport function getScrollXOffset(scrollableAncestors: Element[]): number {\n  return scrollableAncestors.reduce<number>((acc, node) => {\n    return acc + getScrollXCoordinate(node);\n  }, 0);\n}\n\nexport function getScrollYOffset(scrollableAncestors: Element[]): number {\n  return scrollableAncestors.reduce<number>((acc, node) => {\n    return acc + getScrollYCoordinate(node);\n  }, 0);\n}\n","import type {ClientRect} from '../../types';\nimport {getClientRect} from '../rect/getRect';\nimport {getFirstScrollableAncestor} from './getScrollableAncestors';\n\nexport function scrollIntoViewIfNeeded(\n  element: HTMLElement | null | undefined,\n  measure: (node: HTMLElement) => ClientRect = getClientRect\n) {\n  if (!element) {\n    return;\n  }\n\n  const {top, left, bottom, right} = measure(element);\n  const firstScrollableAncestor = getFirstScrollableAncestor(element);\n\n  if (!firstScrollableAncestor) {\n    return;\n  }\n\n  if (\n    bottom <= 0 ||\n    right <= 0 ||\n    top >= window.innerHeight ||\n    left >= window.innerWidth\n  ) {\n    element.scrollIntoView({\n      block: 'center',\n      inline: 'center',\n    });\n  }\n}\n","import type {ClientRect} from '../../types/rect';\nimport {\n  getScrollableAncestors,\n  getScrollOffsets,\n  getScrollXOffset,\n  getScrollYOffset,\n} from '../scroll';\n\nconst properties = [\n  ['x', ['left', 'right'], getScrollXOffset],\n  ['y', ['top', 'bottom'], getScrollYOffset],\n] as const;\n\nexport class Rect {\n  constructor(rect: ClientRect, element: Element) {\n    const scrollableAncestors = getScrollableAncestors(element);\n    const scrollOffsets = getScrollOffsets(scrollableAncestors);\n\n    this.rect = {...rect};\n    this.width = rect.width;\n    this.height = rect.height;\n\n    for (const [axis, keys, getScrollOffset] of properties) {\n      for (const key of keys) {\n        Object.defineProperty(this, key, {\n          get: () => {\n            const currentOffsets = getScrollOffset(scrollableAncestors);\n            const scrollOffsetsDeltla = scrollOffsets[axis] - currentOffsets;\n\n            return this.rect[key] + scrollOffsetsDeltla;\n          },\n          enumerable: true,\n        });\n      }\n    }\n\n    Object.defineProperty(this, 'rect', {enumerable: false});\n  }\n\n  private rect: ClientRect;\n\n  public width: number;\n\n  public height: number;\n\n  // The below properties are set by the `Object.defineProperty` calls in the constructor\n  // @ts-ignore\n  public top: number;\n  // @ts-ignore\n  public bottom: number;\n  // @ts-ignore\n  public right: number;\n  // @ts-ignore\n  public left: number;\n}\n","export class Listeners {\n  private listeners: [\n    string,\n    EventListenerOrEventListenerObject,\n    AddEventListenerOptions | boolean | undefined\n  ][] = [];\n\n  constructor(private target: EventTarget | null) {}\n\n  public add<T extends Event>(\n    eventName: string,\n    handler: (event: T) => void,\n    options?: AddEventListenerOptions | boolean\n  ) {\n    this.target?.addEventListener(eventName, handler as EventListener, options);\n    this.listeners.push([eventName, handler as EventListener, options]);\n  }\n\n  public removeAll = () => {\n    this.listeners.forEach((listener) =>\n      this.target?.removeEventListener(...listener)\n    );\n  };\n}\n","import type {Coordinates, DistanceMeasurement} from '../../types';\n\nexport function hasExceededDistance(\n  delta: Coordinates,\n  measurement: DistanceMeasurement\n): boolean {\n  const dx = Math.abs(delta.x);\n  const dy = Math.abs(delta.y);\n\n  if (typeof measurement === 'number') {\n    return Math.sqrt(dx ** 2 + dy ** 2) > measurement;\n  }\n\n  if ('x' in measurement && 'y' in measurement) {\n    return dx > measurement.x && dy > measurement.y;\n  }\n\n  if ('x' in measurement) {\n    return dx > measurement.x;\n  }\n\n  if ('y' in measurement) {\n    return dy > measurement.y;\n  }\n\n  return false;\n}\n","export enum EventName {\n  Click = 'click',\n  DragStart = 'dragstart',\n  Keydown = 'keydown',\n  ContextMenu = 'contextmenu',\n  Resize = 'resize',\n  SelectionChange = 'selectionchange',\n  VisibilityChange = 'visibilitychange',\n}\n\nexport function preventDefault(event: Event) {\n  event.preventDefault();\n}\n\nexport function stopPropagation(event: Event) {\n  event.stopPropagation();\n}\n","import type {Coordinates, UniqueIdentifier} from '../../types';\nimport type {SensorContext} from '../types';\n\nexport enum KeyboardCode {\n  Space = 'Space',\n  Down = 'ArrowDown',\n  Right = 'ArrowRight',\n  Left = 'ArrowLeft',\n  Up = 'ArrowUp',\n  Esc = 'Escape',\n  Enter = 'Enter',\n  Tab = 'Tab',\n}\n\nexport type KeyboardCodes = {\n  start: KeyboardEvent['code'][];\n  cancel: KeyboardEvent['code'][];\n  end: KeyboardEvent['code'][];\n};\n\nexport type KeyboardCoordinateGetter = (\n  event: KeyboardEvent,\n  args: {\n    active: UniqueIdentifier;\n    currentCoordinates: Coordinates;\n    context: SensorContext;\n  }\n) => Coordinates | void;\n","import {KeyboardCoordinateGetter, KeyboardCode, KeyboardCodes} from './types';\n\nexport const defaultKeyboardCodes: KeyboardCodes = {\n  start: [KeyboardCode.Space, KeyboardCode.Enter],\n  cancel: [KeyboardCode.Esc],\n  end: [KeyboardCode.Space, KeyboardCode.Enter, KeyboardCode.Tab],\n};\n\nexport const defaultKeyboardCoordinateGetter: KeyboardCoordinateGetter = (\n  event,\n  {currentCoordinates}\n) => {\n  switch (event.code) {\n    case KeyboardCode.Right:\n      return {\n        ...currentCoordinates,\n        x: currentCoordinates.x + 25,\n      };\n    case KeyboardCode.Left:\n      return {\n        ...currentCoordinates,\n        x: currentCoordinates.x - 25,\n      };\n    case KeyboardCode.Down:\n      return {\n        ...currentCoordinates,\n        y: currentCoordinates.y + 25,\n      };\n    case KeyboardCode.Up:\n      return {\n        ...currentCoordinates,\n        y: currentCoordinates.y - 25,\n      };\n  }\n\n  return undefined;\n};\n","import {\n  add as getAdjustedCoordinates,\n  subtract as getCoordinatesDelta,\n  getOwnerDocument,\n  getWindow,\n  isKeyboardEvent,\n} from '@dnd-kit/utilities';\n\nimport type {Coordinates} from '../../types';\nimport {\n  defaultCoordinates,\n  getScrollPosition,\n  getScrollElementRect,\n} from '../../utilities';\nimport {scrollIntoViewIfNeeded} from '../../utilities/scroll';\nimport {EventName} from '../events';\nimport {Listeners} from '../utilities';\nimport type {\n  Activators,\n  SensorInstance,\n  SensorProps,\n  SensorOptions,\n} from '../types';\n\nimport {KeyboardCoordinateGetter, KeyboardCode, KeyboardCodes} from './types';\nimport {\n  defaultKeyboardCodes,\n  defaultKeyboardCoordinateGetter,\n} from './defaults';\n\nexport interface KeyboardSensorOptions extends SensorOptions {\n  keyboardCodes?: KeyboardCodes;\n  coordinateGetter?: KeyboardCoordinateGetter;\n  scrollBehavior?: ScrollBehavior;\n  onActivation?({event}: {event: KeyboardEvent}): void;\n}\n\nexport type KeyboardSensorProps = SensorProps<KeyboardSensorOptions>;\n\nexport class KeyboardSensor implements SensorInstance {\n  public autoScrollEnabled = false;\n  private referenceCoordinates: Coordinates | undefined;\n  private listeners: Listeners;\n  private windowListeners: Listeners;\n\n  constructor(private props: KeyboardSensorProps) {\n    const {\n      event: {target},\n    } = props;\n\n    this.props = props;\n    this.listeners = new Listeners(getOwnerDocument(target));\n    this.windowListeners = new Listeners(getWindow(target));\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.handleCancel = this.handleCancel.bind(this);\n\n    this.attach();\n  }\n\n  private attach() {\n    this.handleStart();\n\n    this.windowListeners.add(EventName.Resize, this.handleCancel);\n    this.windowListeners.add(EventName.VisibilityChange, this.handleCancel);\n\n    setTimeout(() => this.listeners.add(EventName.Keydown, this.handleKeyDown));\n  }\n\n  private handleStart() {\n    const {activeNode, onStart} = this.props;\n    const node = activeNode.node.current;\n\n    if (node) {\n      scrollIntoViewIfNeeded(node);\n    }\n\n    onStart(defaultCoordinates);\n  }\n\n  private handleKeyDown(event: Event) {\n    if (isKeyboardEvent(event)) {\n      const {active, context, options} = this.props;\n      const {\n        keyboardCodes = defaultKeyboardCodes,\n        coordinateGetter = defaultKeyboardCoordinateGetter,\n        scrollBehavior = 'smooth',\n      } = options;\n      const {code} = event;\n\n      if (keyboardCodes.end.includes(code)) {\n        this.handleEnd(event);\n        return;\n      }\n\n      if (keyboardCodes.cancel.includes(code)) {\n        this.handleCancel(event);\n        return;\n      }\n\n      const {collisionRect} = context.current;\n      const currentCoordinates = collisionRect\n        ? {x: collisionRect.left, y: collisionRect.top}\n        : defaultCoordinates;\n\n      if (!this.referenceCoordinates) {\n        this.referenceCoordinates = currentCoordinates;\n      }\n\n      const newCoordinates = coordinateGetter(event, {\n        active,\n        context: context.current,\n        currentCoordinates,\n      });\n\n      if (newCoordinates) {\n        const coordinatesDelta = getCoordinatesDelta(\n          newCoordinates,\n          currentCoordinates\n        );\n        const scrollDelta = {\n          x: 0,\n          y: 0,\n        };\n        const {scrollableAncestors} = context.current;\n\n        for (const scrollContainer of scrollableAncestors) {\n          const direction = event.code;\n          const {isTop, isRight, isLeft, isBottom, maxScroll, minScroll} =\n            getScrollPosition(scrollContainer);\n          const scrollElementRect = getScrollElementRect(scrollContainer);\n\n          const clampedCoordinates = {\n            x: Math.min(\n              direction === KeyboardCode.Right\n                ? scrollElementRect.right - scrollElementRect.width / 2\n                : scrollElementRect.right,\n              Math.max(\n                direction === KeyboardCode.Right\n                  ? scrollElementRect.left\n                  : scrollElementRect.left + scrollElementRect.width / 2,\n                newCoordinates.x\n              )\n            ),\n            y: Math.min(\n              direction === KeyboardCode.Down\n                ? scrollElementRect.bottom - scrollElementRect.height / 2\n                : scrollElementRect.bottom,\n              Math.max(\n                direction === KeyboardCode.Down\n                  ? scrollElementRect.top\n                  : scrollElementRect.top + scrollElementRect.height / 2,\n                newCoordinates.y\n              )\n            ),\n          };\n\n          const canScrollX =\n            (direction === KeyboardCode.Right && !isRight) ||\n            (direction === KeyboardCode.Left && !isLeft);\n          const canScrollY =\n            (direction === KeyboardCode.Down && !isBottom) ||\n            (direction === KeyboardCode.Up && !isTop);\n\n          if (canScrollX && clampedCoordinates.x !== newCoordinates.x) {\n            const newScrollCoordinates =\n              scrollContainer.scrollLeft + coordinatesDelta.x;\n            const canScrollToNewCoordinates =\n              (direction === KeyboardCode.Right &&\n                newScrollCoordinates <= maxScroll.x) ||\n              (direction === KeyboardCode.Left &&\n                newScrollCoordinates >= minScroll.x);\n\n            if (canScrollToNewCoordinates && !coordinatesDelta.y) {\n              // We don't need to update coordinates, the scroll adjustment alone will trigger\n              // logic to auto-detect the new container we are over\n              scrollContainer.scrollTo({\n                left: newScrollCoordinates,\n                behavior: scrollBehavior,\n              });\n              return;\n            }\n\n            if (canScrollToNewCoordinates) {\n              scrollDelta.x = scrollContainer.scrollLeft - newScrollCoordinates;\n            } else {\n              scrollDelta.x =\n                direction === KeyboardCode.Right\n                  ? scrollContainer.scrollLeft - maxScroll.x\n                  : scrollContainer.scrollLeft - minScroll.x;\n            }\n\n            if (scrollDelta.x) {\n              scrollContainer.scrollBy({\n                left: -scrollDelta.x,\n                behavior: scrollBehavior,\n              });\n            }\n            break;\n          } else if (canScrollY && clampedCoordinates.y !== newCoordinates.y) {\n            const newScrollCoordinates =\n              scrollContainer.scrollTop + coordinatesDelta.y;\n            const canScrollToNewCoordinates =\n              (direction === KeyboardCode.Down &&\n                newScrollCoordinates <= maxScroll.y) ||\n              (direction === KeyboardCode.Up &&\n                newScrollCoordinates >= minScroll.y);\n\n            if (canScrollToNewCoordinates && !coordinatesDelta.x) {\n              // We don't need to update coordinates, the scroll adjustment alone will trigger\n              // logic to auto-detect the new container we are over\n              scrollContainer.scrollTo({\n                top: newScrollCoordinates,\n                behavior: scrollBehavior,\n              });\n              return;\n            }\n\n            if (canScrollToNewCoordinates) {\n              scrollDelta.y = scrollContainer.scrollTop - newScrollCoordinates;\n            } else {\n              scrollDelta.y =\n                direction === KeyboardCode.Down\n                  ? scrollContainer.scrollTop - maxScroll.y\n                  : scrollContainer.scrollTop - minScroll.y;\n            }\n\n            if (scrollDelta.y) {\n              scrollContainer.scrollBy({\n                top: -scrollDelta.y,\n                behavior: scrollBehavior,\n              });\n            }\n\n            break;\n          }\n        }\n\n        this.handleMove(\n          event,\n          getAdjustedCoordinates(\n            getCoordinatesDelta(newCoordinates, this.referenceCoordinates),\n            scrollDelta\n          )\n        );\n      }\n    }\n  }\n\n  private handleMove(event: Event, coordinates: Coordinates) {\n    const {onMove} = this.props;\n\n    event.preventDefault();\n    onMove(coordinates);\n  }\n\n  private handleEnd(event: Event) {\n    const {onEnd} = this.props;\n\n    event.preventDefault();\n    this.detach();\n    onEnd();\n  }\n\n  private handleCancel(event: Event) {\n    const {onCancel} = this.props;\n\n    event.preventDefault();\n    this.detach();\n    onCancel();\n  }\n\n  private detach() {\n    this.listeners.removeAll();\n    this.windowListeners.removeAll();\n  }\n\n  static activators: Activators<KeyboardSensorOptions> = [\n    {\n      eventName: 'onKeyDown' as const,\n      handler: (\n        event: React.KeyboardEvent,\n        {keyboardCodes = defaultKeyboardCodes, onActivation},\n        {active}\n      ) => {\n        const {code} = event.nativeEvent;\n\n        if (keyboardCodes.start.includes(code)) {\n          const activator = active.activatorNode.current;\n\n          if (activator && event.target !== activator) {\n            return false;\n          }\n\n          event.preventDefault();\n\n          onActivation?.({event: event.nativeEvent});\n\n          return true;\n        }\n\n        return false;\n      },\n    },\n  ];\n}\n","import {\n  subtract as getCoordinatesDelta,\n  getEventCoordinates,\n  getOwnerDocument,\n  getWindow,\n} from '@dnd-kit/utilities';\n\nimport {defaultCoordinates} from '../../utilities';\nimport {\n  getEventListenerTarget,\n  hasExceededDistance,\n  Listeners,\n} from '../utilities';\nimport {EventName, preventDefault, stopPropagation} from '../events';\nimport {KeyboardCode} from '../keyboard';\nimport type {SensorInstance, SensorProps, SensorOptions} from '../types';\nimport type {Coordinates, DistanceMeasurement} from '../../types';\n\ninterface DistanceConstraint {\n  distance: DistanceMeasurement;\n  tolerance?: DistanceMeasurement;\n}\n\ninterface DelayConstraint {\n  delay: number;\n  tolerance: DistanceMeasurement;\n}\n\ninterface EventDescriptor {\n  name: keyof DocumentEventMap;\n  passive?: boolean;\n}\n\nexport interface PointerEventHandlers {\n  cancel?: EventDescriptor;\n  move: EventDescriptor;\n  end: EventDescriptor;\n}\n\nexport type PointerActivationConstraint =\n  | DelayConstraint\n  | DistanceConstraint\n  | (DelayConstraint & DistanceConstraint);\n\nfunction isDistanceConstraint(\n  constraint: PointerActivationConstraint\n): constraint is PointerActivationConstraint & DistanceConstraint {\n  return Boolean(constraint && 'distance' in constraint);\n}\n\nfunction isDelayConstraint(\n  constraint: PointerActivationConstraint\n): constraint is DelayConstraint {\n  return Boolean(constraint && 'delay' in constraint);\n}\n\nexport interface AbstractPointerSensorOptions extends SensorOptions {\n  activationConstraint?: PointerActivationConstraint;\n  bypassActivationConstraint?(\n    props: Pick<AbstractPointerSensorProps, 'activeNode' | 'event' | 'options'>\n  ): boolean;\n  onActivation?({event}: {event: Event}): void;\n}\n\nexport type AbstractPointerSensorProps =\n  SensorProps<AbstractPointerSensorOptions>;\n\nexport class AbstractPointerSensor implements SensorInstance {\n  public autoScrollEnabled = true;\n  private document: Document;\n  private activated: boolean = false;\n  private initialCoordinates: Coordinates;\n  private timeoutId: NodeJS.Timeout | null = null;\n  private listeners: Listeners;\n  private documentListeners: Listeners;\n  private windowListeners: Listeners;\n\n  constructor(\n    private props: AbstractPointerSensorProps,\n    private events: PointerEventHandlers,\n    listenerTarget = getEventListenerTarget(props.event.target)\n  ) {\n    const {event} = props;\n    const {target} = event;\n\n    this.props = props;\n    this.events = events;\n    this.document = getOwnerDocument(target);\n    this.documentListeners = new Listeners(this.document);\n    this.listeners = new Listeners(listenerTarget);\n    this.windowListeners = new Listeners(getWindow(target));\n    this.initialCoordinates = getEventCoordinates(event) ?? defaultCoordinates;\n    this.handleStart = this.handleStart.bind(this);\n    this.handleMove = this.handleMove.bind(this);\n    this.handleEnd = this.handleEnd.bind(this);\n    this.handleCancel = this.handleCancel.bind(this);\n    this.handleKeydown = this.handleKeydown.bind(this);\n    this.removeTextSelection = this.removeTextSelection.bind(this);\n\n    this.attach();\n  }\n\n  private attach() {\n    const {\n      events,\n      props: {\n        options: {activationConstraint, bypassActivationConstraint},\n      },\n    } = this;\n\n    this.listeners.add(events.move.name, this.handleMove, {passive: false});\n    this.listeners.add(events.end.name, this.handleEnd);\n\n    if (events.cancel) {\n      this.listeners.add(events.cancel.name, this.handleCancel);\n    }\n\n    this.windowListeners.add(EventName.Resize, this.handleCancel);\n    this.windowListeners.add(EventName.DragStart, preventDefault);\n    this.windowListeners.add(EventName.VisibilityChange, this.handleCancel);\n    this.windowListeners.add(EventName.ContextMenu, preventDefault);\n    this.documentListeners.add(EventName.Keydown, this.handleKeydown);\n\n    if (activationConstraint) {\n      if (\n        bypassActivationConstraint?.({\n          event: this.props.event,\n          activeNode: this.props.activeNode,\n          options: this.props.options,\n        })\n      ) {\n        return this.handleStart();\n      }\n\n      if (isDelayConstraint(activationConstraint)) {\n        this.timeoutId = setTimeout(\n          this.handleStart,\n          activationConstraint.delay\n        );\n        this.handlePending(activationConstraint);\n        return;\n      }\n\n      if (isDistanceConstraint(activationConstraint)) {\n        this.handlePending(activationConstraint);\n        return;\n      }\n    }\n\n    this.handleStart();\n  }\n\n  private detach() {\n    this.listeners.removeAll();\n    this.windowListeners.removeAll();\n\n    // Wait until the next event loop before removing document listeners\n    // This is necessary because we listen for `click` and `selection` events on the document\n    setTimeout(this.documentListeners.removeAll, 50);\n\n    if (this.timeoutId !== null) {\n      clearTimeout(this.timeoutId);\n      this.timeoutId = null;\n    }\n  }\n\n  private handlePending(\n    constraint: PointerActivationConstraint,\n    offset?: Coordinates | undefined\n  ): void {\n    const {active, onPending} = this.props;\n    onPending(active, constraint, this.initialCoordinates, offset);\n  }\n\n  private handleStart() {\n    const {initialCoordinates} = this;\n    const {onStart} = this.props;\n\n    if (initialCoordinates) {\n      this.activated = true;\n\n      // Stop propagation of click events once activation constraints are met\n      this.documentListeners.add(EventName.Click, stopPropagation, {\n        capture: true,\n      });\n\n      // Remove any text selection from the document\n      this.removeTextSelection();\n\n      // Prevent further text selection while dragging\n      this.documentListeners.add(\n        EventName.SelectionChange,\n        this.removeTextSelection\n      );\n\n      onStart(initialCoordinates);\n    }\n  }\n\n  private handleMove(event: Event) {\n    const {activated, initialCoordinates, props} = this;\n    const {\n      onMove,\n      options: {activationConstraint},\n    } = props;\n\n    if (!initialCoordinates) {\n      return;\n    }\n\n    const coordinates = getEventCoordinates(event) ?? defaultCoordinates;\n    const delta = getCoordinatesDelta(initialCoordinates, coordinates);\n\n    // Constraint validation\n    if (!activated && activationConstraint) {\n      if (isDistanceConstraint(activationConstraint)) {\n        if (\n          activationConstraint.tolerance != null &&\n          hasExceededDistance(delta, activationConstraint.tolerance)\n        ) {\n          return this.handleCancel();\n        }\n\n        if (hasExceededDistance(delta, activationConstraint.distance)) {\n          return this.handleStart();\n        }\n      }\n\n      if (isDelayConstraint(activationConstraint)) {\n        if (hasExceededDistance(delta, activationConstraint.tolerance)) {\n          return this.handleCancel();\n        }\n      }\n\n      this.handlePending(activationConstraint, delta);\n      return;\n    }\n\n    if (event.cancelable) {\n      event.preventDefault();\n    }\n\n    onMove(coordinates);\n  }\n\n  private handleEnd() {\n    const {onAbort, onEnd} = this.props;\n\n    this.detach();\n    if (!this.activated) {\n      onAbort(this.props.active);\n    }\n    onEnd();\n  }\n\n  private handleCancel() {\n    const {onAbort, onCancel} = this.props;\n\n    this.detach();\n    if (!this.activated) {\n      onAbort(this.props.active);\n    }\n    onCancel();\n  }\n\n  private handleKeydown(event: KeyboardEvent) {\n    if (event.code === KeyboardCode.Esc) {\n      this.handleCancel();\n    }\n  }\n\n  private removeTextSelection() {\n    this.document.getSelection()?.removeAllRanges();\n  }\n}\n","import {getOwnerDocument, getWindow} from '@dnd-kit/utilities';\n\nexport function getEventListenerTarget(\n  target: EventTarget | null\n): EventTarget | Document {\n  // If the `event.target` element is removed from the document events will still be targeted\n  // at it, and hence won't always bubble up to the window or document anymore.\n  // If there is any risk of an element being removed while it is being dragged,\n  // the best practice is to attach the event listeners directly to the target.\n  // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget\n\n  const {EventTarget} = getWindow(target);\n\n  return target instanceof EventTarget ? target : getOwnerDocument(target);\n}\n","import type {PointerEvent} from 'react';\nimport {getOwnerDocument} from '@dnd-kit/utilities';\n\nimport type {SensorProps} from '../types';\nimport {\n  AbstractPointerSensor,\n  AbstractPointerSensorOptions,\n  PointerEventHandlers,\n} from './AbstractPointerSensor';\n\nconst events: PointerEventHandlers = {\n  cancel: {name: 'pointercancel'},\n  move: {name: 'pointermove'},\n  end: {name: 'pointerup'},\n};\n\nexport interface PointerSensorOptions extends AbstractPointerSensorOptions {}\n\nexport type PointerSensorProps = SensorProps<PointerSensorOptions>;\n\nexport class PointerSensor extends AbstractPointerSensor {\n  constructor(props: PointerSensorProps) {\n    const {event} = props;\n    // Pointer events stop firing if the target is unmounted while dragging\n    // Therefore we attach listeners to the owner document instead\n    const listenerTarget = getOwnerDocument(event.target);\n\n    super(props, events, listenerTarget);\n  }\n\n  static activators = [\n    {\n      eventName: 'onPointerDown' as const,\n      handler: (\n        {nativeEvent: event}: PointerEvent,\n        {onActivation}: PointerSensorOptions\n      ) => {\n        if (!event.isPrimary || event.button !== 0) {\n          return false;\n        }\n\n        onActivation?.({event});\n\n        return true;\n      },\n    },\n  ];\n}\n","import type {MouseEvent} from 'react';\nimport {getOwnerDocument} from '@dnd-kit/utilities';\n\nimport type {SensorProps} from '../types';\nimport {\n  AbstractPointerSensor,\n  PointerEventHandlers,\n  AbstractPointerSensorOptions,\n} from '../pointer';\n\nconst events: PointerEventHandlers = {\n  move: {name: 'mousemove'},\n  end: {name: 'mouseup'},\n};\n\nenum MouseButton {\n  RightClick = 2,\n}\n\nexport interface MouseSensorOptions extends AbstractPointerSensorOptions {}\n\nexport type MouseSensorProps = SensorProps<MouseSensorOptions>;\n\nexport class MouseSensor extends AbstractPointerSensor {\n  constructor(props: MouseSensorProps) {\n    super(props, events, getOwnerDocument(props.event.target));\n  }\n\n  static activators = [\n    {\n      eventName: 'onMouseDown' as const,\n      handler: (\n        {nativeEvent: event}: MouseEvent,\n        {onActivation}: MouseSensorOptions\n      ) => {\n        if (event.button === MouseButton.RightClick) {\n          return false;\n        }\n\n        onActivation?.({event});\n\n        return true;\n      },\n    },\n  ];\n}\n","import type {TouchEvent} from 'react';\n\nimport {\n  AbstractPointerSensor,\n  PointerSensorProps,\n  PointerEventHandlers,\n  PointerSensorOptions,\n} from '../pointer';\nimport type {SensorProps} from '../types';\n\nconst events: PointerEventHandlers = {\n  cancel: {name: 'touchcancel'},\n  move: {name: 'touchmove'},\n  end: {name: 'touchend'},\n};\n\nexport interface TouchSensorOptions extends PointerSensorOptions {}\n\nexport type TouchSensorProps = SensorProps<TouchSensorOptions>;\n\nexport class TouchSensor extends AbstractPointerSensor {\n  constructor(props: PointerSensorProps) {\n    super(props, events);\n  }\n\n  static activators = [\n    {\n      eventName: 'onTouchStart' as const,\n      handler: (\n        {nativeEvent: event}: TouchEvent,\n        {onActivation}: TouchSensorOptions\n      ) => {\n        const {touches} = event;\n\n        if (touches.length > 1) {\n          return false;\n        }\n\n        onActivation?.({event});\n\n        return true;\n      },\n    },\n  ];\n\n  static setup() {\n    // Adding a non-capture and non-passive `touchmove` listener in order\n    // to force `event.preventDefault()` calls to work in dynamically added\n    // touchmove event handlers. This is required for iOS Safari.\n    window.addEventListener(events.move.name, noop, {\n      capture: false,\n      passive: false,\n    });\n\n    return function teardown() {\n      window.removeEventListener(events.move.name, noop);\n    };\n\n    // We create a new handler because the teardown function of another sensor\n    // could remove our event listener if we use a referentially equal listener.\n    function noop() {}\n  }\n}\n","import {useCallback, useEffect, useMemo, useRef} from 'react';\nimport {useInterval, useLazyMemo, usePrevious} from '@dnd-kit/utilities';\n\nimport {getScrollDirectionAndSpeed} from '../../utilities';\nimport {Direction} from '../../types';\nimport type {Coordinates, ClientRect} from '../../types';\n\nexport type ScrollAncestorSortingFn = (ancestors: Element[]) => Element[];\n\nexport enum AutoScrollActivator {\n  Pointer,\n  DraggableRect,\n}\n\nexport interface Options {\n  acceleration?: number;\n  activator?: AutoScrollActivator;\n  canScroll?: CanScroll;\n  enabled?: boolean;\n  interval?: number;\n  layoutShiftCompensation?:\n    | boolean\n    | {\n        x: boolean;\n        y: boolean;\n      };\n  order?: TraversalOrder;\n  threshold?: {\n    x: number;\n    y: number;\n  };\n}\n\ninterface Arguments extends Options {\n  draggingRect: ClientRect | null;\n  enabled: boolean;\n  pointerCoordinates: Coordinates | null;\n  scrollableAncestors: Element[];\n  scrollableAncestorRects: ClientRect[];\n  delta: Coordinates;\n}\n\nexport type CanScroll = (element: Element) => boolean;\n\nexport enum TraversalOrder {\n  TreeOrder,\n  ReversedTreeOrder,\n}\n\ninterface ScrollDirection {\n  x: 0 | Direction;\n  y: 0 | Direction;\n}\n\nexport function useAutoScroller({\n  acceleration,\n  activator = AutoScrollActivator.Pointer,\n  canScroll,\n  draggingRect,\n  enabled,\n  interval = 5,\n  order = TraversalOrder.TreeOrder,\n  pointerCoordinates,\n  scrollableAncestors,\n  scrollableAncestorRects,\n  delta,\n  threshold,\n}: Arguments) {\n  const scrollIntent = useScrollIntent({delta, disabled: !enabled});\n  const [setAutoScrollInterval, clearAutoScrollInterval] = useInterval();\n  const scrollSpeed = useRef<Coordinates>({x: 0, y: 0});\n  const scrollDirection = useRef<ScrollDirection>({x: 0, y: 0});\n  const rect = useMemo(() => {\n    switch (activator) {\n      case AutoScrollActivator.Pointer:\n        return pointerCoordinates\n          ? {\n              top: pointerCoordinates.y,\n              bottom: pointerCoordinates.y,\n              left: pointerCoordinates.x,\n              right: pointerCoordinates.x,\n            }\n          : null;\n      case AutoScrollActivator.DraggableRect:\n        return draggingRect;\n    }\n  }, [activator, draggingRect, pointerCoordinates]);\n  const scrollContainerRef = useRef<Element | null>(null);\n  const autoScroll = useCallback(() => {\n    const scrollContainer = scrollContainerRef.current;\n\n    if (!scrollContainer) {\n      return;\n    }\n\n    const scrollLeft = scrollSpeed.current.x * scrollDirection.current.x;\n    const scrollTop = scrollSpeed.current.y * scrollDirection.current.y;\n\n    scrollContainer.scrollBy(scrollLeft, scrollTop);\n  }, []);\n  const sortedScrollableAncestors = useMemo(\n    () =>\n      order === TraversalOrder.TreeOrder\n        ? [...scrollableAncestors].reverse()\n        : scrollableAncestors,\n    [order, scrollableAncestors]\n  );\n\n  useEffect(\n    () => {\n      if (!enabled || !scrollableAncestors.length || !rect) {\n        clearAutoScrollInterval();\n        return;\n      }\n\n      for (const scrollContainer of sortedScrollableAncestors) {\n        if (canScroll?.(scrollContainer) === false) {\n          continue;\n        }\n\n        const index = scrollableAncestors.indexOf(scrollContainer);\n        const scrollContainerRect = scrollableAncestorRects[index];\n\n        if (!scrollContainerRect) {\n          continue;\n        }\n\n        const {direction, speed} = getScrollDirectionAndSpeed(\n          scrollContainer,\n          scrollContainerRect,\n          rect,\n          acceleration,\n          threshold\n        );\n\n        for (const axis of ['x', 'y'] as const) {\n          if (!scrollIntent[axis][direction[axis] as Direction]) {\n            speed[axis] = 0;\n            direction[axis] = 0;\n          }\n        }\n\n        if (speed.x > 0 || speed.y > 0) {\n          clearAutoScrollInterval();\n\n          scrollContainerRef.current = scrollContainer;\n          setAutoScrollInterval(autoScroll, interval);\n\n          scrollSpeed.current = speed;\n          scrollDirection.current = direction;\n\n          return;\n        }\n      }\n\n      scrollSpeed.current = {x: 0, y: 0};\n      scrollDirection.current = {x: 0, y: 0};\n      clearAutoScrollInterval();\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      acceleration,\n      autoScroll,\n      canScroll,\n      clearAutoScrollInterval,\n      enabled,\n      interval,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      JSON.stringify(rect),\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      JSON.stringify(scrollIntent),\n      setAutoScrollInterval,\n      scrollableAncestors,\n      sortedScrollableAncestors,\n      scrollableAncestorRects,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      JSON.stringify(threshold),\n    ]\n  );\n}\n\ninterface ScrollIntent {\n  x: Record<Direction, boolean>;\n  y: Record<Direction, boolean>;\n}\n\nconst defaultScrollIntent: ScrollIntent = {\n  x: {[Direction.Backward]: false, [Direction.Forward]: false},\n  y: {[Direction.Backward]: false, [Direction.Forward]: false},\n};\n\nfunction useScrollIntent({\n  delta,\n  disabled,\n}: {\n  delta: Coordinates;\n  disabled: boolean;\n}): ScrollIntent {\n  const previousDelta = usePrevious(delta);\n\n  return useLazyMemo<ScrollIntent>(\n    (previousIntent) => {\n      if (disabled || !previousDelta || !previousIntent) {\n        // Reset scroll intent tracking when auto-scrolling is disabled\n        return defaultScrollIntent;\n      }\n\n      const direction = {\n        x: Math.sign(delta.x - previousDelta.x),\n        y: Math.sign(delta.y - previousDelta.y),\n      };\n\n      // Keep track of the user intent to scroll in each direction for both axis\n      return {\n        x: {\n          [Direction.Backward]:\n            previousIntent.x[Direction.Backward] || direction.x === -1,\n          [Direction.Forward]:\n            previousIntent.x[Direction.Forward] || direction.x === 1,\n        },\n        y: {\n          [Direction.Backward]:\n            previousIntent.y[Direction.Backward] || direction.y === -1,\n          [Direction.Forward]:\n            previousIntent.y[Direction.Forward] || direction.y === 1,\n        },\n      };\n    },\n    [disabled, delta, previousDelta]\n  );\n}\n","import {useCallback, useEffect, useRef, useState} from 'react';\nimport {useLatestValue, useLazyMemo} from '@dnd-kit/utilities';\n\nimport {Rect} from '../../utilities/rect';\nimport type {DroppableContainer, RectMap} from '../../store/types';\nimport type {ClientRect, UniqueIdentifier} from '../../types';\n\ninterface Arguments {\n  dragging: boolean;\n  dependencies: any[];\n  config: DroppableMeasuring;\n}\n\nexport enum MeasuringStrategy {\n  Always,\n  BeforeDragging,\n  WhileDragging,\n}\n\nexport enum MeasuringFrequency {\n  Optimized = 'optimized',\n}\n\ntype MeasuringFunction = (element: HTMLElement) => ClientRect;\n\nexport interface DroppableMeasuring {\n  measure: MeasuringFunction;\n  strategy: MeasuringStrategy;\n  frequency: MeasuringFrequency | number;\n}\n\nconst defaultValue: RectMap = new Map();\n\nexport function useDroppableMeasuring(\n  containers: DroppableContainer[],\n  {dragging, dependencies, config}: Arguments\n) {\n  const [queue, setQueue] = useState<UniqueIdentifier[] | null>(null);\n  const {frequency, measure, strategy} = config;\n  const containersRef = useRef(containers);\n  const disabled = isDisabled();\n  const disabledRef = useLatestValue(disabled);\n  const measureDroppableContainers = useCallback(\n    (ids: UniqueIdentifier[] = []) => {\n      if (disabledRef.current) {\n        return;\n      }\n\n      setQueue((value) => {\n        if (value === null) {\n          return ids;\n        }\n\n        return value.concat(ids.filter((id) => !value.includes(id)));\n      });\n    },\n    [disabledRef]\n  );\n  const timeoutId = useRef<NodeJS.Timeout | null>(null);\n  const droppableRects = useLazyMemo<RectMap>(\n    (previousValue) => {\n      if (disabled && !dragging) {\n        return defaultValue;\n      }\n\n      if (\n        !previousValue ||\n        previousValue === defaultValue ||\n        containersRef.current !== containers ||\n        queue != null\n      ) {\n        const map: RectMap = new Map();\n\n        for (let container of containers) {\n          if (!container) {\n            continue;\n          }\n\n          if (\n            queue &&\n            queue.length > 0 &&\n            !queue.includes(container.id) &&\n            container.rect.current\n          ) {\n            // This container does not need to be re-measured\n            map.set(container.id, container.rect.current);\n            continue;\n          }\n\n          const node = container.node.current;\n          const rect = node ? new Rect(measure(node), node) : null;\n\n          container.rect.current = rect;\n\n          if (rect) {\n            map.set(container.id, rect);\n          }\n        }\n\n        return map;\n      }\n\n      return previousValue;\n    },\n    [containers, queue, dragging, disabled, measure]\n  );\n\n  useEffect(() => {\n    containersRef.current = containers;\n  }, [containers]);\n\n  useEffect(\n    () => {\n      if (disabled) {\n        return;\n      }\n\n      measureDroppableContainers();\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [dragging, disabled]\n  );\n\n  useEffect(\n    () => {\n      if (queue && queue.length > 0) {\n        setQueue(null);\n      }\n    },\n    //eslint-disable-next-line react-hooks/exhaustive-deps\n    [JSON.stringify(queue)]\n  );\n\n  useEffect(\n    () => {\n      if (\n        disabled ||\n        typeof frequency !== 'number' ||\n        timeoutId.current !== null\n      ) {\n        return;\n      }\n\n      timeoutId.current = setTimeout(() => {\n        measureDroppableContainers();\n        timeoutId.current = null;\n      }, frequency);\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [frequency, disabled, measureDroppableContainers, ...dependencies]\n  );\n\n  return {\n    droppableRects,\n    measureDroppableContainers,\n    measuringScheduled: queue != null,\n  };\n\n  function isDisabled() {\n    switch (strategy) {\n      case MeasuringStrategy.Always:\n        return false;\n      case MeasuringStrategy.BeforeDragging:\n        return dragging;\n      default:\n        return !dragging;\n    }\n  }\n}\n","import {useLazyMemo} from '@dnd-kit/utilities';\n\ntype AnyFunction = (...args: any) => any;\n\nexport function useInitialValue<\n  T,\n  U extends AnyFunction | undefined = undefined\n>(\n  value: T | null,\n  computeFn?: U\n): U extends AnyFunction ? ReturnType<U> | null : T | null {\n  return useLazyMemo(\n    (previousValue) => {\n      if (!value) {\n        return null;\n      }\n\n      if (previousValue) {\n        return previousValue;\n      }\n\n      return typeof computeFn === 'function' ? computeFn(value) : value;\n    },\n    [computeFn, value]\n  );\n}\n","import {useEffect, useMemo} from 'react';\nimport {useEvent} from '@dnd-kit/utilities';\n\ninterface Arguments {\n  callback: ResizeObserverCallback;\n  disabled?: boolean;\n}\n\n/**\n * Returns a new ResizeObserver instance bound to the `onResize` callback.\n * If `ResizeObserver` is undefined in the execution environment, returns `undefined`.\n */\nexport function useResizeObserver({callback, disabled}: Arguments) {\n  const handleResize = useEvent(callback);\n  const resizeObserver = useMemo(\n    () => {\n      if (\n        disabled ||\n        typeof window === 'undefined' ||\n        typeof window.ResizeObserver === 'undefined'\n      ) {\n        return undefined;\n      }\n\n      const {ResizeObserver} = window;\n\n      return new ResizeObserver(handleResize);\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [disabled]\n  );\n\n  useEffect(() => {\n    return () => resizeObserver?.disconnect();\n  }, [resizeObserver]);\n\n  return resizeObserver;\n}\n","import {useState} from 'react';\nimport {useIsomorphicLayoutEffect} from '@dnd-kit/utilities';\n\nimport type {ClientRect} from '../../types';\nimport {getClientRect, Rect} from '../../utilities';\n\nimport {useMutationObserver} from './useMutationObserver';\nimport {useResizeObserver} from './useResizeObserver';\n\nfunction defaultMeasure(element: HTMLElement) {\n  return new Rect(getClientRect(element), element);\n}\n\nexport function useRect(\n  element: HTMLElement | null,\n  measure: (element: HTMLElement) => ClientRect = defaultMeasure,\n  fallbackRect?: ClientRect | null\n) {\n  const [rect, setRect] = useState<ClientRect | null>(null);\n\n  function measureRect() {\n    setRect((currentRect): ClientRect | null => {\n      if (!element) {\n        return null;\n      }\n  \n      if (element.isConnected === false) {\n        // Fall back to last rect we measured if the element is\n        // no longer connected to the DOM.\n        return currentRect ?? fallbackRect ?? null;\n      }\n  \n      const newRect = measure(element);\n  \n      if (JSON.stringify(currentRect) === JSON.stringify(newRect)) {\n        return currentRect;\n      }\n  \n      return newRect;\n    });\n  }\n  \n  const mutationObserver = useMutationObserver({\n    callback(records) {\n      if (!element) {\n        return;\n      }\n\n      for (const record of records) {\n        const {type, target} = record;\n\n        if (\n          type === 'childList' &&\n          target instanceof HTMLElement &&\n          target.contains(element)\n        ) {\n          measureRect();\n          break;\n        }\n      }\n    },\n  });\n  const resizeObserver = useResizeObserver({callback: measureRect});\n\n  useIsomorphicLayoutEffect(() => {\n    measureRect();\n\n    if (element) {\n      resizeObserver?.observe(element);\n      mutationObserver?.observe(document.body, {\n        childList: true,\n        subtree: true,\n      });\n    } else {\n      resizeObserver?.disconnect();\n      mutationObserver?.disconnect();\n    }\n  }, [element]);\n\n  return rect;\n}\n","import {useEffect, useMemo} from 'react';\nimport {useEvent} from '@dnd-kit/utilities';\n\ninterface Arguments {\n  callback: MutationCallback;\n  disabled?: boolean;\n}\n\n/**\n * Returns a new MutationObserver instance.\n * If `MutationObserver` is undefined in the execution environment, returns `undefined`.\n */\nexport function useMutationObserver({callback, disabled}: Arguments) {\n  const handleMutations = useEvent(callback);\n  const mutationObserver = useMemo(() => {\n    if (\n      disabled ||\n      typeof window === 'undefined' ||\n      typeof window.MutationObserver === 'undefined'\n    ) {\n      return undefined;\n    }\n\n    const {MutationObserver} = window;\n\n    return new MutationObserver(handleMutations);\n  }, [handleMutations, disabled]);\n\n  useEffect(() => {\n    return () => mutationObserver?.disconnect();\n  }, [mutationObserver]);\n\n  return mutationObserver;\n}\n","import {useEffect, useRef} from 'react';\nimport {useLazyMemo} from '@dnd-kit/utilities';\n\nimport {getScrollableAncestors} from '../../utilities';\n\nconst defaultValue: Element[] = [];\n\nexport function useScrollableAncestors(node: HTMLElement | null) {\n  const previousNode = useRef(node);\n\n  const ancestors = useLazyMemo<Element[]>(\n    (previousValue) => {\n      if (!node) {\n        return defaultValue;\n      }\n\n      if (\n        previousValue &&\n        previousValue !== defaultValue &&\n        node &&\n        previousNode.current &&\n        node.parentNode === previousNode.current.parentNode\n      ) {\n        return previousValue;\n      }\n\n      return getScrollableAncestors(node);\n    },\n    [node]\n  );\n\n  useEffect(() => {\n    previousNode.current = node;\n  }, [node]);\n\n  return ancestors;\n}\n","import {useEffect, useRef} from 'react';\nimport {Coordinates, subtract} from '@dnd-kit/utilities';\n\nimport {defaultCoordinates} from '../../utilities';\n\nexport function useScrollOffsetsDelta(\n  scrollOffsets: Coordinates,\n  dependencies: any[] = []\n) {\n  const initialScrollOffsets = useRef<Coordinates | null>(null);\n\n  useEffect(\n    () => {\n      initialScrollOffsets.current = null;\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    dependencies\n  );\n\n  useEffect(() => {\n    const hasScrollOffsets = scrollOffsets !== defaultCoordinates;\n\n    if (hasScrollOffsets && !initialScrollOffsets.current) {\n      initialScrollOffsets.current = scrollOffsets;\n    }\n\n    if (!hasScrollOffsets && initialScrollOffsets.current) {\n      initialScrollOffsets.current = null;\n    }\n  }, [scrollOffsets]);\n\n  return initialScrollOffsets.current\n    ? subtract(scrollOffsets, initialScrollOffsets.current)\n    : defaultCoordinates;\n}\n","import {useMemo} from 'react';\n\nimport {getWindowClientRect} from '../../utilities/rect';\n\nexport function useWindowRect(element: typeof window | null) {\n  return useMemo(() => (element ? getWindowClientRect(element) : null), [\n    element,\n  ]);\n}\n","import type {ClientRect} from '../../types';\n\nexport function getWindowClientRect(element: typeof window): ClientRect {\n  const width = element.innerWidth;\n  const height = element.innerHeight;\n\n  return {\n    top: 0,\n    left: 0,\n    right: width,\n    bottom: height,\n    width,\n    height,\n  };\n}\n","import {useState} from 'react';\nimport {getWindow, useIsomorphicLayoutEffect} from '@dnd-kit/utilities';\n\nimport type {ClientRect} from '../../types';\nimport {Rect, getClientRect} from '../../utilities/rect';\nimport {isDocumentScrollingElement} from '../../utilities';\n\nimport {useResizeObserver} from './useResizeObserver';\nimport {useWindowRect} from './useWindowRect';\n\nconst defaultValue: Rect[] = [];\n\nexport function useRects(\n  elements: Element[],\n  measure: (element: Element) => ClientRect = getClientRect\n): ClientRect[] {\n  const [firstElement] = elements;\n  const windowRect = useWindowRect(\n    firstElement ? getWindow(firstElement) : null\n  );\n  const [rects, setRects] = useState<ClientRect[]>(defaultValue);\n\n  function measureRects() {\n    setRects(() => {\n      if (!elements.length) {\n        return defaultValue;\n      }\n\n      return elements.map((element) =>\n        isDocumentScrollingElement(element)\n          ? (windowRect as ClientRect)\n          : new Rect(measure(element), element)\n      );\n    });\n  }\n\n  const resizeObserver = useResizeObserver({callback: measureRects});\n\n  useIsomorphicLayoutEffect(() => {\n    resizeObserver?.disconnect();\n    measureRects();\n    elements.forEach((element) => resizeObserver?.observe(element));\n  }, [elements]);\n\n  return rects;\n}\n","import {isHTMLElement} from '@dnd-kit/utilities';\n\nexport function getMeasurableNode(\n  node: HTMLElement | undefined | null\n): HTMLElement | null {\n  if (!node) {\n    return null;\n  }\n\n  if (node.children.length > 1) {\n    return node;\n  }\n  const firstChild = node.children[0];\n\n  return isHTMLElement(firstChild) ? firstChild : node;\n}\n","import type {DeepRequired} from '@dnd-kit/utilities';\n\nimport type {DataRef} from '../../store/types';\nimport {KeyboardSensor, PointerSensor} from '../../sensors';\nimport {MeasuringStrategy, MeasuringFrequency} from '../../hooks/utilities';\nimport {\n  getClientRect,\n  getTransformAgnosticClientRect,\n} from '../../utilities/rect';\n\nimport type {MeasuringConfiguration} from './types';\n\nexport const defaultSensors = [\n  {sensor: PointerSensor, options: {}},\n  {sensor: KeyboardSensor, options: {}},\n];\n\nexport const defaultData: DataRef = {current: {}};\n\nexport const defaultMeasuringConfiguration: DeepRequired<MeasuringConfiguration> = {\n  draggable: {\n    measure: getTransformAgnosticClientRect,\n  },\n  droppable: {\n    measure: getTransformAgnosticClientRect,\n    strategy: MeasuringStrategy.WhileDragging,\n    frequency: MeasuringFrequency.Optimized,\n  },\n  dragOverlay: {\n    measure: getClientRect,\n  },\n};\n","import type {UniqueIdentifier} from '../types';\nimport type {DroppableContainer} from './types';\n\ntype Identifier = UniqueIdentifier | null | undefined;\n\nexport class DroppableContainersMap extends Map<\n  UniqueIdentifier,\n  DroppableContainer\n> {\n  get(id: Identifier) {\n    return id != null ? super.get(id) ?? undefined : undefined;\n  }\n\n  toArray(): DroppableContainer[] {\n    return Array.from(this.values());\n  }\n\n  getEnabled(): DroppableContainer[] {\n    return this.toArray().filter(({disabled}) => !disabled);\n  }\n\n  getNodeFor(id: Identifier) {\n    return this.get(id)?.node.current ?? undefined;\n  }\n}\n","import {createContext} from 'react';\n\nimport {noop} from '../utilities/other';\nimport {defaultMeasuringConfiguration} from '../components/DndContext/defaults';\nimport {DroppableContainersMap} from './constructors';\nimport type {InternalContextDescriptor, PublicContextDescriptor} from './types';\n\nexport const defaultPublicContext: PublicContextDescriptor = {\n  activatorEvent: null,\n  active: null,\n  activeNode: null,\n  activeNodeRect: null,\n  collisions: null,\n  containerNodeRect: null,\n  draggableNodes: new Map(),\n  droppableRects: new Map(),\n  droppableContainers: new DroppableContainersMap(),\n  over: null,\n  dragOverlay: {\n    nodeRef: {\n      current: null,\n    },\n    rect: null,\n    setRef: noop,\n  },\n  scrollableAncestors: [],\n  scrollableAncestorRects: [],\n  measuringConfiguration: defaultMeasuringConfiguration,\n  measureDroppableContainers: noop,\n  windowRect: null,\n  measuringScheduled: false,\n};\n\nexport const defaultInternalContext: InternalContextDescriptor = {\n  activatorEvent: null,\n  activators: [],\n  active: null,\n  activeNodeRect: null,\n  ariaDescribedById: {\n    draggable: '',\n  },\n  dispatch: noop,\n  draggableNodes: new Map(),\n  over: null,\n  measureDroppableContainers: noop,\n};\n\nexport const InternalContext = createContext<InternalContextDescriptor>(\n  defaultInternalContext\n);\n\nexport const PublicContext = createContext<PublicContextDescriptor>(\n  defaultPublicContext\n);\n","import {Action, Actions} from './actions';\nimport {DroppableContainersMap} from './constructors';\nimport type {State} from './types';\n\nexport function getInitialState(): State {\n  return {\n    draggable: {\n      active: null,\n      initialCoordinates: {x: 0, y: 0},\n      nodes: new Map(),\n      translate: {x: 0, y: 0},\n    },\n    droppable: {\n      containers: new DroppableContainersMap(),\n    },\n  };\n}\n\nexport function reducer(state: State, action: Actions): State {\n  switch (action.type) {\n    case Action.DragStart:\n      return {\n        ...state,\n        draggable: {\n          ...state.draggable,\n          initialCoordinates: action.initialCoordinates,\n          active: action.active,\n        },\n      };\n    case Action.DragMove:\n      if (state.draggable.active == null) {\n        return state;\n      }\n\n      return {\n        ...state,\n        draggable: {\n          ...state.draggable,\n          translate: {\n            x: action.coordinates.x - state.draggable.initialCoordinates.x,\n            y: action.coordinates.y - state.draggable.initialCoordinates.y,\n          },\n        },\n      };\n    case Action.DragEnd:\n    case Action.DragCancel:\n      return {\n        ...state,\n        draggable: {\n          ...state.draggable,\n          active: null,\n          initialCoordinates: {x: 0, y: 0},\n          translate: {x: 0, y: 0},\n        },\n      };\n\n    case Action.RegisterDroppable: {\n      const {element} = action;\n      const {id} = element;\n      const containers = new DroppableContainersMap(state.droppable.containers);\n      containers.set(id, element);\n\n      return {\n        ...state,\n        droppable: {\n          ...state.droppable,\n          containers,\n        },\n      };\n    }\n\n    case Action.SetDroppableDisabled: {\n      const {id, key, disabled} = action;\n      const element = state.droppable.containers.get(id);\n\n      if (!element || key !== element.key) {\n        return state;\n      }\n\n      const containers = new DroppableContainersMap(state.droppable.containers);\n      containers.set(id, {\n        ...element,\n        disabled,\n      });\n\n      return {\n        ...state,\n        droppable: {\n          ...state.droppable,\n          containers,\n        },\n      };\n    }\n\n    case Action.UnregisterDroppable: {\n      const {id, key} = action;\n      const element = state.droppable.containers.get(id);\n\n      if (!element || key !== element.key) {\n        return state;\n      }\n\n      const containers = new DroppableContainersMap(state.droppable.containers);\n      containers.delete(id);\n\n      return {\n        ...state,\n        droppable: {\n          ...state.droppable,\n          containers,\n        },\n      };\n    }\n\n    default: {\n      return state;\n    }\n  }\n}\n","import {useContext, useEffect} from 'react';\nimport {\n  findFirstFocusableNode,\n  isKeyboardEvent,\n  usePrevious,\n} from '@dnd-kit/utilities';\n\nimport {InternalContext} from '../../../store';\n\ninterface Props {\n  disabled: boolean;\n}\n\nexport function RestoreFocus({disabled}: Props) {\n  const {active, activatorEvent, draggableNodes} = useContext(InternalContext);\n  const previousActivatorEvent = usePrevious(activatorEvent);\n  const previousActiveId = usePrevious(active?.id);\n\n  // Restore keyboard focus on the activator node\n  useEffect(() => {\n    if (disabled) {\n      return;\n    }\n\n    if (!activatorEvent && previousActivatorEvent && previousActiveId != null) {\n      if (!isKeyboardEvent(previousActivatorEvent)) {\n        return;\n      }\n\n      if (document.activeElement === previousActivatorEvent.target) {\n        // No need to restore focus\n        return;\n      }\n\n      const draggableNode = draggableNodes.get(previousActiveId);\n\n      if (!draggableNode) {\n        return;\n      }\n\n      const {activatorNode, node} = draggableNode;\n\n      if (!activatorNode.current && !node.current) {\n        return;\n      }\n\n      requestAnimationFrame(() => {\n        for (const element of [activatorNode.current, node.current]) {\n          if (!element) {\n            continue;\n          }\n\n          const focusableNode = findFirstFocusableNode(element);\n\n          if (focusableNode) {\n            focusableNode.focus();\n            break;\n          }\n        }\n      });\n    }\n  }, [\n    activatorEvent,\n    disabled,\n    draggableNodes,\n    previousActiveId,\n    previousActivatorEvent,\n  ]);\n\n  return null;\n}\n","import type {FirstArgument, Transform} from '@dnd-kit/utilities';\n\nimport type {Modifiers, Modifier} from './types';\n\nexport function applyModifiers(\n  modifiers: Modifiers | undefined,\n  {transform, ...args}: FirstArgument<Modifier>\n): Transform {\n  return modifiers?.length\n    ? modifiers.reduce<Transform>((accumulator, modifier) => {\n        return modifier({\n          transform: accumulator,\n          ...args,\n        });\n      }, transform)\n    : transform;\n}\n","import React, {\n  memo,\n  createContext,\n  useCallback,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n  useState,\n} from 'react';\nimport {unstable_batchedUpdates} from 'react-dom';\nimport {\n  add,\n  getEventCoordinates,\n  getWindow,\n  useLatestValue,\n  useIsomorphicLayoutEffect,\n  useUniqueId,\n} from '@dnd-kit/utilities';\nimport type {Transform} from '@dnd-kit/utilities';\n\nimport {\n  Action,\n  PublicContext,\n  InternalContext,\n  PublicContextDescriptor,\n  InternalContextDescriptor,\n  getInitialState,\n  reducer,\n} from '../../store';\nimport {DndMonitorContext, useDndMonitorProvider} from '../DndMonitor';\nimport {\n  useAutoScroller,\n  useCachedNode,\n  useCombineActivators,\n  useDragOverlayMeasuring,\n  useDroppableMeasuring,\n  useInitialRect,\n  useRect,\n  useRectDelta,\n  useRects,\n  useScrollableAncestors,\n  useScrollOffsets,\n  useScrollOffsetsDelta,\n  useSensorSetup,\n  useWindowRect,\n} from '../../hooks/utilities';\nimport type {AutoScrollOptions, SyntheticListener} from '../../hooks/utilities';\nimport type {\n  Sensor,\n  SensorContext,\n  SensorDescriptor,\n  SensorActivatorFunction,\n  SensorInstance,\n} from '../../sensors';\nimport {\n  adjustScale,\n  CollisionDetection,\n  defaultCoordinates,\n  getAdjustedRect,\n  getFirstCollision,\n  rectIntersection,\n} from '../../utilities';\nimport {applyModifiers, Modifiers} from '../../modifiers';\nimport type {Active, Over} from '../../store/types';\nimport type {\n  DragStartEvent,\n  DragCancelEvent,\n  DragEndEvent,\n  DragMoveEvent,\n  DragOverEvent,\n  UniqueIdentifier,\n  DragPendingEvent,\n  DragAbortEvent,\n} from '../../types';\nimport {\n  Accessibility,\n  Announcements,\n  RestoreFocus,\n  ScreenReaderInstructions,\n} from '../Accessibility';\n\nimport {defaultData, defaultSensors} from './defaults';\nimport {\n  useLayoutShiftScrollCompensation,\n  useMeasuringConfiguration,\n} from './hooks';\nimport type {MeasuringConfiguration} from './types';\n\nexport interface Props {\n  id?: string;\n  accessibility?: {\n    announcements?: Announcements;\n    container?: Element;\n    restoreFocus?: boolean;\n    screenReaderInstructions?: ScreenReaderInstructions;\n  };\n  autoScroll?: boolean | AutoScrollOptions;\n  cancelDrop?: CancelDrop;\n  children?: React.ReactNode;\n  collisionDetection?: CollisionDetection;\n  measuring?: MeasuringConfiguration;\n  modifiers?: Modifiers;\n  sensors?: SensorDescriptor<any>[];\n  onDragAbort?(event: DragAbortEvent): void;\n  onDragPending?(event: DragPendingEvent): void;\n  onDragStart?(event: DragStartEvent): void;\n  onDragMove?(event: DragMoveEvent): void;\n  onDragOver?(event: DragOverEvent): void;\n  onDragEnd?(event: DragEndEvent): void;\n  onDragCancel?(event: DragCancelEvent): void;\n}\n\nexport interface CancelDropArguments extends DragEndEvent {}\n\nexport type CancelDrop = (\n  args: CancelDropArguments\n) => boolean | Promise<boolean>;\n\ninterface DndEvent extends Event {\n  dndKit?: {\n    capturedBy: Sensor<any>;\n  };\n}\n\nexport const ActiveDraggableContext = createContext<Transform>({\n  ...defaultCoordinates,\n  scaleX: 1,\n  scaleY: 1,\n});\n\nenum Status {\n  Uninitialized,\n  Initializing,\n  Initialized,\n}\n\nexport const DndContext = memo(function DndContext({\n  id,\n  accessibility,\n  autoScroll = true,\n  children,\n  sensors = defaultSensors,\n  collisionDetection = rectIntersection,\n  measuring,\n  modifiers,\n  ...props\n}: Props) {\n  const store = useReducer(reducer, undefined, getInitialState);\n  const [state, dispatch] = store;\n  const [dispatchMonitorEvent, registerMonitorListener] =\n    useDndMonitorProvider();\n  const [status, setStatus] = useState<Status>(Status.Uninitialized);\n  const isInitialized = status === Status.Initialized;\n  const {\n    draggable: {active: activeId, nodes: draggableNodes, translate},\n    droppable: {containers: droppableContainers},\n  } = state;\n  const node = activeId != null ? draggableNodes.get(activeId) : null;\n  const activeRects = useRef<Active['rect']['current']>({\n    initial: null,\n    translated: null,\n  });\n  const active = useMemo<Active | null>(\n    () =>\n      activeId != null\n        ? {\n            id: activeId,\n            // It's possible for the active node to unmount while dragging\n            data: node?.data ?? defaultData,\n            rect: activeRects,\n          }\n        : null,\n    [activeId, node]\n  );\n  const activeRef = useRef<UniqueIdentifier | null>(null);\n  const [activeSensor, setActiveSensor] = useState<SensorInstance | null>(null);\n  const [activatorEvent, setActivatorEvent] = useState<Event | null>(null);\n  const latestProps = useLatestValue(props, Object.values(props));\n  const draggableDescribedById = useUniqueId(`DndDescribedBy`, id);\n  const enabledDroppableContainers = useMemo(\n    () => droppableContainers.getEnabled(),\n    [droppableContainers]\n  );\n  const measuringConfiguration = useMeasuringConfiguration(measuring);\n  const {droppableRects, measureDroppableContainers, measuringScheduled} =\n    useDroppableMeasuring(enabledDroppableContainers, {\n      dragging: isInitialized,\n      dependencies: [translate.x, translate.y],\n      config: measuringConfiguration.droppable,\n    });\n  const activeNode = useCachedNode(draggableNodes, activeId);\n  const activationCoordinates = useMemo(\n    () => (activatorEvent ? getEventCoordinates(activatorEvent) : null),\n    [activatorEvent]\n  );\n  const autoScrollOptions = getAutoScrollerOptions();\n  const initialActiveNodeRect = useInitialRect(\n    activeNode,\n    measuringConfiguration.draggable.measure\n  );\n\n  useLayoutShiftScrollCompensation({\n    activeNode: activeId != null ? draggableNodes.get(activeId) : null,\n    config: autoScrollOptions.layoutShiftCompensation,\n    initialRect: initialActiveNodeRect,\n    measure: measuringConfiguration.draggable.measure,\n  });\n\n  const activeNodeRect = useRect(\n    activeNode,\n    measuringConfiguration.draggable.measure,\n    initialActiveNodeRect\n  );\n  const containerNodeRect = useRect(\n    activeNode ? activeNode.parentElement : null\n  );\n  const sensorContext = useRef<SensorContext>({\n    activatorEvent: null,\n    active: null,\n    activeNode,\n    collisionRect: null,\n    collisions: null,\n    droppableRects,\n    draggableNodes,\n    draggingNode: null,\n    draggingNodeRect: null,\n    droppableContainers,\n    over: null,\n    scrollableAncestors: [],\n    scrollAdjustedTranslate: null,\n  });\n  const overNode = droppableContainers.getNodeFor(\n    sensorContext.current.over?.id\n  );\n  const dragOverlay = useDragOverlayMeasuring({\n    measure: measuringConfiguration.dragOverlay.measure,\n  });\n\n  // Use the rect of the drag overlay if it is mounted\n  const draggingNode = dragOverlay.nodeRef.current ?? activeNode;\n  const draggingNodeRect = isInitialized\n    ? dragOverlay.rect ?? activeNodeRect\n    : null;\n  const usesDragOverlay = Boolean(\n    dragOverlay.nodeRef.current && dragOverlay.rect\n  );\n  // The delta between the previous and new position of the draggable node\n  // is only relevant when there is no drag overlay\n  const nodeRectDelta = useRectDelta(usesDragOverlay ? null : activeNodeRect);\n\n  // Get the window rect of the dragging node\n  const windowRect = useWindowRect(\n    draggingNode ? getWindow(draggingNode) : null\n  );\n\n  // Get scrollable ancestors of the dragging node\n  const scrollableAncestors = useScrollableAncestors(\n    isInitialized ? overNode ?? activeNode : null\n  );\n  const scrollableAncestorRects = useRects(scrollableAncestors);\n\n  // Apply modifiers\n  const modifiedTranslate = applyModifiers(modifiers, {\n    transform: {\n      x: translate.x - nodeRectDelta.x,\n      y: translate.y - nodeRectDelta.y,\n      scaleX: 1,\n      scaleY: 1,\n    },\n    activatorEvent,\n    active,\n    activeNodeRect,\n    containerNodeRect,\n    draggingNodeRect,\n    over: sensorContext.current.over,\n    overlayNodeRect: dragOverlay.rect,\n    scrollableAncestors,\n    scrollableAncestorRects,\n    windowRect,\n  });\n\n  const pointerCoordinates = activationCoordinates\n    ? add(activationCoordinates, translate)\n    : null;\n\n  const scrollOffsets = useScrollOffsets(scrollableAncestors);\n  // Represents the scroll delta since dragging was initiated\n  const scrollAdjustment = useScrollOffsetsDelta(scrollOffsets);\n  // Represents the scroll delta since the last time the active node rect was measured\n  const activeNodeScrollDelta = useScrollOffsetsDelta(scrollOffsets, [\n    activeNodeRect,\n  ]);\n\n  const scrollAdjustedTranslate = add(modifiedTranslate, scrollAdjustment);\n\n  const collisionRect = draggingNodeRect\n    ? getAdjustedRect(draggingNodeRect, modifiedTranslate)\n    : null;\n\n  const collisions =\n    active && collisionRect\n      ? collisionDetection({\n          active,\n          collisionRect,\n          droppableRects,\n          droppableContainers: enabledDroppableContainers,\n          pointerCoordinates,\n        })\n      : null;\n  const overId = getFirstCollision(collisions, 'id');\n  const [over, setOver] = useState<Over | null>(null);\n\n  // When there is no drag overlay used, we need to account for the\n  // window scroll delta\n  const appliedTranslate = usesDragOverlay\n    ? modifiedTranslate\n    : add(modifiedTranslate, activeNodeScrollDelta);\n\n  const transform = adjustScale(\n    appliedTranslate,\n    over?.rect ?? null,\n    activeNodeRect\n  );\n\n  const activeSensorRef = useRef<SensorInstance | null>(null);\n  const instantiateSensor = useCallback(\n    (\n      event: React.SyntheticEvent,\n      {sensor: Sensor, options}: SensorDescriptor<any>\n    ) => {\n      if (activeRef.current == null) {\n        return;\n      }\n\n      const activeNode = draggableNodes.get(activeRef.current);\n\n      if (!activeNode) {\n        return;\n      }\n\n      const activatorEvent = event.nativeEvent;\n\n      const sensorInstance = new Sensor({\n        active: activeRef.current,\n        activeNode,\n        event: activatorEvent,\n        options,\n        // Sensors need to be instantiated with refs for arguments that change over time\n        // otherwise they are frozen in time with the stale arguments\n        context: sensorContext,\n        onAbort(id) {\n          const draggableNode = draggableNodes.get(id);\n\n          if (!draggableNode) {\n            return;\n          }\n\n          const {onDragAbort} = latestProps.current;\n          const event: DragAbortEvent = {id};\n          onDragAbort?.(event);\n          dispatchMonitorEvent({type: 'onDragAbort', event});\n        },\n        onPending(id, constraint, initialCoordinates, offset) {\n          const draggableNode = draggableNodes.get(id);\n\n          if (!draggableNode) {\n            return;\n          }\n\n          const {onDragPending} = latestProps.current;\n          const event: DragPendingEvent = {\n            id,\n            constraint,\n            initialCoordinates,\n            offset,\n          };\n\n          onDragPending?.(event);\n          dispatchMonitorEvent({type: 'onDragPending', event});\n        },\n        onStart(initialCoordinates) {\n          const id = activeRef.current;\n\n          if (id == null) {\n            return;\n          }\n\n          const draggableNode = draggableNodes.get(id);\n\n          if (!draggableNode) {\n            return;\n          }\n\n          const {onDragStart} = latestProps.current;\n          const event: DragStartEvent = {\n            activatorEvent,\n            active: {id, data: draggableNode.data, rect: activeRects},\n          };\n\n          unstable_batchedUpdates(() => {\n            onDragStart?.(event);\n            setStatus(Status.Initializing);\n            dispatch({\n              type: Action.DragStart,\n              initialCoordinates,\n              active: id,\n            });\n            dispatchMonitorEvent({type: 'onDragStart', event});\n            setActiveSensor(activeSensorRef.current);\n            setActivatorEvent(activatorEvent);\n          });\n        },\n        onMove(coordinates) {\n          dispatch({\n            type: Action.DragMove,\n            coordinates,\n          });\n        },\n        onEnd: createHandler(Action.DragEnd),\n        onCancel: createHandler(Action.DragCancel),\n      });\n\n      activeSensorRef.current = sensorInstance;\n\n      function createHandler(type: Action.DragEnd | Action.DragCancel) {\n        return async function handler() {\n          const {active, collisions, over, scrollAdjustedTranslate} =\n            sensorContext.current;\n          let event: DragEndEvent | null = null;\n\n          if (active && scrollAdjustedTranslate) {\n            const {cancelDrop} = latestProps.current;\n\n            event = {\n              activatorEvent,\n              active: active,\n              collisions,\n              delta: scrollAdjustedTranslate,\n              over,\n            };\n\n            if (type === Action.DragEnd && typeof cancelDrop === 'function') {\n              const shouldCancel = await Promise.resolve(cancelDrop(event));\n\n              if (shouldCancel) {\n                type = Action.DragCancel;\n              }\n            }\n          }\n\n          activeRef.current = null;\n\n          unstable_batchedUpdates(() => {\n            dispatch({type});\n            setStatus(Status.Uninitialized);\n            setOver(null);\n            setActiveSensor(null);\n            setActivatorEvent(null);\n            activeSensorRef.current = null;\n\n            const eventName =\n              type === Action.DragEnd ? 'onDragEnd' : 'onDragCancel';\n\n            if (event) {\n              const handler = latestProps.current[eventName];\n\n              handler?.(event);\n              dispatchMonitorEvent({type: eventName, event});\n            }\n          });\n        };\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [draggableNodes]\n  );\n\n  const bindActivatorToSensorInstantiator = useCallback(\n    (\n      handler: SensorActivatorFunction<any>,\n      sensor: SensorDescriptor<any>\n    ): SyntheticListener['handler'] => {\n      return (event, active) => {\n        const nativeEvent = event.nativeEvent as DndEvent;\n        const activeDraggableNode = draggableNodes.get(active);\n\n        if (\n          // Another sensor is already instantiating\n          activeRef.current !== null ||\n          // No active draggable\n          !activeDraggableNode ||\n          // Event has already been captured\n          nativeEvent.dndKit ||\n          nativeEvent.defaultPrevented\n        ) {\n          return;\n        }\n\n        const activationContext = {\n          active: activeDraggableNode,\n        };\n        const shouldActivate = handler(\n          event,\n          sensor.options,\n          activationContext\n        );\n\n        if (shouldActivate === true) {\n          nativeEvent.dndKit = {\n            capturedBy: sensor.sensor,\n          };\n\n          activeRef.current = active;\n          instantiateSensor(event, sensor);\n        }\n      };\n    },\n    [draggableNodes, instantiateSensor]\n  );\n\n  const activators = useCombineActivators(\n    sensors,\n    bindActivatorToSensorInstantiator\n  );\n\n  useSensorSetup(sensors);\n\n  useIsomorphicLayoutEffect(() => {\n    if (activeNodeRect && status === Status.Initializing) {\n      setStatus(Status.Initialized);\n    }\n  }, [activeNodeRect, status]);\n\n  useEffect(\n    () => {\n      const {onDragMove} = latestProps.current;\n      const {active, activatorEvent, collisions, over} = sensorContext.current;\n\n      if (!active || !activatorEvent) {\n        return;\n      }\n\n      const event: DragMoveEvent = {\n        active,\n        activatorEvent,\n        collisions,\n        delta: {\n          x: scrollAdjustedTranslate.x,\n          y: scrollAdjustedTranslate.y,\n        },\n        over,\n      };\n\n      unstable_batchedUpdates(() => {\n        onDragMove?.(event);\n        dispatchMonitorEvent({type: 'onDragMove', event});\n      });\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [scrollAdjustedTranslate.x, scrollAdjustedTranslate.y]\n  );\n\n  useEffect(\n    () => {\n      const {\n        active,\n        activatorEvent,\n        collisions,\n        droppableContainers,\n        scrollAdjustedTranslate,\n      } = sensorContext.current;\n\n      if (\n        !active ||\n        activeRef.current == null ||\n        !activatorEvent ||\n        !scrollAdjustedTranslate\n      ) {\n        return;\n      }\n\n      const {onDragOver} = latestProps.current;\n      const overContainer = droppableContainers.get(overId);\n      const over =\n        overContainer && overContainer.rect.current\n          ? {\n              id: overContainer.id,\n              rect: overContainer.rect.current,\n              data: overContainer.data,\n              disabled: overContainer.disabled,\n            }\n          : null;\n      const event: DragOverEvent = {\n        active,\n        activatorEvent,\n        collisions,\n        delta: {\n          x: scrollAdjustedTranslate.x,\n          y: scrollAdjustedTranslate.y,\n        },\n        over,\n      };\n\n      unstable_batchedUpdates(() => {\n        setOver(over);\n        onDragOver?.(event);\n        dispatchMonitorEvent({type: 'onDragOver', event});\n      });\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [overId]\n  );\n\n  useIsomorphicLayoutEffect(() => {\n    sensorContext.current = {\n      activatorEvent,\n      active,\n      activeNode,\n      collisionRect,\n      collisions,\n      droppableRects,\n      draggableNodes,\n      draggingNode,\n      draggingNodeRect,\n      droppableContainers,\n      over,\n      scrollableAncestors,\n      scrollAdjustedTranslate,\n    };\n\n    activeRects.current = {\n      initial: draggingNodeRect,\n      translated: collisionRect,\n    };\n  }, [\n    active,\n    activeNode,\n    collisions,\n    collisionRect,\n    draggableNodes,\n    draggingNode,\n    draggingNodeRect,\n    droppableRects,\n    droppableContainers,\n    over,\n    scrollableAncestors,\n    scrollAdjustedTranslate,\n  ]);\n\n  useAutoScroller({\n    ...autoScrollOptions,\n    delta: translate,\n    draggingRect: collisionRect,\n    pointerCoordinates,\n    scrollableAncestors,\n    scrollableAncestorRects,\n  });\n\n  const publicContext = useMemo(() => {\n    const context: PublicContextDescriptor = {\n      active,\n      activeNode,\n      activeNodeRect,\n      activatorEvent,\n      collisions,\n      containerNodeRect,\n      dragOverlay,\n      draggableNodes,\n      droppableContainers,\n      droppableRects,\n      over,\n      measureDroppableContainers,\n      scrollableAncestors,\n      scrollableAncestorRects,\n      measuringConfiguration,\n      measuringScheduled,\n      windowRect,\n    };\n\n    return context;\n  }, [\n    active,\n    activeNode,\n    activeNodeRect,\n    activatorEvent,\n    collisions,\n    containerNodeRect,\n    dragOverlay,\n    draggableNodes,\n    droppableContainers,\n    droppableRects,\n    over,\n    measureDroppableContainers,\n    scrollableAncestors,\n    scrollableAncestorRects,\n    measuringConfiguration,\n    measuringScheduled,\n    windowRect,\n  ]);\n\n  const internalContext = useMemo(() => {\n    const context: InternalContextDescriptor = {\n      activatorEvent,\n      activators,\n      active,\n      activeNodeRect,\n      ariaDescribedById: {\n        draggable: draggableDescribedById,\n      },\n      dispatch,\n      draggableNodes,\n      over,\n      measureDroppableContainers,\n    };\n\n    return context;\n  }, [\n    activatorEvent,\n    activators,\n    active,\n    activeNodeRect,\n    dispatch,\n    draggableDescribedById,\n    draggableNodes,\n    over,\n    measureDroppableContainers,\n  ]);\n\n  return (\n    <DndMonitorContext.Provider value={registerMonitorListener}>\n      <InternalContext.Provider value={internalContext}>\n        <PublicContext.Provider value={publicContext}>\n          <ActiveDraggableContext.Provider value={transform}>\n            {children}\n          </ActiveDraggableContext.Provider>\n        </PublicContext.Provider>\n        <RestoreFocus disabled={accessibility?.restoreFocus === false} />\n      </InternalContext.Provider>\n      <Accessibility\n        {...accessibility}\n        hiddenTextDescribedById={draggableDescribedById}\n      />\n    </DndMonitorContext.Provider>\n  );\n\n  function getAutoScrollerOptions() {\n    const activeSensorDisablesAutoscroll =\n      activeSensor?.autoScrollEnabled === false;\n    const autoScrollGloballyDisabled =\n      typeof autoScroll === 'object'\n        ? autoScroll.enabled === false\n        : autoScroll === false;\n    const enabled =\n      isInitialized &&\n      !activeSensorDisablesAutoscroll &&\n      !autoScrollGloballyDisabled;\n\n    if (typeof autoScroll === 'object') {\n      return {\n        ...autoScroll,\n        enabled,\n      };\n    }\n\n    return {enabled};\n  }\n});\n","import {useCallback, useState} from 'react';\n\nimport type {DndMonitorListener, DndMonitorEvent} from './types';\n\nexport function useDndMonitorProvider() {\n  const [listeners] = useState(() => new Set<DndMonitorListener>());\n\n  const registerListener = useCallback(\n    (listener) => {\n      listeners.add(listener);\n      return () => listeners.delete(listener);\n    },\n    [listeners]\n  );\n\n  const dispatch = useCallback(\n    ({type, event}: DndMonitorEvent) => {\n      listeners.forEach((listener) => listener[type]?.(event as any));\n    },\n    [listeners]\n  );\n\n  return [dispatch, registerListener] as const;\n}\n","import {useMemo} from 'react';\nimport type {DeepRequired} from '@dnd-kit/utilities';\n\nimport {defaultMeasuringConfiguration} from '../defaults';\nimport type {MeasuringConfiguration} from '../types';\n\nexport function useMeasuringConfiguration(\n  config: MeasuringConfiguration | undefined\n): DeepRequired<MeasuringConfiguration> {\n  return useMemo(\n    () => ({\n      draggable: {\n        ...defaultMeasuringConfiguration.draggable,\n        ...config?.draggable,\n      },\n      droppable: {\n        ...defaultMeasuringConfiguration.droppable,\n        ...config?.droppable,\n      },\n      dragOverlay: {\n        ...defaultMeasuringConfiguration.dragOverlay,\n        ...config?.dragOverlay,\n      },\n    }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [config?.draggable, config?.droppable, config?.dragOverlay]\n  );\n}\n","import {useLazyMemo} from '@dnd-kit/utilities';\n\nimport type {DraggableNode, DraggableNodes} from '../../store';\nimport type {UniqueIdentifier} from '../../types';\n\nexport function useCachedNode(\n  draggableNodes: DraggableNodes,\n  id: UniqueIdentifier | null\n): DraggableNode['node']['current'] {\n  const draggableNode = id != null ? draggableNodes.get(id) : undefined;\n  const node = draggableNode ? draggableNode.node.current : null;\n\n  return useLazyMemo(\n    (cachedNode) => {\n      if (id == null) {\n        return null;\n      }\n\n      // In some cases, the draggable node can unmount while dragging\n      // This is the case for virtualized lists. In those situations,\n      // we fall back to the last known value for that node.\n      return node ?? cachedNode ?? null;\n    },\n    [node, id]\n  );\n}\n","import type {ClientRect} from '../../types';\nimport {useInitialValue} from './useInitialValue';\n\nexport function useInitialRect(\n  node: HTMLElement | null,\n  measure: (node: HTMLElement) => ClientRect\n) {\n  return useInitialValue(node, measure);\n}\n","import {useRef} from 'react';\nimport {useIsomorphicLayoutEffect} from '@dnd-kit/utilities';\n\nimport {getRectDelta} from '../../../utilities/rect';\nimport {getFirstScrollableAncestor} from '../../../utilities/scroll';\nimport type {ClientRect} from '../../../types';\nimport type {DraggableNode} from '../../../store';\nimport type {MeasuringFunction} from '../types';\n\ninterface Options {\n  activeNode: DraggableNode | null | undefined;\n  config: boolean | {x: boolean; y: boolean} | undefined;\n  initialRect: ClientRect | null;\n  measure: MeasuringFunction;\n}\n\nexport function useLayoutShiftScrollCompensation({\n  activeNode,\n  measure,\n  initialRect,\n  config = true,\n}: Options) {\n  const initialized = useRef(false);\n  const {x, y} = typeof config === 'boolean' ? {x: config, y: config} : config;\n\n  useIsomorphicLayoutEffect(() => {\n    const disabled = !x && !y;\n\n    if (disabled || !activeNode) {\n      initialized.current = false;\n      return;\n    }\n\n    if (initialized.current || !initialRect) {\n      // Return early if layout shift scroll compensation was already attempted\n      // or if there is no initialRect to compare to.\n      return;\n    }\n\n    // Get the most up to date node ref for the active draggable\n    const node = activeNode?.node.current;\n\n    if (!node || node.isConnected === false) {\n      // Return early if there is no attached node ref or if the node is\n      // disconnected from the document.\n      return;\n    }\n\n    const rect = measure(node);\n    const rectDelta = getRectDelta(rect, initialRect);\n\n    if (!x) {\n      rectDelta.x = 0;\n    }\n\n    if (!y) {\n      rectDelta.y = 0;\n    }\n\n    // Only perform layout shift scroll compensation once\n    initialized.current = true;\n\n    if (Math.abs(rectDelta.x) > 0 || Math.abs(rectDelta.y) > 0) {\n      const firstScrollableAncestor = getFirstScrollableAncestor(node);\n\n      if (firstScrollableAncestor) {\n        firstScrollableAncestor.scrollBy({\n          top: rectDelta.y,\n          left: rectDelta.x,\n        });\n      }\n    }\n  }, [activeNode, x, y, initialRect, measure]);\n}\n","import {useMemo, useCallback, useState} from 'react';\nimport {isHTMLElement, useNodeRef} from '@dnd-kit/utilities';\n\nimport {useResizeObserver} from './useResizeObserver';\nimport {getMeasurableNode} from '../../utilities/nodes';\nimport type {PublicContextDescriptor} from '../../store';\nimport type {ClientRect} from '../../types';\n\ninterface Arguments {\n  measure(element: HTMLElement): ClientRect;\n}\n\nexport function useDragOverlayMeasuring({\n  measure,\n}: Arguments): PublicContextDescriptor['dragOverlay'] {\n  const [rect, setRect] = useState<ClientRect | null>(null);\n  const handleResize = useCallback(\n    (entries: ResizeObserverEntry[]) => {\n      for (const {target} of entries) {\n        if (isHTMLElement(target)) {\n          setRect((rect) => {\n            const newRect = measure(target);\n\n            return rect\n              ? {...rect, width: newRect.width, height: newRect.height}\n              : newRect;\n          });\n          break;\n        }\n      }\n    },\n    [measure]\n  );\n  const resizeObserver = useResizeObserver({callback: handleResize});\n  const handleNodeChange = useCallback(\n    (element) => {\n      const node = getMeasurableNode(element);\n\n      resizeObserver?.disconnect();\n\n      if (node) {\n        resizeObserver?.observe(node);\n      }\n\n      setRect(node ? measure(node) : null);\n    },\n    [measure, resizeObserver]\n  );\n  const [nodeRef, setRef] = useNodeRef(handleNodeChange);\n\n  return useMemo(\n    () => ({\n      nodeRef,\n      rect,\n      setRef,\n    }),\n    [rect, nodeRef, setRef]\n  );\n}\n","import type {ClientRect} from '../../types';\nimport {getRectDelta} from '../../utilities';\n\nimport {useInitialValue} from './useInitialValue';\n\nexport function useRectDelta(rect: ClientRect | null) {\n  const initialRect = useInitialValue(rect);\n\n  return getRectDelta(rect, initialRect);\n}\n","import {useState, useCallback, useMemo, useRef, useEffect} from 'react';\nimport {add} from '@dnd-kit/utilities';\n\nimport {\n  defaultCoordinates,\n  getScrollableElement,\n  getScrollCoordinates,\n  getScrollOffsets,\n} from '../../utilities';\nimport type {Coordinates} from '../../types';\n\ntype ScrollCoordinates = Map<HTMLElement | Window, Coordinates>;\n\nexport function useScrollOffsets(elements: Element[]): Coordinates {\n  const [\n    scrollCoordinates,\n    setScrollCoordinates,\n  ] = useState<ScrollCoordinates | null>(null);\n  const prevElements = useRef(elements);\n\n  // To-do: Throttle the handleScroll callback\n  const handleScroll = useCallback((event: Event) => {\n    const scrollingElement = getScrollableElement(event.target);\n\n    if (!scrollingElement) {\n      return;\n    }\n\n    setScrollCoordinates((scrollCoordinates) => {\n      if (!scrollCoordinates) {\n        return null;\n      }\n\n      scrollCoordinates.set(\n        scrollingElement,\n        getScrollCoordinates(scrollingElement)\n      );\n\n      return new Map(scrollCoordinates);\n    });\n  }, []);\n\n  useEffect(() => {\n    const previousElements = prevElements.current;\n\n    if (elements !== previousElements) {\n      cleanup(previousElements);\n\n      const entries = elements\n        .map((element) => {\n          const scrollableElement = getScrollableElement(element);\n\n          if (scrollableElement) {\n            scrollableElement.addEventListener('scroll', handleScroll, {\n              passive: true,\n            });\n\n            return [\n              scrollableElement,\n              getScrollCoordinates(scrollableElement),\n            ] as const;\n          }\n\n          return null;\n        })\n        .filter(\n          (\n            entry\n          ): entry is [\n            HTMLElement | (Window & typeof globalThis),\n            Coordinates\n          ] => entry != null\n        );\n\n      setScrollCoordinates(entries.length ? new Map(entries) : null);\n\n      prevElements.current = elements;\n    }\n\n    return () => {\n      cleanup(elements);\n      cleanup(previousElements);\n    };\n\n    function cleanup(elements: Element[]) {\n      elements.forEach((element) => {\n        const scrollableElement = getScrollableElement(element);\n\n        scrollableElement?.removeEventListener('scroll', handleScroll);\n      });\n    }\n  }, [handleScroll, elements]);\n\n  return useMemo(() => {\n    if (elements.length) {\n      return scrollCoordinates\n        ? Array.from(scrollCoordinates.values()).reduce(\n            (acc, coordinates) => add(acc, coordinates),\n            defaultCoordinates\n          )\n        : getScrollOffsets(elements);\n    }\n\n    return defaultCoordinates;\n  }, [elements, scrollCoordinates]);\n}\n","import type {Transform} from '@dnd-kit/utilities';\nimport type {ClientRect} from '../../types';\n\nexport function adjustScale(\n  transform: Transform,\n  rect1: ClientRect | null,\n  rect2: ClientRect | null\n): Transform {\n  return {\n    ...transform,\n    scaleX: rect1 && rect2 ? rect1.width / rect2.width : 1,\n    scaleY: rect1 && rect2 ? rect1.height / rect2.height : 1,\n  };\n}\n","import {useMemo} from 'react';\n\nimport type {SensorActivatorFunction, SensorDescriptor} from '../../sensors';\nimport type {\n  SyntheticListener,\n  SyntheticListeners,\n} from './useSyntheticListeners';\n\nexport function useCombineActivators(\n  sensors: SensorDescriptor<any>[],\n  getSyntheticHandler: (\n    handler: SensorActivatorFunction<any>,\n    sensor: SensorDescriptor<any>\n  ) => SyntheticListener['handler']\n): SyntheticListeners {\n  return useMemo(\n    () =>\n      sensors.reduce<SyntheticListeners>((accumulator, sensor) => {\n        const {sensor: Sensor} = sensor;\n\n        const sensorActivators = Sensor.activators.map((activator) => ({\n          eventName: activator.eventName,\n          handler: getSyntheticHandler(activator.handler, sensor),\n        }));\n\n        return [...accumulator, ...sensorActivators];\n      }, []),\n    [sensors, getSyntheticHandler]\n  );\n}\n","import {useEffect} from 'react';\nimport {canUseDOM} from '@dnd-kit/utilities';\n\nimport type {SensorDescriptor} from '../../sensors';\n\nexport function useSensorSetup(sensors: SensorDescriptor<any>[]) {\n  useEffect(\n    () => {\n      if (!canUseDOM) {\n        return;\n      }\n\n      const teardownFns = sensors.map(({sensor}) => sensor.setup?.());\n\n      return () => {\n        for (const teardown of teardownFns) {\n          teardown?.();\n        }\n      };\n    },\n    // TO-DO: Sensors length could theoretically change which would not be a valid dependency\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    sensors.map(({sensor}) => sensor)\n  );\n}\n","import {createContext, useContext, useMemo} from 'react';\nimport {\n  Transform,\n  useNodeRef,\n  useIsomorphicLayoutEffect,\n  useLatestValue,\n  useUniqueId,\n} from '@dnd-kit/utilities';\n\nimport {InternalContext, Data} from '../store';\nimport type {UniqueIdentifier} from '../types';\nimport {ActiveDraggableContext} from '../components/DndContext';\nimport {useSyntheticListeners, SyntheticListenerMap} from './utilities';\n\nexport interface UseDraggableArguments {\n  id: UniqueIdentifier;\n  data?: Data;\n  disabled?: boolean;\n  attributes?: {\n    role?: string;\n    roleDescription?: string;\n    tabIndex?: number;\n  };\n}\n\nexport interface DraggableAttributes {\n  role: string;\n  tabIndex: number;\n  'aria-disabled': boolean;\n  'aria-pressed': boolean | undefined;\n  'aria-roledescription': string;\n  'aria-describedby': string;\n}\n\nexport type DraggableSyntheticListeners = SyntheticListenerMap | undefined;\n\nconst NullContext = createContext<any>(null);\n\nconst defaultRole = 'button';\n\nconst ID_PREFIX = 'Draggable';\n\nexport function useDraggable({\n  id,\n  data,\n  disabled = false,\n  attributes,\n}: UseDraggableArguments) {\n  const key = useUniqueId(ID_PREFIX);\n  const {\n    activators,\n    activatorEvent,\n    active,\n    activeNodeRect,\n    ariaDescribedById,\n    draggableNodes,\n    over,\n  } = useContext(InternalContext);\n  const {\n    role = defaultRole,\n    roleDescription = 'draggable',\n    tabIndex = 0,\n  } = attributes ?? {};\n  const isDragging = active?.id === id;\n  const transform: Transform | null = useContext(\n    isDragging ? ActiveDraggableContext : NullContext\n  );\n  const [node, setNodeRef] = useNodeRef();\n  const [activatorNode, setActivatorNodeRef] = useNodeRef();\n  const listeners = useSyntheticListeners(activators, id);\n  const dataRef = useLatestValue(data);\n\n  useIsomorphicLayoutEffect(\n    () => {\n      draggableNodes.set(id, {id, key, node, activatorNode, data: dataRef});\n\n      return () => {\n        const node = draggableNodes.get(id);\n\n        if (node && node.key === key) {\n          draggableNodes.delete(id);\n        }\n      };\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [draggableNodes, id]\n  );\n\n  const memoizedAttributes: DraggableAttributes = useMemo(\n    () => ({\n      role,\n      tabIndex,\n      'aria-disabled': disabled,\n      'aria-pressed': isDragging && role === defaultRole ? true : undefined,\n      'aria-roledescription': roleDescription,\n      'aria-describedby': ariaDescribedById.draggable,\n    }),\n    [\n      disabled,\n      role,\n      tabIndex,\n      isDragging,\n      roleDescription,\n      ariaDescribedById.draggable,\n    ]\n  );\n\n  return {\n    active,\n    activatorEvent,\n    activeNodeRect,\n    attributes: memoizedAttributes,\n    isDragging,\n    listeners: disabled ? undefined : listeners,\n    node,\n    over,\n    setNodeRef,\n    setActivatorNodeRef,\n    transform,\n  };\n}\n","import {useMemo} from 'react';\n\nimport type {SyntheticEventName, UniqueIdentifier} from '../../types';\n\nexport type SyntheticListener = {\n  eventName: SyntheticEventName;\n  handler: (event: React.SyntheticEvent, id: UniqueIdentifier) => void;\n};\n\nexport type SyntheticListeners = SyntheticListener[];\n\nexport type SyntheticListenerMap = Record<string, Function>;\n\nexport function useSyntheticListeners(\n  listeners: SyntheticListeners,\n  id: UniqueIdentifier\n): SyntheticListenerMap {\n  return useMemo(() => {\n    return listeners.reduce<SyntheticListenerMap>(\n      (acc, {eventName, handler}) => {\n        acc[eventName] = (event: React.SyntheticEvent) => {\n          handler(event, id);\n        };\n\n        return acc;\n      },\n      {} as SyntheticListenerMap\n    );\n  }, [listeners, id]);\n}\n","import {ContextType, useContext} from 'react';\nimport {PublicContext} from '../store';\n\nexport function useDndContext() {\n  return useContext(PublicContext);\n}\n\nexport type UseDndContextReturnValue = ContextType<typeof PublicContext>;\n","import {useCallback, useContext, useEffect, useRef} from 'react';\nimport {useLatestValue, useNodeRef, useUniqueId} from '@dnd-kit/utilities';\n\nimport {InternalContext, Action, Data} from '../store';\nimport type {ClientRect, UniqueIdentifier} from '../types';\n\nimport {useResizeObserver} from './utilities';\n\ninterface ResizeObserverConfig {\n  /** Whether the ResizeObserver should be disabled entirely */\n  disabled?: boolean;\n  /** Resize events may affect the layout and position of other droppable containers.\n   * Specify an array of `UniqueIdentifier` of droppable containers that should also be re-measured\n   * when this droppable container resizes. Specifying an empty array re-measures all droppable containers.\n   */\n  updateMeasurementsFor?: UniqueIdentifier[];\n  /** Represents the debounce timeout between when resize events are observed and when elements are re-measured */\n  timeout?: number;\n}\n\nexport interface UseDroppableArguments {\n  id: UniqueIdentifier;\n  disabled?: boolean;\n  data?: Data;\n  resizeObserverConfig?: ResizeObserverConfig;\n}\n\nconst ID_PREFIX = 'Droppable';\n\nconst defaultResizeObserverConfig = {\n  timeout: 25,\n};\n\nexport function useDroppable({\n  data,\n  disabled = false,\n  id,\n  resizeObserverConfig,\n}: UseDroppableArguments) {\n  const key = useUniqueId(ID_PREFIX);\n  const {active, dispatch, over, measureDroppableContainers} =\n    useContext(InternalContext);\n  const previous = useRef({disabled});\n  const resizeObserverConnected = useRef(false);\n  const rect = useRef<ClientRect | null>(null);\n  const callbackId = useRef<NodeJS.Timeout | null>(null);\n  const {\n    disabled: resizeObserverDisabled,\n    updateMeasurementsFor,\n    timeout: resizeObserverTimeout,\n  } = {\n    ...defaultResizeObserverConfig,\n    ...resizeObserverConfig,\n  };\n  const ids = useLatestValue(updateMeasurementsFor ?? id);\n  const handleResize = useCallback(\n    () => {\n      if (!resizeObserverConnected.current) {\n        // ResizeObserver invokes the `handleResize` callback as soon as `observe` is called,\n        // assuming the element is rendered and displayed.\n        resizeObserverConnected.current = true;\n        return;\n      }\n\n      if (callbackId.current != null) {\n        clearTimeout(callbackId.current);\n      }\n\n      callbackId.current = setTimeout(() => {\n        measureDroppableContainers(\n          Array.isArray(ids.current) ? ids.current : [ids.current]\n        );\n        callbackId.current = null;\n      }, resizeObserverTimeout);\n    },\n    //eslint-disable-next-line react-hooks/exhaustive-deps\n    [resizeObserverTimeout]\n  );\n  const resizeObserver = useResizeObserver({\n    callback: handleResize,\n    disabled: resizeObserverDisabled || !active,\n  });\n  const handleNodeChange = useCallback(\n    (newElement: HTMLElement | null, previousElement: HTMLElement | null) => {\n      if (!resizeObserver) {\n        return;\n      }\n\n      if (previousElement) {\n        resizeObserver.unobserve(previousElement);\n        resizeObserverConnected.current = false;\n      }\n\n      if (newElement) {\n        resizeObserver.observe(newElement);\n      }\n    },\n    [resizeObserver]\n  );\n  const [nodeRef, setNodeRef] = useNodeRef(handleNodeChange);\n  const dataRef = useLatestValue(data);\n\n  useEffect(() => {\n    if (!resizeObserver || !nodeRef.current) {\n      return;\n    }\n\n    resizeObserver.disconnect();\n    resizeObserverConnected.current = false;\n    resizeObserver.observe(nodeRef.current);\n  }, [nodeRef, resizeObserver]);\n\n  useEffect(\n    () => {\n      dispatch({\n        type: Action.RegisterDroppable,\n        element: {\n          id,\n          key,\n          disabled,\n          node: nodeRef,\n          rect,\n          data: dataRef,\n        },\n      });\n\n      return () =>\n        dispatch({\n          type: Action.UnregisterDroppable,\n          key,\n          id,\n        });\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [id]\n  );\n\n  useEffect(() => {\n    if (disabled !== previous.current.disabled) {\n      dispatch({\n        type: Action.SetDroppableDisabled,\n        id,\n        key,\n        disabled,\n      });\n\n      previous.current.disabled = disabled;\n    }\n  }, [id, key, disabled, dispatch]);\n\n  return {\n    active,\n    rect,\n    isOver: over?.id === id,\n    node: nodeRef,\n    over,\n    setNodeRef,\n  };\n}\n"],"names":["useCombinedRefs","refs","Array","_len","_key","arguments","useMemo","node","forEach","ref","canUseDOM","window","document","createElement","isWindow","element","elementString","Object","prototype","toString","call","isNode","getWindow","target","_target$ownerDocument","_target$ownerDocument2","ownerDocument","defaultView","isDocument","Document","isHTMLElement","HTMLElement","isSVGElement","SVGElement","getOwnerDocument","useIsomorphicLayoutEffect","useLayoutEffect","useEffect","useEvent","handler","handlerRef","useRef","current","useCallback","args","useInterval","intervalRef","listener","duration","setInterval","clearInterval","useLatestValue","value","dependencies","valueRef","useLazyMemo","callback","newValue","useNodeRef","onChange","onChangeHandler","setNodeRef","usePrevious","ids","useUniqueId","prefix","id","createAdjustmentFn","modifier","object","adjustments","reduce","accumulator","adjustment","entries","key","valueAdjustment","_objectSpread","add","subtract","isKeyboardEvent","event","KeyboardEvent","getEventCoordinates","TouchEvent","isTouchEvent","touches","length","clientX","x","clientY","y","changedTouches","hasViewportRelativeCoordinates","CSS","freeze","Translate","transform","Math","round","Scale","scaleX","scaleY","Transform","join","Transition","_ref","property","easing","SELECTOR","findFirstFocusableNode","matches","querySelector","arrayMove","array","from","to","newArray","slice","splice","getSortedRects","items","rects","index","rect","get","isValidIndex","rectSortingStrategy","activeIndex","overIndex","newRects","oldRect","newRect","left","top","width","height","defaultScale$1","verticalListSortingStrategy","activeNodeRect","fallbackActiveRect","_rects$activeIndex","overIndexRect","itemGap","clientRects","currentRect","previousRect","nextRect","getItemGap$1","ID_PREFIX","Context","React","containerId","disableTransforms","useDragOverlay","sortedRects","strategy","disabled","draggable","droppable","SortableContext","children","userDefinedItems","disabledProp","active","dragOverlay","droppableRects","over","measureDroppableContainers","useDndContext","Boolean","map","item","isDragging","indexOf","previousItemsRef","itemsHaveChanged","a","b","i","itemsEqual","normalizeDisabled","contextValue","Provider","defaultNewIndexGetter","defaultAnimateLayoutChanges","_ref2","isSorting","wasDragging","newIndex","previousItems","previousContainerId","transition","defaultTransition","transitionProperty","disabledTransition","defaultAttributes","roleDescription","useSortable","animateLayoutChanges","attributes","userDefinedAttributes","localDisabled","data","customData","getNewIndex","localStrategy","resizeObserverConfig","globalDisabled","globalStrategy","useContext","_localDisabled$dragga","_localDisabled$droppa","normalizeLocalDisabled","sortable","itemsAfterCurrentSortable","isOver","setDroppableNodeRef","useDroppable","updateMeasurementsFor","activatorEvent","setDraggableNodeRef","listeners","setActivatorNodeRef","useDraggable","displaceItem","shouldDisplaceDragSource","dragSourceDisplacement","finalTransform","activeId","previous","shouldAnimateLayoutChanges","derivedTransform","setDerivedtransform","useState","previousIndex","initial","getClientRect","ignoreTransform","delta","useDerivedTransform","timeoutId","setTimeout","clearTimeout","getTransition","KeyboardCode","Down","Right","Up","Left","hiddenStyles","display","HiddenText","style","LiveRegion","announcement","ariaLiveType","position","margin","border","padding","overflow","clip","clipPath","whiteSpace","role","DndMonitorContext","createContext","defaultScreenReaderInstructions","defaultAnnouncements","onDragStart","onDragOver","onDragEnd","_ref3","onDragCancel","_ref4","Accessibility","announcements","container","hiddenTextDescribedById","screenReaderInstructions","announce","setAnnouncement","useAnnouncement","liveRegionId","mounted","setMounted","registerListener","Error","useDndMonitor","onDragMove","_ref5","_ref6","markup","createPortal","Action","noop","useSensor","sensor","options","useSensors","sensors","filter","defaultCoordinates","distanceBetween","p1","p2","sqrt","pow","sortCollisionsAsc","sortCollisionsDesc","centerOfRectangle","closestCenter","collisionRect","droppableContainers","centerRect","collisions","droppableContainer","distBetween","push","sort","getIntersectionRatio","entry","max","right","min","bottom","targetArea","entryArea","intersectionArea","Number","toFixed","rectIntersection","intersectionRatio","getRectDelta","rect1","rect2","createRectAdjustmentFn","acc","getAdjustedRect","parseTransform","startsWith","transformArray","split","defaultOptions","getBoundingClientRect","transformOrigin","getComputedStyle","parsedTransform","translateX","translateY","parseFloat","w","h","inverseTransform","getTransformAgnosticClientRect","getScrollableAncestors","limit","scrollParents","findScrollableAncestors","scrollingElement","includes","computedStyle","overflowRegex","some","test","isScrollable","isFixed","parentNode","getFirstScrollableAncestor","firstScrollableAncestor","getScrollableElement","getScrollXCoordinate","scrollX","scrollLeft","getScrollYCoordinate","scrollY","scrollTop","getScrollCoordinates","Direction","isDocumentScrollingElement","getScrollPosition","scrollingContainer","minScroll","dimensions","innerHeight","innerWidth","clientHeight","clientWidth","maxScroll","scrollWidth","scrollHeight","isTop","isLeft","isBottom","isRight","defaultThreshold","getScrollDirectionAndSpeed","scrollContainer","scrollContainerRect","acceleration","thresholdPercentage","direction","speed","threshold","Backward","abs","Forward","getScrollElementRect","getScrollOffsets","scrollableAncestors","scrollIntoViewIfNeeded","measure","scrollIntoView","block","inline","properties","Rect","constructor","scrollOffsets","this","axis","keys","getScrollOffset","defineProperty","currentOffsets","scrollOffsetsDeltla","enumerable","Listeners","removeAll","_this$target","removeEventListener","eventName","_this$target2","addEventListener","hasExceededDistance","measurement","dx","dy","EventName","preventDefault","stopPropagation","defaultKeyboardCodes","start","Space","Enter","cancel","Esc","end","Tab","defaultKeyboardCoordinateGetter","currentCoordinates","code","KeyboardSensor","props","autoScrollEnabled","referenceCoordinates","windowListeners","handleKeyDown","bind","handleCancel","attach","handleStart","Resize","VisibilityChange","Keydown","activeNode","onStart","context","keyboardCodes","coordinateGetter","scrollBehavior","handleEnd","newCoordinates","coordinatesDelta","scrollDelta","scrollElementRect","clampedCoordinates","canScrollX","canScrollY","newScrollCoordinates","canScrollToNewCoordinates","scrollTo","behavior","scrollBy","handleMove","coordinates","onMove","onEnd","detach","onCancel","isDistanceConstraint","constraint","isDelayConstraint","activators","onActivation","nativeEvent","activator","activatorNode","AbstractPointerSensor","events","listenerTarget","EventTarget","getEventListenerTarget","activated","initialCoordinates","documentListeners","_getEventCoordinates","handleKeydown","removeTextSelection","activationConstraint","bypassActivationConstraint","move","name","passive","DragStart","ContextMenu","delay","handlePending","offset","onPending","Click","capture","SelectionChange","_getEventCoordinates2","tolerance","distance","cancelable","onAbort","_this$document$getSel","getSelection","removeAllRanges","PointerSensor","super","isPrimary","button","events$1","MouseButton","RightClick","events$2","TouchSensor","setup","AutoScrollActivator","TraversalOrder","useAutoScroller","Pointer","canScroll","draggingRect","enabled","interval","order","TreeOrder","pointerCoordinates","scrollableAncestorRects","scrollIntent","previousDelta","previousIntent","defaultScrollIntent","sign","useScrollIntent","setAutoScrollInterval","clearAutoScrollInterval","scrollSpeed","scrollDirection","DraggableRect","scrollContainerRef","autoScroll","sortedScrollableAncestors","reverse","JSON","stringify","MeasuringStrategy","MeasuringFrequency","defaultValue","Map","useInitialValue","computeFn","previousValue","useResizeObserver","handleResize","resizeObserver","ResizeObserver","disconnect","defaultMeasure","useRect","fallbackRect","setRect","measureRect","isConnected","mutationObserver","handleMutations","MutationObserver","useMutationObserver","records","record","type","contains","observe","body","childList","subtree","defaultValue$1","useScrollOffsetsDelta","initialScrollOffsets","hasScrollOffsets","useWindowRect","getWindowClientRect","defaultValue$2","getMeasurableNode","firstChild","defaultSensors","defaultData","defaultMeasuringConfiguration","WhileDragging","frequency","Optimized","DroppableContainersMap","_super$get","undefined","toArray","values","getEnabled","getNodeFor","_this$get$node$curren","_this$get","defaultPublicContext","containerNodeRect","draggableNodes","nodeRef","setRef","measuringConfiguration","windowRect","measuringScheduled","defaultInternalContext","ariaDescribedById","dispatch","InternalContext","PublicContext","getInitialState","nodes","translate","containers","reducer","state","action","DragMove","DragEnd","DragCancel","RegisterDroppable","set","SetDroppableDisabled","UnregisterDroppable","delete","RestoreFocus","previousActivatorEvent","previousActiveId","activeElement","draggableNode","requestAnimationFrame","focusableNode","focus","applyModifiers","modifiers","_objectWithoutProperties","ActiveDraggableContext","Status","DndContext","memo","accessibility","collisionDetection","measuring","store","useReducer","dispatchMonitorEvent","registerMonitorListener","Set","_listener$type","useDndMonitorProvider","status","setStatus","Uninitialized","isInitialized","Initialized","activeRects","translated","_node$data","activeRef","activeSensor","setActiveSensor","setActivatorEvent","latestProps","draggableDescribedById","enabledDroppableContainers","config","dragging","queue","setQueue","containersRef","Always","BeforeDragging","isDisabled","disabledRef","concat","useDroppableMeasuring","cachedNode","useCachedNode","activationCoordinates","autoScrollOptions","activeSensorDisablesAutoscroll","autoScrollGloballyDisabled","getAutoScrollerOptions","initialActiveNodeRect","useInitialRect","initialRect","initialized","rectDelta","useLayoutShiftScrollCompensation","layoutShiftCompensation","parentElement","sensorContext","draggingNode","draggingNodeRect","scrollAdjustedTranslate","overNode","_sensorContext$curren","handleNodeChange","useDragOverlayMeasuring","_dragOverlay$nodeRef$","_dragOverlay$rect","usesDragOverlay","nodeRectDelta","previousNode","ancestors","useScrollableAncestors","elements","firstElement","setRects","measureRects","useRects","modifiedTranslate","overlayNodeRect","scrollCoordinates","setScrollCoordinates","prevElements","handleScroll","previousElements","cleanup","scrollableElement","useScrollOffsets","scrollAdjustment","activeNodeScrollDelta","overId","firstCollision","getFirstCollision","setOver","adjustScale","_over$rect","activeSensorRef","instantiateSensor","Sensor","sensorInstance","onDragAbort","onDragPending","unstable_batchedUpdates","Initializing","createHandler","async","cancelDrop","Promise","resolve","bindActivatorToSensorInstantiator","activeDraggableNode","dndKit","defaultPrevented","activationContext","capturedBy","getSyntheticHandler","useCombineActivators","teardownFns","teardown","useSensorSetup","overContainer","publicContext","internalContext","restoreFocus","NullContext","defaultRole","tabIndex","useSyntheticListeners","dataRef","ID_PREFIX$1","defaultResizeObserverConfig","timeout","resizeObserverConnected","callbackId","resizeObserverDisabled","resizeObserverTimeout","isArray","newElement","previousElement","unobserve"],"sourceRoot":""}