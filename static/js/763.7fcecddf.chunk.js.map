{"version":3,"file":"static/js/763.7fcecddf.chunk.js","mappings":"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","sources":["components/EmptyState.js","components/AddModal.js","components/ManagedSubjectSection.js","pages/ManageContentPage.js","../node_modules/@heroicons/react/24/outline/esm/ExclamationCircleIcon.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { motion } from 'framer-motion';\n\n/**\n * EmptyState Component\n * \n * A reusable component to display a friendly message when there's no content to show.\n * \n * @param {Object} props - Component props\n * @param {string} [props.title='No items found'] - The main title/message\n * @param {string} [props.description='There are no items to display at the moment.'] - Additional description text\n * @param {React.ReactNode} [props.icon] - Optional icon to display\n * @param {React.ReactNode} [props.action] - Optional call-to-action button or element\n * @param {string} [props.className=''] - Additional CSS classes\n * @returns {React.ReactElement} The EmptyState component\n */\nconst EmptyState = ({\n  title = 'No items found',\n  description = 'There are no items to display at the moment.',\n  icon,\n  action,\n  className = ''\n}) => {\n  return (\n    <motion.div \n      className={`flex flex-col items-center justify-center p-8 text-center ${className}`}\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.3 }}\n    >\n      {icon && <div className=\"mb-4 text-gray-400\">{icon}</div>}\n      <h3 className=\"text-lg font-medium text-gray-900 mb-2\">{title}</h3>\n      <p className=\"text-gray-500 mb-6 max-w-md\">{description}</p>\n      {action && <div className=\"mt-2\">{action}</div>}\n    </motion.div>\n  );\n};\n\nEmptyState.propTypes = {\n  title: PropTypes.string,\n  description: PropTypes.string,\n  icon: PropTypes.node,\n  action: PropTypes.node,\n  className: PropTypes.string,\n};\n\nexport default EmptyState;\n","// src/components/AddModal.js\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useHandlers } from '../context/HandlerContext';\nimport { AnimatePresence, motion } from 'framer-motion';\nimport { XMarkIcon, ExclamationCircleIcon } from '@heroicons/react/24/outline';\n\nconst EMPTY_INITIAL_STATE = {};\n\n// Validation function for different field types\nconst validateField = (field, value) => {\n    if (field.required && !value) {\n        return `${field.label} is required`;\n    }\n    \n    if (value) {\n        // Email validation\n        if (field.type === 'email' && !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(value)) {\n            return 'Please enter a valid email address';\n        }\n        \n        // URL validation\n        if (field.type === 'url' && !/^https?:\\/\\//.test(value)) {\n            return 'Please enter a valid URL starting with http:// or https://';\n        }\n        \n        // Number validation\n        if (field.type === 'number') {\n            const numValue = Number(value);\n            if (isNaN(numValue)) return 'Please enter a valid number';\n            if (field.min !== undefined && numValue < field.min) {\n                return `Must be at least ${field.min}`;\n            }\n            if (field.max !== undefined && numValue > field.max) {\n                return `Cannot exceed ${field.max}`;\n            }\n        }\n        \n        // Min length validation\n        if (field.minLength && value.length < field.minLength) {\n            return `Must be at least ${field.minLength} characters`;\n        }\n        \n        // Max length validation\n        if (field.maxLength && value.length > field.maxLength) {\n            return `Cannot exceed ${field.maxLength} characters`;\n        }\n        \n        // Custom validation function\n        if (field.validate && typeof field.validate === 'function') {\n            const customError = field.validate(value, field);\n            if (customError) return customError;\n        }\n    }\n    \n    return '';\n};\n\nconst AddModal = ({ isOpen, onClose, onSave, title, fields, initialState = EMPTY_INITIAL_STATE }) => {\n    const handlers = useHandlers();\n    const [formData, setFormData] = useState({});\n    const [touched, setTouched] = useState({});\n    const [errors, setErrors] = useState({});\n    const [isSubmitting, setIsSubmitting] = useState(false);\n\n    // Initialize form data when modal opens\n    useEffect(() => {\n        if (isOpen) {\n            const initialData = fields.reduce((acc, field) => {\n                acc[field.name] = initialState[field.name] ?? field.defaultValue ?? '';\n                return acc;\n            }, {});\n            setFormData(initialData);\n            setTouched({});\n            setErrors({});\n        } else {\n            setFormData({});\n            setTouched({});\n            setErrors({});\n        }\n    }, [isOpen, fields, initialState]);\n\n    // Validate form\n    const validateForm = useCallback(() => {\n        const newErrors = {};\n        let isValid = true;\n\n        fields.forEach(field => {\n            const error = validateField(field, formData[field.name] || '');\n            if (error) {\n                newErrors[field.name] = error;\n                isValid = false;\n            }\n        });\n\n        setErrors(newErrors);\n        return isValid;\n    }, [fields, formData]);\n\n    // Validate field on blur\n    const handleBlur = (field) => {\n        setTouched(prev => ({ ...prev, [field.name]: true }));\n        const error = validateField(field, formData[field.name] || '');\n        setErrors(prev => ({ ...prev, [field.name]: error }));\n    };\n\n    const handleChange = (e) => {\n        const { name, value, type, checked } = e.target;\n        const newValue = type === 'checkbox' ? checked : value;\n        \n        setFormData(prev => ({ ...prev, [name]: newValue }));\n        \n        // Clear error when user starts typing (if field was previously touched)\n        if (touched[name] && errors[name]) {\n            const error = validateField(\n                fields.find(f => f.name === name) || {},\n                newValue\n            );\n            setErrors(prev => ({ ...prev, [name]: error }));\n        }\n    };\n\n    const handleSaveClick = async () => {\n        // Mark all fields as touched to show all errors\n        const allTouched = fields.reduce((acc, field) => {\n            acc[field.name] = true;\n            return acc;\n        }, {});\n        setTouched(allTouched);\n        \n        // Validate all fields\n        const isValid = validateForm();\n        \n        if (!isValid) {\n            if (handlers.showNotification) {\n                handlers.showNotification('Please fix the errors in the form', 'error');\n            }\n            return;\n        }\n        \n        setIsSubmitting(true);\n        \n        try {\n            if (onSave) {\n                await onSave(formData);\n            } else if (handlers.addTimetableEntry) {\n                await handlers.addTimetableEntry(formData);\n            }\n            onClose();\n        } catch (error) {\n            console.error('Error saving form:', error);\n            if (handlers.showNotification) {\n                handlers.showNotification(\n                    error.message || 'Failed to save. Please try again.',\n                    'error'\n                );\n            }\n        } finally {\n            setIsSubmitting(false);\n        }\n    };\n\n    return (\n        <AnimatePresence>\n            {isOpen && (\n                <motion.div\n                    className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\"\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    exit={{ opacity: 0 }}\n                    transition={{ duration: 0.22 }}\n                    onClick={onClose}\n                >\n                    <div\n                        onClick={(e) => e.stopPropagation()}\n                        className=\"bg-white rounded-lg shadow-xl p-6 w-full max-w-md mx-auto relative\"\n                    >\n                        <h2 className=\"text-2xl font-bold mb-4 text-gray-800\">{title}</h2>\n                        <div className=\"space-y-4\">\n                            {fields.map(field => {\n                                const hasError = touched[field.name] && errors[field.name];\n                                const fieldValue = formData[field.name] || '';\n                                \n                                return (\n                                    <div key={field.name} className=\"flex flex-col\">\n                                        <div className=\"flex justify-between items-center mb-1\">\n                                            <label \n                                                htmlFor={field.name} \n                                                className=\"block text-sm font-medium text-gray-700\"\n                                            >\n                                                {field.label}\n                                                {field.required && <span className=\"text-red-500\">*</span>}\n                                            </label>\n                                            {field.helpText && (\n                                                <span className=\"text-xs text-gray-500\">\n                                                    {field.helpText}\n                                                </span>\n                                            )}\n                                        </div>\n                                        \n                                        {field.type === 'textarea' ? (\n                                            <div className=\"relative\">\n                                                <textarea\n                                                    id={field.name}\n                                                    name={field.name}\n                                                    placeholder={field.placeholder || ''}\n                                                    value={fieldValue}\n                                                    onChange={handleChange}\n                                                    onBlur={() => handleBlur(field)}\n                                                    disabled={field.disabled || false}\n                                                    rows={field.rows || 3}\n                                                    className={`w-full px-4 py-2 rounded-lg border ${\n                                                        hasError \n                                                            ? 'border-red-300 text-red-900 placeholder-red-300 focus:outline-none focus:ring-red-500 focus:border-red-500' \n                                                            : 'border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent'\n                                                    } bg-gray-50 disabled:bg-gray-100 disabled:text-gray-500 pr-10`}\n                                                    aria-invalid={hasError ? 'true' : 'false'}\n                                                    aria-describedby={`${field.name}-error`}\n                                                />\n                                                {hasError && (\n                                                    <div className=\"absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none\">\n                                                        <ExclamationCircleIcon className=\"h-5 w-5 text-red-500\" aria-hidden=\"true\" />\n                                                    </div>\n                                                )}\n                                            </div>\n                                        ) : field.type === 'select' ? (\n                                            <div className=\"relative\">\n                                                <select\n                                                    id={field.name}\n                                                    name={field.name}\n                                                    value={fieldValue}\n                                                    onChange={handleChange}\n                                                    onBlur={() => handleBlur(field)}\n                                                    disabled={field.disabled || false}\n                                                    className={`w-full px-4 py-2 rounded-lg border ${\n                                                        hasError \n                                                            ? 'border-red-300 text-red-900 focus:outline-none focus:ring-red-500 focus:border-red-500' \n                                                            : 'border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent'\n                                                    } bg-gray-50 disabled:bg-gray-100 disabled:text-gray-500 pr-10 appearance-none`}\n                                                    aria-invalid={hasError ? 'true' : 'false'}\n                                                    aria-describedby={`${field.name}-error`}\n                                                >\n                                                    {!fieldValue && (\n                                                        <option value=\"\">\n                                                            {field.placeholder || 'Select an option'}\n                                                        </option>\n                                                    )}\n                                                    {field.options && field.options.map(option => (\n                                                        <option key={option.value} value={option.value}>\n                                                            {option.label}\n                                                        </option>\n                                                    ))}\n                                                </select>\n                                                {hasError && (\n                                                    <div className=\"absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none\">\n                                                        <ExclamationCircleIcon className=\"h-5 w-5 text-red-500\" aria-hidden=\"true\" />\n                                                    </div>\n                                                )}\n                                                <div className=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                                                    <svg className=\"fill-current h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                                                        <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                                                    </svg>\n                                                </div>\n                                            </div>\n                                        ) : field.type === 'checkbox' ? (\n                                            <div className=\"relative flex items-start\">\n                                                <div className=\"flex items-center h-5\">\n                                                    <input\n                                                        id={field.name}\n                                                        name={field.name}\n                                                        type=\"checkbox\"\n                                                        checked={!!fieldValue}\n                                                        onChange={handleChange}\n                                                        onBlur={() => handleBlur(field)}\n                                                        disabled={field.disabled || false}\n                                                        className={`h-4 w-4 rounded ${\n                                                            hasError \n                                                                ? 'text-red-600 border-red-300 focus:ring-red-500' \n                                                                : 'text-blue-600 border-gray-300 focus:ring-blue-500'\n                                                        }`}\n                                                        aria-invalid={hasError ? 'true' : 'false'}\n                                                        aria-describedby={`${field.name}-error`}\n                                                    />\n                                                </div>\n                                                <div className=\"ml-3 text-sm\">\n                                                    <label htmlFor={field.name} className=\"font-medium text-gray-700\">\n                                                        {field.checkboxLabel || field.label}\n                                                        {field.required && <span className=\"text-red-500\">*</span>}\n                                                    </label>\n                                                    {field.checkboxDescription && (\n                                                        <p className=\"text-gray-500\">{field.checkboxDescription}</p>\n                                                    )}\n                                                </div>\n                                            </div>\n                                        ) : (\n                                            <div className=\"relative\">\n                                                <input\n                                                    type={field.type || 'text'}\n                                                    id={field.name}\n                                                    name={field.name}\n                                                    placeholder={field.placeholder || ''}\n                                                    value={fieldValue}\n                                                    onChange={handleChange}\n                                                    onBlur={() => handleBlur(field)}\n                                                    disabled={field.disabled || false}\n                                                    min={field.min}\n                                                    max={field.max}\n                                                    step={field.step}\n                                                    className={`w-full px-4 py-2 rounded-lg border ${\n                                                        hasError \n                                                            ? 'border-red-300 text-red-900 placeholder-red-300 focus:outline-none focus:ring-red-500 focus:border-red-500' \n                                                            : 'border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent'\n                                                    } bg-gray-50 disabled:bg-gray-100 disabled:text-gray-500 ${field.type === 'number' ? 'pr-12' : 'pr-10'}`}\n                                                    aria-invalid={hasError ? 'true' : 'false'}\n                                                    aria-describedby={`${field.name}-error`}\n                                                />\n                                                {hasError && (\n                                                    <div className=\"absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none\">\n                                                        <ExclamationCircleIcon className=\"h-5 w-5 text-red-500\" aria-hidden=\"true\" />\n                                                    </div>\n                                                )}\n                                                {field.type === 'number' && field.unit && !hasError && (\n                                                    <div className=\"absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none\">\n                                                        <span className=\"text-gray-500 text-sm\">{field.unit}</span>\n                                                    </div>\n                                                )}\n                                            </div>\n                                        )}\n                                        \n                                        {hasError && (\n                                            <p className=\"mt-1 text-sm text-red-600\" id={`${field.name}-error`}>\n                                                {errors[field.name]}\n                                            </p>\n                                        )}\n                                    </div>\n                                );\n                            })}\n                        </div>\n                        <div className=\"mt-6 flex justify-end space-x-3\">\n                            <button\n                                type=\"button\"\n                                onClick={onClose}\n                                className=\"px-4 py-2 bg-white border border-gray-300 text-gray-700 font-medium rounded-lg hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                                disabled={isSubmitting}\n                            >\n                                Cancel\n                            </button>\n                            <button\n                                type=\"button\"\n                                onClick={handleSaveClick}\n                                disabled={isSubmitting || Object.keys(errors).length > 0}\n                                className={`px-4 py-2 font-medium rounded-lg focus:outline-none focus:ring-2 focus:ring-offset-2 transition duration-300 ${\n                                    isSubmitting || Object.keys(errors).length > 0\n                                        ? 'bg-blue-400 text-white cursor-not-allowed'\n                                        : 'bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500'\n                                }`}\n                            >\n                                {isSubmitting ? (\n                                    <span className=\"flex items-center\">\n                                        <svg className=\"animate-spin -ml-1 mr-2 h-4 w-4 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                                            <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                                            <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                                        </svg>\n                                        Saving...\n                                    </span>\n                                ) : 'Save'}\n                            </button>\n                        </div>\n                    </div>\n                </motion.div>\n            )}\n        </AnimatePresence>\n    );\n};\n\nexport default AddModal;","// src/components/ManagedSubjectSection.js\r\nimport React from 'react';\r\n\r\nconst ManagedSubjectSection = React.memo(({ subjectName, tests, onDeleteSubject, onDeleteTest, isExpanded, onToggleExpand }) => {\r\n    return (\r\n        <div className=\"bg-white p-3 rounded-lg border border-gray-200 shadow-sm\">\r\n            <div\r\n                className=\"flex justify-between items-center mb-3 cursor-pointer\"\r\n                onClick={() => onToggleExpand(subjectName)}\r\n            >\r\n                <h3 className=\"font-bold text-lg text-gray-800\">{subjectName}</h3>\r\n                <div className=\"flex items-center\">\r\n                    <button\r\n                        onClick={(e) => { e.stopPropagation(); onDeleteSubject(subjectName); }}\r\n                        className=\"p-1.5 rounded-full text-gray-400 hover:text-red-500 transition-colors duration-200 mr-2\"\r\n                        aria-label=\"Delete subject\"\r\n                    >\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><path d=\"M3 6h18\"></path><path d=\"M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6\"></path><path d=\"M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2\"></path><line x1=\"10\" y1=\"11\" x2=\"10\" y2=\"17\"></line><line x1=\"14\" y1=\"11\" x2=\"14\" y2=\"17\"></line></svg>\r\n                    </button>\r\n                    <svg\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                        className={`h-5 w-5 text-gray-500 transform transition-transform duration-200 ${isExpanded ? 'rotate-180' : ''}`}\r\n                        fill=\"none\"\r\n                        viewBox=\"0 0 24 24\"\r\n                        stroke=\"currentColor\"\r\n                    >\r\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\r\n                    </svg>\r\n                </div>\r\n            </div>\r\n            {isExpanded && (\r\n                <div className=\"space-y-2 pt-2 border-t border-gray-100\">\r\n                    {tests.length === 0 ? (\r\n                        <p className=\"text-gray-500 text-sm italic\">No tests in this subject.</p>\r\n                    ) : (\r\n                        tests.map(test => (\r\n                            <div key={test.title} className=\"flex justify-between items-center bg-gray-50 p-3 rounded-md border border-gray-200 text-sm\">\r\n                                <span>{test.title} ({test.mcqs} MCQs, {test.date})</span>\r\n                                <button\r\n                                    onClick={(e) => { e.stopPropagation(); onDeleteTest(subjectName, test.title); }}\r\n                                    className=\"p-1.5 rounded-full text-gray-400 hover:text-red-500 transition-colors duration-200 ml-2\"\r\n                                    aria-label=\"Delete test\"\r\n                                >\r\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><path d=\"M3 6h18\"></path><path d=\"M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6\"></path><path d=\"M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2\"></path><line x1=\"10\" y1=\"11\" x2=\"10\" y2=\"17\"></line><line x1=\"14\" y1=\"11\" x2=\"14\" y2=\"17\"></line></svg>\r\n                                </button>\r\n                            </div>\r\n                        ))\r\n                    )}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default ManagedSubjectSection;","// src/pages/ManageContentPage.js\nimport React, { useState, useCallback, useMemo } from 'react';\nimport { useTestData } from '../context/TestDataContext'; // Only testData is in this context now\nimport ManagedSubjectSection from '../components/ManagedSubjectSection';\nimport { useHandlers } from '../context/HandlerContext';\nimport AddModal from '../components/AddModal'; // Import the new modal\nimport EmptyState from '../components/EmptyState';\n\nconst ManageContentPage = React.memo(({ onBackToProfile, showNotification }) => {\n    const { testData } = useTestData();\n    const handlers = useHandlers();\n    const [expandedSubjects, setExpandedSubjects] = useState({});\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [modalConfig, setModalConfig] = useState({ title: '', fields: [], onSave: () => {} });\n\n    const subjects = useMemo(() => Object.keys(testData), [testData]);\n\n    const handleToggleExpand = useCallback((subjectName) => {\n        setExpandedSubjects(prev => ({\n            ...prev,\n            [subjectName]: !prev[subjectName]\n        }));\n    }, []);\n\n    const handleDeleteSubject = React.useCallback((subjectName) => {\n        handlers.deleteSubject(subjectName);\n    }, [handlers]);\n\n    const handleDeleteTest = React.useCallback((subject, title) => {\n        handlers.deleteTest(subject, title);\n    }, [handlers]);\n\n    // Memoized onSave functions for modal configs\n    const handleAddSubjectSave = useCallback((data) => {\n        handlers.addSubject(data.subjectName);\n        setExpandedSubjects(prev => ({ ...prev, [data.subjectName]: true }));\n    }, [handlers]);\n\n    const handleAddTestSave = useCallback((data) => {\n        handlers.addTest(data.subject, data.title, data.mcqs, data.date, data.link);\n        setExpandedSubjects(prev => ({ ...prev, [data.subject]: true }));\n    }, [handlers]);\n\n    // Memoized modal openers\n    const openAddSubjectModal = useCallback(() => {\n        setModalConfig({\n            title: 'Add New Subject',\n            fields: [\n                { name: 'subjectName', label: 'Subject Name', placeholder: 'e.g., Biochemistry', required: true }\n            ],\n            onSave: handleAddSubjectSave\n        });\n        setIsModalOpen(true);\n    }, [handleAddSubjectSave]);\n\n    const openAddTestModal = useCallback(() => {\n        setModalConfig({\n            title: 'Add New Test',\n            fields: [\n                {\n                    name: 'subject',\n                    label: 'Select Subject',\n                    type: 'select',\n                    required: true,\n                    options: subjects.map(s => ({ value: s, label: s })),\n                    defaultValue: subjects[0] || ''\n                },\n                { name: 'title', label: 'Test Title', placeholder: 'e.g., Final Exam', required: true },\n                { name: 'mcqs', label: 'Number of MCQs', type: 'number', placeholder: 'e.g., 50', required: true },\n                { name: 'date', label: 'Date', type: 'date', required: true },\n                { name: 'link', label: 'Test Link (Optional)', type: 'url', placeholder: 'https://example.com/test' }\n            ],\n            onSave: handleAddTestSave\n        });\n        setIsModalOpen(true);\n    }, [handleAddTestSave, subjects]);\n\n    return (\n        // All subject/test handlers now come from context\n        <>\n            <div id=\"page-manage-tests\" className=\"page px-6 py-8\">\n                <header className=\"flex items-center justify-between mb-6\">\n                    <h1 className=\"text-3xl font-bold text-gray-900\">Manage Content</h1>\n                    <button onClick={onBackToProfile} className=\"text-blue-600 hover:text-blue-800 text-sm font-medium\">Done</button>\n                </header>\n\n                <div className=\"space-y-4 mb-6\">\n                    <button\n                        onClick={openAddSubjectModal}\n                        className=\"w-full bg-green-50 text-green-700 font-semibold py-2 px-4 rounded-lg flex items-center justify-center hover:bg-green-100 transition duration-300\"\n                    >\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"mr-2\"><line x1=\"12\" y1=\"5\" x2=\"12\" y2=\"19\"></line><line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\"></line></svg>\n                        Add New Subject\n                    </button>\n\n                    <button\n                        onClick={openAddTestModal}\n                        className=\"w-full bg-blue-50 text-blue-700 font-semibold py-2 px-4 rounded-lg flex items-center justify-center hover:bg-blue-100 transition duration-300\"\n                        disabled={subjects.length === 0}\n                    >\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"mr-2\"><line x1=\"12\" y1=\"5\" x2=\"12\" y2=\"19\"></line><line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\"></line></svg>\n                        Add New Test\n                    </button>\n                </div>\n\n                <h2 className=\"text-xl font-bold text-gray-800 mb-4\">Existing Content</h2>\n                <div id=\"manage-content-list\" className=\"space-y-4\">\n                    {subjects.length === 0 ? (\n                        <EmptyState\n                            title=\"No subjects found\"\n                            description=\"You haven't added any subjects yet. Create your first subject to start organizing your study materials.\"\n                            icon={\n                                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"48\" height=\"48\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"text-gray-300\">\n                                    <path d=\"M4 19.5A2.5 2.5 0 0 1 6.5 17H20\"></path>\n                                    <path d=\"M6.5 2H20v20H6.5A2.5 2.5 0 0 1 4 19.5v-15A2.5 2.5 0 0 1 6.5 2z\"></path>\n                                    <path d=\"M10 10h4\"></path>\n                                    <path d=\"M12 8v4\"></path>\n                                </svg>\n                            }\n                            action={\n                                <button\n                                    onClick={openAddSubjectModal}\n                                    className=\"mt-4 inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition-colors duration-200\"\n                                >\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 mr-2\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                                        <path fillRule=\"evenodd\" d=\"M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z\" clipRule=\"evenodd\" />\n                                    </svg>\n                                    Create Your First Subject\n                                </button>\n                            }\n                        />\n                    ) : (\n                        subjects.map(subject => (\n                            <ManagedSubjectSection\n                                key={subject}\n                                subjectName={subject}\n                                tests={testData[subject]}\n                                onDeleteSubject={handleDeleteSubject}\n                                onDeleteTest={handleDeleteTest}\n                                isExpanded={expandedSubjects[subject]}\n                                onToggleExpand={handleToggleExpand}\n                            />\n                        ))\n                    )}\n                </div>\n            </div>\n\n            <AddModal\n                isOpen={isModalOpen}\n                onClose={() => setIsModalOpen(false)}\n                onSave={modalConfig.onSave}\n                title={modalConfig.title}\n                fields={modalConfig.fields}\n                showNotification={showNotification}\n            />\n        </>\n    );\n});\n\nexport default ManageContentPage;\n","import * as React from \"react\";\nfunction ExclamationCircleIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M12 9v3.75m9-.75a9 9 0 1 1-18 0 9 9 0 0 1 18 0Zm-9 3.75h.008v.008H12v-.008Z\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(ExclamationCircleIcon);\nexport default ForwardRef;"],"names":["_ref","title","description","icon","action","className","_jsxs","motion","div","concat","initial","opacity","y","animate","transition","duration","children","_jsx","EMPTY_INITIAL_STATE","validateField","field","value","required","label","type","test","numValue","Number","isNaN","undefined","min","max","minLength","length","maxLength","validate","customError","isOpen","onClose","onSave","fields","initialState","handlers","useHandlers","formData","setFormData","useState","touched","setTouched","errors","setErrors","isSubmitting","setIsSubmitting","useEffect","initialData","reduce","acc","_ref2","_initialState$field$n","name","defaultValue","validateForm","useCallback","newErrors","isValid","forEach","error","handleBlur","prev","_objectSpread","handleChange","e","checked","target","newValue","find","f","AnimatePresence","exit","onClick","stopPropagation","map","hasError","fieldValue","htmlFor","helpText","id","placeholder","onChange","onBlur","disabled","rows","ExclamationCircleIcon","options","option","xmlns","viewBox","d","checkboxLabel","checkboxDescription","step","unit","async","allTouched","addTimetableEntry","console","showNotification","message","Object","keys","fill","cx","cy","r","stroke","strokeWidth","React","subjectName","tests","onDeleteSubject","onDeleteTest","isExpanded","onToggleExpand","width","height","strokeLinecap","strokeLinejoin","x1","y1","x2","y2","mcqs","date","onBackToProfile","testData","useTestData","expandedSubjects","setExpandedSubjects","isModalOpen","setIsModalOpen","modalConfig","setModalConfig","subjects","useMemo","handleToggleExpand","handleDeleteSubject","deleteSubject","handleDeleteTest","subject","deleteTest","handleAddSubjectSave","data","addSubject","handleAddTestSave","addTest","link","openAddSubjectModal","openAddTestModal","s","_Fragment","EmptyState","fillRule","clipRule","ManagedSubjectSection","AddModal","svgRef","titleId","props","_objectWithoutProperties","_excluded","assign","ref"],"sourceRoot":""}