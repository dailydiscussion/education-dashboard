{"version":3,"file":"static/js/244.98a52727.chunk.js","mappings":"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","sources":["components/EmptyState.js","components/TestCard.js","pages/TestsCompletedPage.js","components/AddModal.js","../node_modules/@heroicons/react/24/outline/esm/ExclamationCircleIcon.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { motion } from 'framer-motion';\n\n/**\n * EmptyState Component\n * \n * A reusable component to display a friendly message when there's no content to show.\n * \n * @param {Object} props - Component props\n * @param {string} [props.title='No items found'] - The main title/message\n * @param {string} [props.description='There are no items to display at the moment.'] - Additional description text\n * @param {React.ReactNode} [props.icon] - Optional icon to display\n * @param {React.ReactNode} [props.action] - Optional call-to-action button or element\n * @param {string} [props.className=''] - Additional CSS classes\n * @returns {React.ReactElement} The EmptyState component\n */\nconst EmptyState = ({\n  title = 'No items found',\n  description = 'There are no items to display at the moment.',\n  icon,\n  action,\n  className = ''\n}) => {\n  return (\n    <motion.div \n      className={`flex flex-col items-center justify-center p-8 text-center ${className}`}\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.3 }}\n    >\n      {icon && <div className=\"mb-4 text-gray-400\">{icon}</div>}\n      <h3 className=\"text-lg font-medium text-gray-900 mb-2\">{title}</h3>\n      <p className=\"text-gray-500 mb-6 max-w-md\">{description}</p>\n      {action && <div className=\"mt-2\">{action}</div>}\n    </motion.div>\n  );\n};\n\nEmptyState.propTypes = {\n  title: PropTypes.string,\n  description: PropTypes.string,\n  icon: PropTypes.node,\n  action: PropTypes.node,\n  className: PropTypes.string,\n};\n\nexport default EmptyState;\n","/**\n * @file TestCard.js\n * @description A card component that displays test information with interactive features.\n * It shows test details, handles completion toggling, and can open test links in a new tab.\n * \n * @module components/TestCard\n * @requires react\n * @requires framer-motion\n * @requires ../context/HandlerContext\n */\n\nimport React from 'react';\nimport { useHandlers } from '../context/HandlerContext';\nimport { motion } from 'framer-motion';\n\n/**\n * @typedef {Object} Test\n * @property {string} title - The title of the test\n * @property {string} [link] - Optional URL to the test (must start with http:// or https://)\n * @property {boolean} [completed=false] - Whether the test has been marked as completed\n * @property {string} [date] - Optional date of the test\n * @property {string} [notes] - Optional notes about the test\n */\n\n/**\n * TestCard Component\n * \n * @component\n * @param {Object} props - Component props\n * @param {Test} props.test - The test data to display\n * @param {string} props.subject - The subject this test belongs to\n * @param {boolean} [props.isEditMode=false] - Whether the card is in edit mode\n * @param {Function} [props.onDelete] - Callback function when delete button is clicked\n * @returns {React.ReactElement} A card element displaying test information\n * \n * @example\n * <TestCard \n *   test={{\n *     title: 'Chapter 1 Quiz',\n *     link: 'https://example.com/quiz',\n *     completed: false\n *   }}\n *   subject=\"Mathematics\"\n *   isEditMode={false}\n *   onDelete={() => console.log('Delete test')}\n * />\n */\nconst TestCard = React.memo(({ test, subject, isEditMode = false, onDelete }) => {\n    const handlers = useHandlers();\n    /**\n     * Handles the card click event to open the test link in a new tab.\n     * Only activates if not in edit mode and if the link is valid.\n     * \n     * @private\n     */\n    const handleCardClick = () => {\n        // Allow clicking the card to open a link only if not in edit mode\n        if (!isEditMode && test.link && test.link.startsWith('http')) {\n            window.open(test.link, '_blank');\n        } else if (test.link) {\n            // Log a warning for developers if the link is malformed\n            console.warn(`Invalid link for ${test.title}: ${test.link}. Must start with http:// or https://`);\n        }\n    };\n\n    /**\n     * Handles the checkbox click to toggle the test's completion status.\n     * Stops event propagation to prevent triggering the card's click handler.\n     * \n     * @private\n     * @param {React.MouseEvent} e - The click event\n     */\n    const handleCheckboxClick = (e) => {\n        // Prevent the card's click event from firing when the checkbox is clicked\n        e.stopPropagation();\n        handlers.toggleTestCompletion(subject, test.title, !test.completed);\n    };\n\n    // Define base classes for the card for consistency\n    const baseCardClasses = 'relative p-4 rounded-lg flex justify-between items-center transition-all duration-300';\n    \n    // Define specific classes for the completed state\n    const completedClasses = 'bg-green-100';\n    \n    // Define specific classes for the default (incomplete) state\n    const defaultClasses = 'bg-gray-50';\n    \n    // Add hover effects only if the card has a link and is not in edit mode\n    const linkClasses = test.link && !isEditMode ? 'cursor-pointer hover:shadow-md hover:-translate-y-1' : '';\n\n    /**\n     * Combined CSS classes for the card element\n     * @type {string}\n     * @private\n     */\n    const cardClasses = `${baseCardClasses} ${test.completed ? completedClasses : defaultClasses} ${linkClasses}`;\n\n    return (\n        <div\n            id={`trophy-test-item-${subject}-${test.title}`}\n            className={cardClasses}\n            onClick={handleCardClick}\n        >\n            <div className=\"flex items-center flex-grow min-w-0\">\n                {/* The interactive checkbox for toggling completion status */}\n                <motion.button\n                    onClick={handleCheckboxClick}\n                    className={`flex-shrink-0 w-6 h-6 rounded-full border-2 flex items-center justify-center mr-4`}\n                    aria-label={test.completed ? \"Mark as incomplete\" : \"Mark as complete\"}\n                    whileTap={{ scale: 0.85 }}\n                    animate={{\n                        scale: test.completed ? 1.1 : 1,\n                        backgroundColor: test.completed ? '#22c55e' : '#ffffff00',\n                        borderColor: test.completed ? '#22c55e' : '#d1d5db'\n                    }}\n                    transition={{ type: 'spring', stiffness: 400, damping: 15 }}\n                >\n                    {test.completed && (\n                        <motion.svg \n                            initial={{ scale: 0, rotate: -90 }}\n                            animate={{ scale: 1, rotate: 0 }}\n                            transition={{ type: 'spring', stiffness: 500, damping: 20 }}\n                            xmlns=\"http://www.w3.org/2000/svg\" \n                            className=\"h-4 w-4 text-white\" \n                            fill=\"none\" \n                            viewBox=\"0 0 24 24\" \n                            stroke=\"currentColor\"\n                        >\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={3} d=\"M5 13l4 4L19 7\" />\n                        </motion.svg>\n                    )}\n                </motion.button>\n                \n                {/* Text content with conditional styling for better readability */}\n                <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-center gap-2\">\n                        <h4 className={`font-semibold truncate ${test.completed ? 'text-gray-800' : 'text-gray-900'}`}>{test.title}</h4>\n                    </div>\n                    <p className={`text-sm mt-1 ${test.completed ? 'text-gray-600' : 'text-gray-600'}`}>{test.mcqs} MCQs</p>\n                    \n                </div>\n            </div>\n            \n            {/* Controls for editing and navigation */}\n            <div className=\"flex-shrink-0 ml-2\">\n                {isEditMode ? (\n                    <button\n                        className=\"p-1.5 rounded-full text-gray-400 hover:text-red-500 hover:bg-red-100 transition-colors duration-200\"\n                        onClick={(e) => { e.stopPropagation(); onDelete(subject, test.title); }}\n                        aria-label=\"Delete test\"\n                    >\n                         <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><path d=\"M3 6h18\"></path><path d=\"M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6\"></path><path d=\"M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2\"></path><line x1=\"10\" y1=\"11\" x2=\"10\" y2=\"17\"></line><line x1=\"14\" y1=\"11\" x2=\"14\" y2=\"17\"></line></svg>\n                    </button>\n                ) : (\n                    test.link && <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"text-gray-400\"><polyline points=\"9 18 15 12 9 6\"></polyline></svg>\n                )}\n            </div>\n        </div>\n    );\n});\n\nexport default TestCard;","\n// src/pages/TestsCompletedPage.js\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { useTestData } from '../context/TestDataContext'; // Only testData is in this context now\nimport TestCard from '../components/TestCard';\nimport EmptyState from '../components/EmptyState';\n\nimport { useHandlers } from '../context/HandlerContext';\nimport AddModal from '../components/AddModal'; // Import the new modal\n\nconst TestsCompletedPage = React.memo(({ currentSelectedSubject, setCurrentSelectedSubject, showNotification }) => {\n    const { testData } = useTestData();\n    const handlers = useHandlers();\n    const [trophyEditMode, setTrophyEditMode] = useState(false);\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [searchQuery, setSearchQuery] = useState('');\n    const [isSearching, setIsSearching] = useState(false);\n    const [searchError, setSearchError] = useState('');\n\n    const subjects = useMemo(() => Object.keys(testData), [testData]);\n\n    useEffect(() => {\n        if (subjects.length > 0 && (!currentSelectedSubject || !subjects.includes(currentSelectedSubject))) {\n            setCurrentSelectedSubject(subjects[0]);\n        } else if (subjects.length === 0 && currentSelectedSubject !== '') {\n            setCurrentSelectedSubject('');\n        }\n    }, [subjects, currentSelectedSubject, setCurrentSelectedSubject]);\n\n    const openAddTestModal = React.useCallback(() => {\n        setIsModalOpen(true);\n    }, []);\n\n    const handleCloseModal = React.useCallback(() => {\n        setIsModalOpen(false);\n    }, []);\n\n    const handleToggleEditMode = React.useCallback(() => {\n        setTrophyEditMode(prev => !prev);\n    }, []);\n\n    const handleSelectSubject = React.useCallback((subject) => {\n        setCurrentSelectedSubject(subject);\n    }, [setCurrentSelectedSubject]);\n\n    const handleSearchChange = React.useCallback((e) => {\n        const value = e.target.value;\n        setSearchQuery(value);\n        \n        // Clear any previous errors\n        if (searchError) setSearchError('');\n        \n        // Show loading state if query is long enough\n        if (value.trim().length >= 2) {\n            setIsSearching(true);\n            // Simulate search delay\n            const timer = setTimeout(() => {\n                setIsSearching(false);\n            }, 300);\n            return () => clearTimeout(timer);\n        } else if (value.trim().length > 0) {\n            setSearchError('Please enter at least 2 characters');\n        }\n    }, [searchError]);\n\n    const handleSaveTest = (data) => {\n        handlers.addTest(currentSelectedSubject, data.title, data.mcqs, data.date, data.link);\n    };\n\n    const handleDeleteTest = React.useCallback((subject, title) => {\n        handlers.deleteTest(subject, title);\n    }, [handlers]);\n\n    const handleToggleTestCompletion = React.useCallback((id) => {\n        handlers.toggleTestCompletion(id);\n    }, [handlers]);\n\n    const modalFields = [\n        { name: 'title', label: 'Test Title', placeholder: 'e.g., Mid-term Exam', required: true },\n        { name: 'mcqs', label: 'Number of MCQs', type: 'number', placeholder: 'e.g., 40', required: true },\n        { name: 'date', label: 'Completion Date', type: 'date', required: true },\n        { name: 'link', label: 'Test Link (Optional)', type: 'url', placeholder: 'https://example.com/test' }\n    ];\n\n    // Global search: if searchQuery is long enough, search all subjects\n    const hasSearchQuery = searchQuery.trim().length >= 2;\n    const filteredTests = hasSearchQuery\n        ? Object.entries(testData).flatMap(([subject, tests]) =>\n            tests.filter(test =>\n                test.title.toLowerCase().includes(searchQuery.toLowerCase())\n            ).map(test => ({ ...test, subject }))\n        )\n        : (currentSelectedSubject && testData[currentSelectedSubject]\n            ? testData[currentSelectedSubject].map(test => ({ ...test, subject: currentSelectedSubject }))\n            : []\n        );\n\n    return (\n        <>\n            <div id=\"page-trophy\" className=\"page px-6 py-8\">\n                <header className=\"flex items-center justify-between mb-2\">\n                    <h1 className=\"text-3xl font-bold text-gray-900\">Tests</h1>\n                    <button\n                        onClick={handleToggleEditMode}\n                        className=\"bg-blue-50 text-blue-700 font-semibold text-xs px-4 py-2 rounded-full flex items-center hover:bg-blue-100 transition duration-200\"\n                        aria-label={trophyEditMode ? 'Done editing tests' : 'Edit tests'}\n                    >\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"mr-1\"><path d=\"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\"></path><path d=\"M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z\"></path></svg>\n                        {trophyEditMode ? 'Done' : 'Edit'}\n                    </button>\n                </header>\n                <p className=\"text-gray-500 mb-6\">Completed Tests & Progress</p>\n\n                <div className=\"mb-6 relative\">\n                    <div className=\"relative\">\n                        <input\n                            type=\"text\"\n                            placeholder=\"Search tests by title or subject...\"\n                            className={`w-full pl-10 pr-10 py-2 rounded-lg border ${\n                                searchError ? 'border-red-400' : 'border-gray-300'\n                            } focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white transition-colors duration-200`}\n                            value={searchQuery}\n                            onChange={handleSearchChange}\n                            aria-label=\"Search tests\"\n                            aria-invalid={!!searchError}\n                            aria-describedby={searchError ? 'search-error' : undefined}\n                        />\n                        <div className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\">\n                            {isSearching ? (\n                                <svg className=\"animate-spin h-4 w-4 text-blue-500\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                                    <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                                    <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                                </svg>\n                            ) : (\n                                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" />\n                                </svg>\n                            )}\n                        </div>\n                        {searchQuery && (\n                            <button\n                                onClick={() => {\n                                    setSearchQuery('');\n                                    setSearchError('');\n                                }}\n                                className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600 focus:outline-none\"\n                                aria-label=\"Clear search\"\n                            >\n                                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                                </svg>\n                            </button>\n                        )}\n                    </div>\n                    <div className=\"flex justify-between mt-1 px-1\">\n                        {searchError ? (\n                            <p id=\"search-error\" className=\"text-xs text-red-500\">{searchError}</p>\n                        ) : searchQuery ? (\n                            <p className=\"text-xs text-gray-500\">\n                                {searchQuery.length}/50 characters • {filteredTests.length} result{filteredTests.length !== 1 ? 's' : ''} found\n                            </p>\n                        ) : (\n                            <p className=\"text-xs text-gray-400\">Type at least 2 characters to search</p>\n                        )}\n                    </div>\n                </div>\n\n                {/* Hide subject selector and add button during search */}\n                {!hasSearchQuery && (\n                    <>\n                        <div className=\"flex space-x-3 mb-6 overflow-x-auto hide-scrollbar\" id=\"subject-filters-container\">\n                            {subjects.map(subject => (\n                                <button\n                                    key={subject}\n                                    className={`subject-filter flex-shrink-0 text-left p-3 rounded-lg transition-colors duration-200\n                                        ${currentSelectedSubject === subject ? 'bg-blue-600 text-white' : 'bg-gray-100 text-gray-700 hover:bg-gray-200'}`}\n                                    onClick={() => handleSelectSubject(subject)}\n                                >\n                                    <p className=\"font-bold\">{subject}</p>\n                                    <p className={`text-sm ${currentSelectedSubject === subject ? 'opacity-80' : 'text-gray-500'}`}>\n                                        {testData[subject]?.length || 0} Test{testData[subject]?.length === 1 ? '' : 's'}\n                                    </p>\n                                </button>\n                            ))}\n                        </div>\n                        <button\n                            onClick={openAddTestModal}\n                            className=\"w-full bg-blue-50 text-blue-700 font-semibold py-2 px-4 rounded-lg flex items-center justify-center hover:bg-blue-100 transition duration-300 mb-6\"\n                            disabled={!currentSelectedSubject}\n                        >\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"mr-2\"><line x1=\"12\" y1=\"5\" x2=\"12\" y2=\"19\"></line><line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\"></line></svg>\n                            {`Add New Test to ${currentSelectedSubject || '...'}`}\n                        </button>\n                    </>\n                )}\n\n                <div id=\"test-list-container\" className=\"space-y-3\">\n                    {filteredTests.length === 0 ? (\n                        <EmptyState\n                            title={hasSearchQuery ? 'No tests found' : 'No tests available'}\n                            description={\n                                hasSearchQuery \n                                    ? 'No tests match your search. Try different keywords or check your spelling.'\n                                    : currentSelectedSubject \n                                        ? `No tests found for ${currentSelectedSubject}. Add your first test!`\n                                        : 'Select a subject to view or add tests.'\n                            }\n                            icon={\n                                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"48\" height=\"48\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"text-gray-300\">\n                                    <path d=\"M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z\"></path>\n                                    <polyline points=\"14 2 14 8 20 8\"></polyline>\n                                    <line x1=\"16\" y1=\"13\" x2=\"8\" y2=\"13\"></line>\n                                    <line x1=\"16\" y1=\"17\" x2=\"8\" y2=\"17\"></line>\n                                    <polyline points=\"10 9 8 9 8 13\"></polyline>\n                                </svg>\n                            }\n                            action={\n                                !isSearching && currentSelectedSubject && (\n                                    <button\n                                        onClick={openAddTestModal}\n                                        className=\"mt-4 inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200\"\n                                    >\n                                        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 mr-2\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                                            <path fillRule=\"evenodd\" d=\"M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z\" clipRule=\"evenodd\" />\n                                        </svg>\n                                        Add Your First Test\n                                    </button>\n                                )\n                            }\n                        />\n                    ) : (\n                        filteredTests.map(test => (\n                            <TestCard\n                                key={test.subject + '-' + test.title}\n                                test={test}\n                                subject={test.subject}\n                                isEditMode={trophyEditMode}\n                                onDelete={handleDeleteTest}\n                                handleToggleTestCompletion={handleToggleTestCompletion}\n                            />\n                        ))\n                    )}\n                </div>\n            </div>\n            <AddModal\n                isOpen={isModalOpen}\n                onClose={handleCloseModal}\n                onSave={handleSaveTest}\n                title={`Add New Test to ${currentSelectedSubject}`}\n                fields={modalFields}\n                showNotification={showNotification}\n            />\n        </>\n    );\n});\n\nexport default TestsCompletedPage;","// src/components/AddModal.js\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useHandlers } from '../context/HandlerContext';\nimport { AnimatePresence, motion } from 'framer-motion';\nimport { XMarkIcon, ExclamationCircleIcon } from '@heroicons/react/24/outline';\n\nconst EMPTY_INITIAL_STATE = {};\n\n// Validation function for different field types\nconst validateField = (field, value) => {\n    if (field.required && !value) {\n        return `${field.label} is required`;\n    }\n    \n    if (value) {\n        // Email validation\n        if (field.type === 'email' && !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(value)) {\n            return 'Please enter a valid email address';\n        }\n        \n        // URL validation\n        if (field.type === 'url' && !/^https?:\\/\\//.test(value)) {\n            return 'Please enter a valid URL starting with http:// or https://';\n        }\n        \n        // Number validation\n        if (field.type === 'number') {\n            const numValue = Number(value);\n            if (isNaN(numValue)) return 'Please enter a valid number';\n            if (field.min !== undefined && numValue < field.min) {\n                return `Must be at least ${field.min}`;\n            }\n            if (field.max !== undefined && numValue > field.max) {\n                return `Cannot exceed ${field.max}`;\n            }\n        }\n        \n        // Min length validation\n        if (field.minLength && value.length < field.minLength) {\n            return `Must be at least ${field.minLength} characters`;\n        }\n        \n        // Max length validation\n        if (field.maxLength && value.length > field.maxLength) {\n            return `Cannot exceed ${field.maxLength} characters`;\n        }\n        \n        // Custom validation function\n        if (field.validate && typeof field.validate === 'function') {\n            const customError = field.validate(value, field);\n            if (customError) return customError;\n        }\n    }\n    \n    return '';\n};\n\nconst AddModal = ({ isOpen, onClose, onSave, title, fields, initialState = EMPTY_INITIAL_STATE }) => {\n    const handlers = useHandlers();\n    const [formData, setFormData] = useState({});\n    const [touched, setTouched] = useState({});\n    const [errors, setErrors] = useState({});\n    const [isSubmitting, setIsSubmitting] = useState(false);\n\n    // Initialize form data when modal opens\n    useEffect(() => {\n        if (isOpen) {\n            const initialData = fields.reduce((acc, field) => {\n                acc[field.name] = initialState[field.name] ?? field.defaultValue ?? '';\n                return acc;\n            }, {});\n            setFormData(initialData);\n            setTouched({});\n            setErrors({});\n        } else {\n            setFormData({});\n            setTouched({});\n            setErrors({});\n        }\n    }, [isOpen, fields, initialState]);\n\n    // Validate form\n    const validateForm = useCallback(() => {\n        const newErrors = {};\n        let isValid = true;\n\n        fields.forEach(field => {\n            const error = validateField(field, formData[field.name] || '');\n            if (error) {\n                newErrors[field.name] = error;\n                isValid = false;\n            }\n        });\n\n        setErrors(newErrors);\n        return isValid;\n    }, [fields, formData]);\n\n    // Validate field on blur\n    const handleBlur = (field) => {\n        setTouched(prev => ({ ...prev, [field.name]: true }));\n        const error = validateField(field, formData[field.name] || '');\n        setErrors(prev => ({ ...prev, [field.name]: error }));\n    };\n\n    const handleChange = (e) => {\n        const { name, value, type, checked } = e.target;\n        const newValue = type === 'checkbox' ? checked : value;\n        \n        setFormData(prev => ({ ...prev, [name]: newValue }));\n        \n        // Clear error when user starts typing (if field was previously touched)\n        if (touched[name] && errors[name]) {\n            const error = validateField(\n                fields.find(f => f.name === name) || {},\n                newValue\n            );\n            setErrors(prev => ({ ...prev, [name]: error }));\n        }\n    };\n\n    const handleSaveClick = async () => {\n        // Mark all fields as touched to show all errors\n        const allTouched = fields.reduce((acc, field) => {\n            acc[field.name] = true;\n            return acc;\n        }, {});\n        setTouched(allTouched);\n        \n        // Validate all fields\n        const isValid = validateForm();\n        \n        if (!isValid) {\n            if (handlers.showNotification) {\n                handlers.showNotification('Please fix the errors in the form', 'error');\n            }\n            return;\n        }\n        \n        setIsSubmitting(true);\n        \n        try {\n            if (onSave) {\n                await onSave(formData);\n            } else if (handlers.addTimetableEntry) {\n                await handlers.addTimetableEntry(formData);\n            }\n            onClose();\n        } catch (error) {\n            console.error('Error saving form:', error);\n            if (handlers.showNotification) {\n                handlers.showNotification(\n                    error.message || 'Failed to save. Please try again.',\n                    'error'\n                );\n            }\n        } finally {\n            setIsSubmitting(false);\n        }\n    };\n\n    return (\n        <AnimatePresence>\n            {isOpen && (\n                <motion.div\n                    className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\"\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    exit={{ opacity: 0 }}\n                    transition={{ duration: 0.22 }}\n                    onClick={onClose}\n                >\n                    <div\n                        onClick={(e) => e.stopPropagation()}\n                        className=\"bg-white rounded-lg shadow-xl p-6 w-full max-w-md mx-auto relative\"\n                    >\n                        <h2 className=\"text-2xl font-bold mb-4 text-gray-800\">{title}</h2>\n                        <div className=\"space-y-4\">\n                            {fields.map(field => {\n                                const hasError = touched[field.name] && errors[field.name];\n                                const fieldValue = formData[field.name] || '';\n                                \n                                return (\n                                    <div key={field.name} className=\"flex flex-col\">\n                                        <div className=\"flex justify-between items-center mb-1\">\n                                            <label \n                                                htmlFor={field.name} \n                                                className=\"block text-sm font-medium text-gray-700\"\n                                            >\n                                                {field.label}\n                                                {field.required && <span className=\"text-red-500\">*</span>}\n                                            </label>\n                                            {field.helpText && (\n                                                <span className=\"text-xs text-gray-500\">\n                                                    {field.helpText}\n                                                </span>\n                                            )}\n                                        </div>\n                                        \n                                        {field.type === 'textarea' ? (\n                                            <div className=\"relative\">\n                                                <textarea\n                                                    id={field.name}\n                                                    name={field.name}\n                                                    placeholder={field.placeholder || ''}\n                                                    value={fieldValue}\n                                                    onChange={handleChange}\n                                                    onBlur={() => handleBlur(field)}\n                                                    disabled={field.disabled || false}\n                                                    rows={field.rows || 3}\n                                                    className={`w-full px-4 py-2 rounded-lg border ${\n                                                        hasError \n                                                            ? 'border-red-300 text-red-900 placeholder-red-300 focus:outline-none focus:ring-red-500 focus:border-red-500' \n                                                            : 'border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent'\n                                                    } bg-gray-50 disabled:bg-gray-100 disabled:text-gray-500 pr-10`}\n                                                    aria-invalid={hasError ? 'true' : 'false'}\n                                                    aria-describedby={`${field.name}-error`}\n                                                />\n                                                {hasError && (\n                                                    <div className=\"absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none\">\n                                                        <ExclamationCircleIcon className=\"h-5 w-5 text-red-500\" aria-hidden=\"true\" />\n                                                    </div>\n                                                )}\n                                            </div>\n                                        ) : field.type === 'select' ? (\n                                            <div className=\"relative\">\n                                                <select\n                                                    id={field.name}\n                                                    name={field.name}\n                                                    value={fieldValue}\n                                                    onChange={handleChange}\n                                                    onBlur={() => handleBlur(field)}\n                                                    disabled={field.disabled || false}\n                                                    className={`w-full px-4 py-2 rounded-lg border ${\n                                                        hasError \n                                                            ? 'border-red-300 text-red-900 focus:outline-none focus:ring-red-500 focus:border-red-500' \n                                                            : 'border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent'\n                                                    } bg-gray-50 disabled:bg-gray-100 disabled:text-gray-500 pr-10 appearance-none`}\n                                                    aria-invalid={hasError ? 'true' : 'false'}\n                                                    aria-describedby={`${field.name}-error`}\n                                                >\n                                                    {!fieldValue && (\n                                                        <option value=\"\">\n                                                            {field.placeholder || 'Select an option'}\n                                                        </option>\n                                                    )}\n                                                    {field.options && field.options.map(option => (\n                                                        <option key={option.value} value={option.value}>\n                                                            {option.label}\n                                                        </option>\n                                                    ))}\n                                                </select>\n                                                {hasError && (\n                                                    <div className=\"absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none\">\n                                                        <ExclamationCircleIcon className=\"h-5 w-5 text-red-500\" aria-hidden=\"true\" />\n                                                    </div>\n                                                )}\n                                                <div className=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                                                    <svg className=\"fill-current h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                                                        <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                                                    </svg>\n                                                </div>\n                                            </div>\n                                        ) : field.type === 'checkbox' ? (\n                                            <div className=\"relative flex items-start\">\n                                                <div className=\"flex items-center h-5\">\n                                                    <input\n                                                        id={field.name}\n                                                        name={field.name}\n                                                        type=\"checkbox\"\n                                                        checked={!!fieldValue}\n                                                        onChange={handleChange}\n                                                        onBlur={() => handleBlur(field)}\n                                                        disabled={field.disabled || false}\n                                                        className={`h-4 w-4 rounded ${\n                                                            hasError \n                                                                ? 'text-red-600 border-red-300 focus:ring-red-500' \n                                                                : 'text-blue-600 border-gray-300 focus:ring-blue-500'\n                                                        }`}\n                                                        aria-invalid={hasError ? 'true' : 'false'}\n                                                        aria-describedby={`${field.name}-error`}\n                                                    />\n                                                </div>\n                                                <div className=\"ml-3 text-sm\">\n                                                    <label htmlFor={field.name} className=\"font-medium text-gray-700\">\n                                                        {field.checkboxLabel || field.label}\n                                                        {field.required && <span className=\"text-red-500\">*</span>}\n                                                    </label>\n                                                    {field.checkboxDescription && (\n                                                        <p className=\"text-gray-500\">{field.checkboxDescription}</p>\n                                                    )}\n                                                </div>\n                                            </div>\n                                        ) : (\n                                            <div className=\"relative\">\n                                                <input\n                                                    type={field.type || 'text'}\n                                                    id={field.name}\n                                                    name={field.name}\n                                                    placeholder={field.placeholder || ''}\n                                                    value={fieldValue}\n                                                    onChange={handleChange}\n                                                    onBlur={() => handleBlur(field)}\n                                                    disabled={field.disabled || false}\n                                                    min={field.min}\n                                                    max={field.max}\n                                                    step={field.step}\n                                                    className={`w-full px-4 py-2 rounded-lg border ${\n                                                        hasError \n                                                            ? 'border-red-300 text-red-900 placeholder-red-300 focus:outline-none focus:ring-red-500 focus:border-red-500' \n                                                            : 'border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent'\n                                                    } bg-gray-50 disabled:bg-gray-100 disabled:text-gray-500 ${field.type === 'number' ? 'pr-12' : 'pr-10'}`}\n                                                    aria-invalid={hasError ? 'true' : 'false'}\n                                                    aria-describedby={`${field.name}-error`}\n                                                />\n                                                {hasError && (\n                                                    <div className=\"absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none\">\n                                                        <ExclamationCircleIcon className=\"h-5 w-5 text-red-500\" aria-hidden=\"true\" />\n                                                    </div>\n                                                )}\n                                                {field.type === 'number' && field.unit && !hasError && (\n                                                    <div className=\"absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none\">\n                                                        <span className=\"text-gray-500 text-sm\">{field.unit}</span>\n                                                    </div>\n                                                )}\n                                            </div>\n                                        )}\n                                        \n                                        {hasError && (\n                                            <p className=\"mt-1 text-sm text-red-600\" id={`${field.name}-error`}>\n                                                {errors[field.name]}\n                                            </p>\n                                        )}\n                                    </div>\n                                );\n                            })}\n                        </div>\n                        <div className=\"mt-6 flex justify-end space-x-3\">\n                            <button\n                                type=\"button\"\n                                onClick={onClose}\n                                className=\"px-4 py-2 bg-white border border-gray-300 text-gray-700 font-medium rounded-lg hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                                disabled={isSubmitting}\n                            >\n                                Cancel\n                            </button>\n                            <button\n                                type=\"button\"\n                                onClick={handleSaveClick}\n                                disabled={isSubmitting || Object.keys(errors).length > 0}\n                                className={`px-4 py-2 font-medium rounded-lg focus:outline-none focus:ring-2 focus:ring-offset-2 transition duration-300 ${\n                                    isSubmitting || Object.keys(errors).length > 0\n                                        ? 'bg-blue-400 text-white cursor-not-allowed'\n                                        : 'bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500'\n                                }`}\n                            >\n                                {isSubmitting ? (\n                                    <span className=\"flex items-center\">\n                                        <svg className=\"animate-spin -ml-1 mr-2 h-4 w-4 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                                            <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                                            <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                                        </svg>\n                                        Saving...\n                                    </span>\n                                ) : 'Save'}\n                            </button>\n                        </div>\n                    </div>\n                </motion.div>\n            )}\n        </AnimatePresence>\n    );\n};\n\nexport default AddModal;","import * as React from \"react\";\nfunction ExclamationCircleIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M12 9v3.75m9-.75a9 9 0 1 1-18 0 9 9 0 0 1 18 0Zm-9 3.75h.008v.008H12v-.008Z\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(ExclamationCircleIcon);\nexport default ForwardRef;"],"names":["_ref","title","description","icon","action","className","_jsxs","motion","div","concat","initial","opacity","y","animate","transition","duration","children","_jsx","React","test","subject","isEditMode","onDelete","handlers","useHandlers","linkClasses","link","cardClasses","completed","id","onClick","handleCardClick","startsWith","window","open","console","warn","button","e","stopPropagation","toggleTestCompletion","whileTap","scale","backgroundColor","borderColor","type","stiffness","damping","svg","rotate","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","mcqs","width","height","x1","y1","x2","y2","points","currentSelectedSubject","setCurrentSelectedSubject","showNotification","testData","useTestData","trophyEditMode","setTrophyEditMode","useState","isModalOpen","setIsModalOpen","searchQuery","setSearchQuery","isSearching","setIsSearching","searchError","setSearchError","subjects","useMemo","Object","keys","useEffect","length","includes","openAddTestModal","handleCloseModal","handleToggleEditMode","prev","handleSelectSubject","handleSearchChange","value","target","trim","timer","setTimeout","clearTimeout","handleDeleteTest","deleteTest","handleToggleTestCompletion","hasSearchQuery","filteredTests","entries","flatMap","_ref2","tests","filter","toLowerCase","map","_objectSpread","_Fragment","placeholder","onChange","undefined","cx","cy","r","_testData$subject","_testData$subject2","disabled","EmptyState","fillRule","clipRule","TestCard","AddModal","isOpen","onClose","onSave","data","addTest","date","fields","name","label","required","EMPTY_INITIAL_STATE","validateField","field","numValue","Number","isNaN","min","max","minLength","maxLength","validate","customError","initialState","formData","setFormData","touched","setTouched","errors","setErrors","isSubmitting","setIsSubmitting","initialData","reduce","acc","_initialState$field$n","defaultValue","validateForm","useCallback","newErrors","isValid","forEach","error","handleBlur","handleChange","checked","newValue","find","f","AnimatePresence","exit","hasError","fieldValue","htmlFor","helpText","onBlur","rows","ExclamationCircleIcon","options","option","checkboxLabel","checkboxDescription","step","unit","async","allTouched","addTimetableEntry","message","svgRef","titleId","props","_objectWithoutProperties","_excluded","assign","ref"],"sourceRoot":""}