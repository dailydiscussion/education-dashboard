{"version":3,"file":"static/js/244.2675ac93.chunk.js","mappings":"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","sources":["components/TestCard.js","pages/TestsCompletedPage.js","components/AddModal.js"],"sourcesContent":["// src/components/TestCard.js\nimport React from 'react';\nimport { useHandlers } from '../context/HandlerContext';\n\nconst TestCard = React.memo(({ test, subject, isEditMode, onDelete }) => {\n    const handlers = useHandlers();\n    const handleCardClick = () => {\n        // Allow clicking the card to open a link only if not in edit mode\n        if (!isEditMode && test.link && test.link.startsWith('http')) {\n            window.open(test.link, '_blank');\n        } else if (test.link) {\n            // Log a warning for developers if the link is malformed\n            console.warn(`Invalid link for ${test.title}: ${test.link}. Must start with http:// or https://`);\n        }\n    };\n\n    const handleCheckboxClick = (e) => {\n        // Prevent the card's click event from firing when the checkbox is clicked\n        e.stopPropagation();\n        handlers.toggleTestCompletion(subject, test.title, !test.completed);\n    };\n\n    // Define base classes for the card for consistency\n    const baseCardClasses = 'relative p-4 rounded-lg flex justify-between items-center transition-all duration-300 shadow-sm';\n    \n    // Define specific classes for the completed state\n    const completedClasses = 'bg-green-50';\n    \n    // Define specific classes for the default (incomplete) state\n    const defaultClasses = 'bg-white border border-gray-200';\n    \n    // Add hover effects only if the card has a link and is not in edit mode\n    const linkClasses = test.link && !isEditMode ? 'cursor-pointer hover:shadow-md hover:-translate-y-1' : '';\n\n    // Combine all classes based on the component's state\n    const cardClasses = `${baseCardClasses} ${test.completed ? completedClasses : defaultClasses} ${linkClasses}`;\n\n    return (\n        <div\n            id={`trophy-test-item-${subject}-${test.title}`}\n            className={cardClasses}\n            onClick={handleCardClick}\n        >\n            <div className=\"flex items-center flex-grow min-w-0\">\n                {/* The interactive checkbox for toggling completion status */}\n                <button\n                    onClick={handleCheckboxClick}\n                    className={`flex-shrink-0 w-6 h-6 rounded-full border-2 flex items-center justify-center transition-colors duration-200 ${test.completed ? \"bg-green-500 border-green-500\" : \"border-gray-300 hover:border-green-400\"} mr-4`}\n                    aria-label={test.completed ? \"Mark as incomplete\" : \"Mark as complete\"}\n                >\n                    {test.completed && (\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4 text-white\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={3} d=\"M5 13l4 4L19 7\" />\n                        </svg>\n                    )}\n                </button>\n                \n                {/* Text content with conditional styling for better readability */}\n                <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-center gap-2\">\n                        <h4 className={`font-semibold truncate ${test.completed ? 'text-gray-800' : 'text-orange-600'}`}>{test.title}</h4>\n                    </div>\n                    <p className={`text-sm mt-1 ${test.completed ? 'text-gray-600' : 'text-gray-600'}`}>{test.mcqs} MCQs</p>\n                    <p className={`text-xs mt-1 ${test.completed ? 'text-green-600' : 'text-gray-600'}`}>Added on {test.date}</p>\n                </div>\n            </div>\n            \n            {/* Controls for editing and navigation */}\n            <div className=\"flex-shrink-0 ml-2\">\n                {isEditMode ? (\n                    <button\n                        className=\"p-1.5 rounded-full text-gray-400 hover:text-red-500 hover:bg-red-100 transition-colors duration-200\"\n                        onClick={(e) => { e.stopPropagation(); onDelete(subject, test.title); }}\n                        aria-label=\"Delete test\"\n                    >\n                         <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><path d=\"M3 6h18\"></path><path d=\"M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6\"></path><path d=\"M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2\"></path><line x1=\"10\" y1=\"11\" x2=\"10\" y2=\"17\"></line><line x1=\"14\" y1=\"11\" x2=\"14\" y2=\"17\"></line></svg>\n                    </button>\n                ) : (\n                    test.link && <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"text-gray-400\"><polyline points=\"9 18 15 12 9 6\"></polyline></svg>\n                )}\n            </div>\n        </div>\n    );\n});\n\nexport default TestCard;","// src/pages/TestsCompletedPage.js\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { useTestData } from '../context/TestDataContext'; // Only testData is in this context now\nimport TestCard from '../components/TestCard';\nimport { useHandlers } from '../context/HandlerContext';\nimport AddModal from '../components/AddModal'; // Import the new modal\n\nconst TestsCompletedPage = React.memo(({ currentSelectedSubject, setCurrentSelectedSubject, showNotification }) => {\n    const { testData } = useTestData();\n    const handlers = useHandlers();\n    const [trophyEditMode, setTrophyEditMode] = useState(false);\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [searchQuery, setSearchQuery] = useState('');\n\n    const subjects = useMemo(() => Object.keys(testData), [testData]);\n\n    useEffect(() => {\n        if (subjects.length > 0 && (!currentSelectedSubject || !subjects.includes(currentSelectedSubject))) {\n            setCurrentSelectedSubject(subjects[0]);\n        } else if (subjects.length === 0 && currentSelectedSubject !== '') {\n            setCurrentSelectedSubject('');\n        }\n    }, [subjects, currentSelectedSubject, setCurrentSelectedSubject]);\n\n    const openAddTestModal = () => {\n        setIsModalOpen(true);\n    };\n\n    const handleSaveTest = (data) => {\n        handlers.addTest(currentSelectedSubject, data.title, data.mcqs, data.date, data.link);\n    };\n\n    const modalFields = [\n        { name: 'title', label: 'Test Title', placeholder: 'e.g., Mid-term Exam', required: true },\n        { name: 'mcqs', label: 'Number of MCQs', type: 'number', placeholder: 'e.g., 40', required: true },\n        { name: 'date', label: 'Completion Date', type: 'date', required: true },\n        { name: 'link', label: 'Test Link (Optional)', type: 'url', placeholder: 'https://example.com/test' }\n    ];\n\n    const filteredTests = currentSelectedSubject && testData[currentSelectedSubject]\n        ? testData[currentSelectedSubject].filter(test =>\n            test.title.toLowerCase().includes(searchQuery.toLowerCase())\n        )\n        : [];\n\n    return (\n        <>\n            <div id=\"page-trophy\" className=\"page px-6 py-8\">\n                <header className=\"flex items-center justify-between mb-2\">\n                    <h1 className=\"text-3xl font-bold text-gray-900\">Tests</h1>\n                    <button\n                        onClick={() => setTrophyEditMode(!trophyEditMode)}\n                        className=\"text-blue-600 hover:text-blue-800 text-sm font-medium flex items-center\"\n                        aria-label={trophyEditMode ? 'Done editing tests' : 'Edit tests'}\n                    >\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"mr-1\"><path d=\"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\"></path><path d=\"M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z\"></path></svg>\n                        {trophyEditMode ? 'Done' : 'Edit'}\n                    </button>\n                </header>\n                <p className=\"text-gray-500 mb-6\">Completed Tests & Progress</p>\n\n                <div className=\"mb-6\">\n                    <input\n                        type=\"text\"\n                        placeholder=\"Search tests...\"\n                        className=\"w-full px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-50\"\n                        value={searchQuery}\n                        onChange={(e) => setSearchQuery(e.target.value)}\n                        aria-label=\"Search tests\"\n                    />\n                </div>\n\n                <div className=\"flex space-x-3 mb-6 overflow-x-auto no-scrollbar\" id=\"subject-filters-container\">\n                    {subjects.map(subject => (\n                        <button\n                            key={subject}\n                            className={`subject-filter flex-shrink-0 text-left p-3 rounded-lg transition-colors duration-200 shadow-sm\n                                ${currentSelectedSubject === subject ? 'bg-blue-600 text-white' : 'bg-gray-100 text-gray-700 hover:bg-gray-200'}`}\n                            onClick={() => setCurrentSelectedSubject(subject)}\n                        >\n                            <p className=\"font-bold\">{subject}</p>\n                            <p className={`text-sm ${currentSelectedSubject === subject ? 'opacity-80' : 'text-gray-500'}`}>\n                                {testData[subject]?.length || 0} Test{testData[subject]?.length === 1 ? '' : 's'}\n                            </p>\n                        </button>\n                    ))}\n                </div>\n                \n                <button\n                    onClick={openAddTestModal}\n                    className=\"w-full bg-blue-50 text-blue-700 font-semibold py-2 px-4 rounded-lg flex items-center justify-center hover:bg-blue-100 transition duration-300 mb-6\"\n                    disabled={!currentSelectedSubject}\n                >\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"mr-2\"><line x1=\"12\" y1=\"5\" x2=\"12\" y2=\"19\"></line><line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\"></line></svg>\n                    {`Add New Test to ${currentSelectedSubject || '...'}`}\n                </button>\n\n                <div id=\"test-list-container\" className=\"space-y-3\">\n                    {filteredTests.length === 0 ? (\n                        <p className=\"text-gray-500 text-center py-4\">No tests available for {currentSelectedSubject}.</p>\n                    ) : (\n                        filteredTests.map(test => (\n                            <TestCard\n                                key={test.title}\n                                test={test}\n                                subject={currentSelectedSubject}\n                                isEditMode={trophyEditMode}\n                                onDelete={handlers.deleteTest}\n                                handleToggleTestCompletion={handlers.toggleTestCompletion}\n                            />\n                        ))\n                    )}\n                </div>\n            </div>\n            <AddModal\n                isOpen={isModalOpen}\n                onClose={() => setIsModalOpen(false)}\n                onSave={handleSaveTest}\n                title={`Add New Test to ${currentSelectedSubject}`}\n                fields={modalFields}\n                showNotification={showNotification}\n            />\n        </>\n    );\n});\n\nexport default TestsCompletedPage;","// src/components/AddModal.js\nimport React, { useState, useEffect } from 'react';\nimport { useHandlers } from '../context/HandlerContext';\n\n// By defining the default object outside the component, we ensure it's a stable reference.\n// This prevents the useEffect hook from re-running unnecessarily.\nconst EMPTY_INITIAL_STATE = {};\n\nconst AddModal = ({ isOpen, onClose, onSave, title, fields, initialState = EMPTY_INITIAL_STATE }) => {\n    const handlers = useHandlers();\n    const [formData, setFormData] = useState({});\n\n    useEffect(() => {\n        // This effect now correctly runs only when the modal is opened,\n        // or if the `fields` or `initialState` props genuinely change.\n        // Previously, a new `initialState` object was created on every render,\n        // causing this effect to fire on every keystroke and reset the form data.\n        if (isOpen) {\n            const initialData = fields.reduce((acc, field) => {\n                acc[field.name] = initialState[field.name] || field.defaultValue || '';\n                return acc;\n            }, {});\n            setFormData(initialData);\n        } else {\n            // Reset formData when the modal closes to ensure a clean state for next time.\n            setFormData({});\n        }\n    }, [isOpen, fields, initialState]);\n\n\n    const handleChange = (e) => {\n        const { name, value } = e.target;\n        setFormData(prev => ({ ...prev, [name]: value }));\n    };\n\n    const handleSaveClick = () => {\n        // Basic validation to ensure required fields are filled.\n        for (const field of fields) {\n            if (field.required && !formData[field.name]) {\n                if (handlers.showNotification) {\n                    handlers.showNotification(`${field.label} is required.`, 'error');\n                } else {\n                    console.error(`${field.label} is required.`);\n                }\n                return;\n            }\n        }\n        if (onSave) {\n            onSave(formData);\n        } else if (handlers.addTimetableEntry) {\n            handlers.addTimetableEntry(formData);\n        }\n        onClose(); // Close modal after saving\n    };\n\n    if (!isOpen) {\n        return null;\n    }\n\n    return (\n        <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\">\n            <div className=\"bg-white rounded-lg shadow-xl p-6 w-full max-w-md mx-auto relative transform transition-all scale-100 opacity-100\">\n                <h2 className=\"text-2xl font-bold mb-4 text-gray-800\">{title}</h2>\n                <div className=\"space-y-4\">\n                    {fields.map(field => (\n                        <div key={field.name} className=\"flex flex-col\">\n                            <label htmlFor={field.name} className=\"block text-sm font-medium text-gray-700 mb-1\">\n                                {field.label}{field.required && <span className=\"text-red-500\">*</span>}\n                            </label>\n                            {field.type === 'textarea' ? (\n                                <textarea\n                                    id={field.name}\n                                    name={field.name}\n                                    placeholder={field.placeholder || ''}\n                                    value={formData[field.name] || ''}\n                                    onChange={handleChange}\n                                    // The `disabled` property is correctly read from the field config.\n                                    // Since `addModalFields` doesn't set it, this will be undefined, and the input will be enabled.\n                                    disabled={field.disabled || false}\n                                    rows=\"3\"\n                                    className=\"w-full px-4 py-2 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-50 disabled:bg-gray-200\"\n                                />\n                            ) : field.type === 'select' ? (\n                                <select\n                                    id={field.name}\n                                    name={field.name}\n                                    value={formData[field.name] || ''}\n                                    onChange={handleChange}\n                                    disabled={field.disabled || false}\n                                    className=\"w-full px-4 py-2 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-50 disabled:bg-gray-200\"\n                                >\n                                    {field.options && field.options.map(option => (\n                                        <option key={option.value} value={option.value}>\n                                            {option.label}\n                                        </option>\n                                    ))}\n                                </select>\n                            ) : (\n                                <input\n                                    type={field.type || 'text'}\n                                    id={field.name}\n                                    name={field.name}\n                                    placeholder={field.placeholder || ''}\n                                    value={formData[field.name] || ''}\n                                    onChange={handleChange}\n                                    disabled={field.disabled || false}\n                                    className=\"w-full px-4 py-2 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-50 disabled:bg-gray-200\"\n                                />\n                            )}\n                        </div>\n                    ))}\n                </div>\n                <div className=\"mt-6 flex justify-end space-x-3\">\n                     <button\n                        onClick={onClose}\n                        className=\"px-4 py-2 bg-gray-200 text-gray-700 font-bold rounded-lg hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-400 transition duration-300\"\n                    >\n                        Cancel\n                    </button>\n                    <button\n                        onClick={handleSaveClick}\n                        className=\"px-4 py-2 bg-blue-600 text-white font-bold rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition duration-300\"\n                    >\n                        Save\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default AddModal;"],"names":["React","_ref","test","subject","isEditMode","onDelete","handlers","useHandlers","linkClasses","link","cardClasses","concat","completed","_jsxs","id","title","className","onClick","handleCardClick","startsWith","window","open","console","warn","children","_jsx","e","stopPropagation","toggleTestCompletion","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","mcqs","date","width","height","x1","y1","x2","y2","points","currentSelectedSubject","setCurrentSelectedSubject","showNotification","testData","useTestData","trophyEditMode","setTrophyEditMode","useState","isModalOpen","setIsModalOpen","searchQuery","setSearchQuery","subjects","useMemo","Object","keys","useEffect","length","includes","filteredTests","filter","toLowerCase","_Fragment","type","placeholder","value","onChange","target","map","_testData$subject","_testData$subject2","openAddTestModal","disabled","TestCard","deleteTest","handleToggleTestCompletion","AddModal","isOpen","onClose","onSave","data","addTest","fields","name","label","required","EMPTY_INITIAL_STATE","initialState","formData","setFormData","initialData","reduce","acc","field","defaultValue","handleChange","prev","_objectSpread","htmlFor","rows","options","option","handleSaveClick","error","addTimetableEntry"],"sourceRoot":""}